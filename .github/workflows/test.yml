name: Scancompare Comprehensive Test Suite

on:
  push:
    branches: [main, develop, 'release-*']
  pull_request:
    branches: [main, develop, 'release-*']

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SCANCOMPARE_UPDATED: "1"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y expect
          pip install jinja2 requests

      - name: Install Trivy and Grype
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.42.0
          trivy --version
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype --version

      - name: Set up Docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo systemctl start docker

      - name: Set up directory structure
        run: |
          mkdir -p ~/ScanCompare/scan_reports
          mkdir -p ~/ScanCompare/temp
          mkdir -p ~/ScanCompare/backups
          mkdir -p ~/ScanCompare/temp/gh-pages
          mkdir -p ~/ScanCompare/temp/docker
          mkdir -p test_results
          mkdir -p test_scripts

      - name: Initialize test report
        run: |
          echo '# Scancompare Automation Flags Test Results' > test_results/report.md
          echo '' >> test_results/report.md
          echo '| Test Case | Status | Details |' >> test_results/report.md
          echo '|-----------|--------|---------|' >> test_results/report.md

      - name: Copy existing test scripts
        run: |
          # Copy all expect scripts to test_scripts directory
          cp scripts/expect/*.exp test_scripts/
          chmod +x test_scripts/*.exp

      - name: Prepare additional test scripts
        run: |
          # Instead of creating Expect scripts with heredoc, pull them from custom script directory
          cp .github/test_scripts/multiple_flags.exp test_scripts/
          cp .github/test_scripts/test_final_uninstall.exp test_scripts/
          chmod +x test_scripts/*.exp

      - name: Verify scancompare script
        id: verify
        run: |
          chmod +x scancompare
          if ./scancompare --help | grep -E -- "--auto|--mock-yes|--mock-no"; then
            echo "| Script Help Check | ✅ PASS | Automation flags found in help text |" >> test_results/report.md
            echo "Automation flags found in help text"
          else
            echo "| Script Help Check | ❌ FAIL | Automation flags NOT found in help text |" >> test_results/report.md
            echo "Automation flags NOT found in help text"
            exit 1
          fi

      - name: Test argument parsing
        id: parser
        run: |
          chmod +x scripts/test_parser.py
          python3 scripts/test_parser.py || (echo "Argument parser tests failed" && touch test_results/parser_results.md)
          if [ ! -f "test_results/parser_results.md" ]; then
            echo "| Test Case | Status | Details |" > test_results/parser_results.md
            echo "|-----------|--------|---------|" >> test_results/parser_results.md
            echo "| Parser Test | ❌ FAIL | Test script failed to run correctly |" >> test_results/parser_results.md
            echo "" >> test_results/parser_results.md
            echo "## Summary" >> test_results/parser_results.md
            echo "Passed 0 out of 1 tests" >> test_results/parser_results.md
          fi
          cat test_results/parser_results.md >> test_results/report.md

      - name: Run basic automation tests
        id: automation_tests
        run: |
          echo "Running basic automation tests..."
          echo "" >> test_results/report.md
          echo "## Basic Automation Test Results" >> test_results/report.md
          echo "" >> test_results/report.md
          echo "| Test Case | Status | Details |" >> test_results/report.md
          echo "|-----------|--------|---------|" >> test_results/report.md
          
          # Run automation tests
          for script in test_scripts/basic_*.exp test_scripts/multiple_flags.exp; do
            if [ -f "$script" ]; then
              echo "Running test: $(basename $script)"
              $script || echo "Test execution error: $(basename $script)"
            fi
          done

          # Process automation test results
          for mode in auto yes no multiple_flags; do
            file="test_results/basic_${mode}_result.txt"
            if [ "$mode" = "multiple_flags" ]; then
              file="test_results/multiple_flags_result.txt"
            fi
            
            case $mode in
              auto) label="Auto Mode Test" ;;
              yes) label="Mock-Yes Mode Test" ;;
              no) label="Mock-No Mode Test" ;;
              multiple_flags) label="Multiple Flags Test" ;;
            esac

            if [ -f "$file" ]; then
              result=$(cat "$file")
              if [ "$result" = "PASS" ]; then
                echo "| $label | ✅ PASS | $mode mode correctly handled interactive flow |" >> test_results/report.md
              elif [ "$result" = "INCONCLUSIVE" ]; then
                echo "| $label | ⚠️ INCONCLUSIVE | Script completed but $mode behavior unclear |" >> test_results/report.md
              else
                echo "| $label | ❌ FAIL | $mode mode failed to handle interactive flow |" >> test_results/report.md
              fi
            else
              echo "| $label | ❌ FAIL | Test did not complete |" >> test_results/report.md
            fi
          done

      - name: Run utility command tests
        id: utility_tests
        run: |
          echo "Running utility command tests..."
          echo "" >> test_results/report.md
          echo "## Utility Command Tests" >> test_results/report.md
          echo "" >> test_results/report.md
          echo "| Test Case | Status | Details |" >> test_results/report.md
          echo "|-----------|--------|---------|" >> test_results/report.md
          
          # Run basic command tests
          for test in help version update uninstall; do
            if [ -f "test_scripts/test_${test}.exp" ]; then
              echo "Running test: test_${test}.exp"
              test_scripts/test_${test}.exp || echo "Test execution error: test_${test}.exp"
              
              file="test_results/test_${test}_result.txt"
              case $test in
                help) label="Help Command Test" ;;
                version) label="Version Command Test" ;;
                update) label="Update Command Test" ;;
                uninstall) label="Uninstall Command Test" ;;
              esac

              if [ -f "$file" ]; then
                result=$(cat "$file")
                if [ "$result" = "PASS" ]; then
                  echo "| $label | ✅ PASS | --$test command handled correctly |" >> test_results/report.md
                elif [ "$result" = "INCONCLUSIVE" ]; then
                  echo "| $label | ⚠️ INCONCLUSIVE | --$test command completed with unclear results |" >> test_results/report.md
                else
                  echo "| $label | ❌ FAIL | --$test command failed |" >> test_results/report.md
                fi
              else
                echo "| $label | ❌ FAIL | --$test test did not complete |" >> test_results/report.md
              fi
            else
              echo "| $label | ⚠️ INCONCLUSIVE | Test script not found |" >> test_results/report.md
            fi
          done

      - name: Run feature tests
        id: feature_tests
        run: |
          echo "Running feature tests..."
          echo "" >> test_results/report.md
          echo "## Feature Tests" >> test_results/report.md
          echo "" >> test_results/report.md
          echo "| Test Case | Status | Details |" >> test_results/report.md
          echo "|-----------|--------|---------|" >> test_results/report.md
          
          # Run feature tests sequentially
          for test in verbose keep_data; do
            if [ -f "test_scripts/test_${test}.exp" ]; then
              echo "Running test: test_${test}.exp"
              test_scripts/test_${test}.exp || echo "Test execution error: test_${test}.exp"
              
              file="test_results/test_${test}_result.txt"
              case $test in
                verbose) label="Verbose Mode Test" ;;
                keep_data) label="Keep Data Flag Test" ;;
              esac

              if [ -f "$file" ]; then
                result=$(cat "$file")
                if [ "$result" = "PASS" ]; then
                  echo "| $label | ✅ PASS | --${test//_/-} flag handled correctly |" >> test_results/report.md
                elif [ "$result" = "INCONCLUSIVE" ]; then
                  echo "| $label | ⚠️ INCONCLUSIVE | --${test//_/-} flag completed with unclear results |" >> test_results/report.md
                else
                  echo "| $label | ❌ FAIL | --${test//_/-} flag failed |" >> test_results/report.md
                fi
              else
                echo "| $label | ❌ FAIL | --${test//_/-} test did not complete |" >> test_results/report.md
              fi
            else
              echo "| $label | ⚠️ INCONCLUSIVE | Test script not found |" >> test_results/report.md
            fi
          done

      - name: Run GitHub-specific tests
        id: github_tests
        if: env.GITHUB_TOKEN != ''
        run: |
          echo "Running GitHub-specific tests..."
          echo "" >> test_results/report.md
          echo "## GitHub Integration Tests" >> test_results/report.md
          echo "" >> test_results/report.md
          echo "| Test Case | Status | Details |" >> test_results/report.md
          echo "|-----------|--------|---------|" >> test_results/report.md
          
          # Run repo-url test
          if [ -f "test_scripts/test_repo_url.exp" ]; then
            test_scripts/test_repo_url.exp
            
            file="test_results/test_repo_url_result.txt"
            if [ -f "$file" ]; then
              result=$(cat "$file")
              if [ "$result" = "PASS" ]; then
                echo "| Repository URL Test | ✅ PASS | --repo-url flag handled correctly |" >> test_results/report.md
              elif [ "$result" = "INCONCLUSIVE" ]; then
                echo "| Repository URL Test | ⚠️ INCONCLUSIVE | --repo-url flag completed with unclear results |" >> test_results/report.md
              else
                echo "| Repository URL Test | ❌ FAIL | --repo-url flag failed |" >> test_results/report.md
              fi
            else
              echo "| Repository URL Test | ❌ FAIL | --repo-url test did not complete |" >> test_results/report.md
            fi
          else
            echo "| Repository URL Test | ⚠️ INCONCLUSIVE | Test script not found |" >> test_results/report.md
          fi
          
          # Skip advanced GitHub tests unless explicitly enabled
          if [ "$RUN_GITHUB_ADVANCED_TESTS" = "true" ]; then
            # Run GHAS test
            if [ -f "test_scripts/test_repo_url_ghas.exp" ]; then
              test_scripts/test_repo_url_ghas.exp
              
              file="test_results/test_repo_url_ghas_result.txt"
              if [ -f "$file" ]; then
                result=$(cat "$file")
                if [ "$result" = "PASS" ]; then
                  echo "| GHAS Integration Test | ✅ PASS | --ghas flag handled correctly |" >> test_results/report.md
                elif [ "$result" = "INCONCLUSIVE" ]; then
                  echo "| GHAS Integration Test | ⚠️ INCONCLUSIVE | --ghas flag completed with unclear results |" >> test_results/report.md
                else
                  echo "| GHAS Integration Test | ❌ FAIL | --ghas flag failed |" >> test_results/report.md
                fi
              else
                echo "| GHAS Integration Test | ❌ FAIL | --ghas test did not complete |" >> test_results/report.md
              fi
            else
              echo "| GHAS Integration Test | ⚠️ INCONCLUSIVE | Test script not found |" >> test_results/report.md
            fi
            
            # Run GitHub Pages test
            if [ -f "test_scripts/test_repo_url_gh_pages.exp" ]; then
              test_scripts/test_repo_url_gh_pages.exp
              
              file="test_results/test_repo_url_gh_pages_result.txt"
              if [ -f "$file" ]; then
                result=$(cat "$file")
                if [ "$result" = "PASS" ]; then
                  echo "| GitHub Pages Test | ✅ PASS | --gh-pages flag handled correctly |" >> test_results/report.md
                elif [ "$result" = "INCONCLUSIVE" ]; then
                  echo "| GitHub Pages Test | ⚠️ INCONCLUSIVE | --gh-pages flag completed with unclear results |" >> test_results/report.md
                else
                  echo "| GitHub Pages Test | ❌ FAIL | --gh-pages flag failed |" >> test_results/report.md
                fi
              else
                echo "| GitHub Pages Test | ❌ FAIL | --gh-pages test did not complete |" >> test_results/report.md
              fi
            else
              echo "| GitHub Pages Test | ⚠️ INCONCLUSIVE | Test script not found |" >> test_results/report.md
            fi
          else
            echo "| GHAS Integration Test | ⚠️ INCONCLUSIVE | --ghas test skipped in CI environment |" >> test_results/report.md
            echo "| GitHub Pages Test | ⚠️ INCONCLUSIVE | --gh-pages test skipped in CI environment |" >> test_results/report.md
          fi

      - name: Generate test summary
        run: |
          if [ ! -f "test_results/report.md" ]; then
            echo "Error: test_results/report.md not found"
            exit 1
          fi

          # Count test results
          TOTAL_TESTS=$(grep "^|" test_results/report.md | grep -vE '\-\-\-|\| Test Case ' | wc -l)
          PASSED_TESTS=$(grep -c "✅ PASS" test_results/report.md || echo 0)
          INCONCLUSIVE_TESTS=$(grep -c "⚠️ INCONCLUSIVE" test_results/report.md || echo 0)
          FAILED_TESTS=$(grep -c "❌ FAIL" test_results/report.md || echo 0)

          # Add summary to report
          echo "" >> test_results/report.md
          echo "## Test Summary" >> test_results/report.md
          echo "" >> test_results/report.md
          echo "- Total Tests: $TOTAL_TESTS" >> test_results/report.md
          echo "- Passed: $PASSED_TESTS" >> test_results/report.md
          echo "- Inconclusive: $INCONCLUSIVE_TESTS" >> test_results/report.md
          echo "- Failed: $FAILED_TESTS" >> test_results/report.md

          # Add failed test details if any
          if [ "$FAILED_TESTS" -gt 0 ]; then
            echo "" >> test_results/report.md
            echo "### Failed Tests" >> test_results/report.md
            echo "" >> test_results/report.md
            grep "❌ FAIL" test_results/report.md > temp_failed.txt || echo "- Error listing failed tests" > temp_failed.txt
            cat temp_failed.txt >> test_results/report.md
            rm -f temp_failed.txt
          fi

          # Add inconclusive test details if any
          if [ "$INCONCLUSIVE_TESTS" -gt 0 ]; then
            echo "" >> test_results/report.md
            echo "### Inconclusive Tests" >> test_results/report.md
            echo "" >> test_results/report.md
            grep "⚠️ INCONCLUSIVE" test_results/report.md > temp_inconclusive.txt || echo "- Error listing inconclusive tests" > temp_inconclusive.txt
            cat temp_inconclusive.txt >> test_results/report.md
            rm -f temp_inconclusive.txt
          fi

          # Add log information
          echo "" >> test_results/report.md
          echo "## Detailed Logs" >> test_results/report.md
          echo "" >> test_results/report.md
          echo "Detailed logs for each test are available in the test_results directory." >> test_results/report.md

          # Set overall test status
          if [ "$FAILED_TESTS" -eq 0 ]; then
            echo "success" > test_results/scancompare_status.txt
          else
            echo "failure" > test_results/scancompare_status.txt
          fi

      - name: Save test results
        run: |
          mkdir -p $GITHUB_WORKSPACE/test-artifacts
          cp -r test_results/* $GITHUB_WORKSPACE/test-artifacts/
          echo "Test artifacts are stored in $GITHUB_WORKSPACE/test-artifacts" > $GITHUB_WORKSPACE/test-artifacts/README.txt
          chmod -R a+r $GITHUB_WORKSPACE/test-artifacts
          echo "Artifact Directory: $GITHUB_WORKSPACE/test-artifacts" | tee -a $GITHUB_STEP_SUMMARY

      - name: Output test summary
        run: |
          cat test_results/report.md >> $GITHUB_STEP_SUMMARY

      - name: Final uninstall test
        id: final_uninstall
        if: always()  # Run even if previous steps failed
        run: |
          echo "Running final uninstall test (all other tests should be complete)..."
          test_scripts/test_final_uninstall.exp
          
          echo "" >> test_results/report.md
          echo "## Final Uninstall Test Result" >> test_results/report.md
          echo "" >> test_results/report.md
          echo "| Test Case | Status | Details |" >> test_results/report.md
          echo "|-----------|--------|---------|" >> test_results/report.md
          
          file="test_results/test_final_uninstall_result.txt"
          if [ -f "$file" ]; then
            result=$(cat "$file")
            if [ "$result" = "PASS" ]; then
              echo "| Complete Uninstall Test | ✅ PASS | Application uninstalled successfully |" >> test_results/report.md
            else
              echo "| Complete Uninstall Test | ❌ FAIL | Application uninstall failed |" >> test_results/report.md
            fi
          else
            echo "| Complete Uninstall Test | ❌ FAIL | Test did not complete |" >> test_results/report.md
          fi
          
      - name: Report test status
        if: always()  # Run even if previous steps failed
        run: |
          result=$(cat test_results/scancompare_status.txt 2>/dev/null || echo "failure")
          echo "Final result: $result"
          if [ "$result" = "success" ]; then
            echo "✅ All tests passed successfully!"
            exit 0
          else
            echo "❌ Some tests failed. See test report for details."
            cat test_results/report.md
            exit 1
          fi