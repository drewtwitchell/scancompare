name: Test scancompare on Release Branches

on:
  push:
    branches:
      - 'release-*'  # This triggers the workflow only on release branches (e.g., release-1.1.0)
  pull_request:
    branches:
      - 'release-*'  # This triggers the workflow on pull requests to release branches

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged # Ensure Docker can run in the GitHub Actions runner

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python environment
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      # Install dependencies using install.sh
      - name: Run install.sh to set up the environment
        run: |
          bash <(curl -fsSL https://raw.githubusercontent.com/drewtwitchell/scancompare/main/install.sh)

      # Ensure jinja2 is installed (after running install.sh)
      - name: Ensure jinja2 is installed
        run: |
          source ~/.scancompare-env/bin/activate
          pip install jinja2 --quiet --disable-pip-version-check --no-warn-script-location

      # Activate the virtual environment and verify jinja2 installation
      - name: Activate virtual environment and verify jinja2
        run: |
          source ~/.scancompare-env/bin/activate
          python -c "import jinja2; print('Jinja2 version:', jinja2.__version__)"

      # Set up Docker (this is required to run docker commands)
      - name: Set up Docker
        run: |
          sudo apt-get update
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo systemctl start docker
          sudo systemctl enable docker

      # Test scanning a GitHub repository with Dockerfile (Mock Yes)
      - name: Test scancompare with GitHub repo URL and Docker build (Mock Yes)
        run: |
          echo "Testing scancompare with GitHub repo URL and Docker build (Mock Yes)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --auto --mock-yes

      - name: Test scancompare with GitHub repo URL and Docker build (Mock No)
        run: |
          echo "Testing scancompare with GitHub repo URL and Docker build (Mock No)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --auto --mock-no

      - name: Test scancompare with GitHub repo URL and Docker build (Auto)
        run: |
          echo "Testing scancompare with GitHub repo URL and Docker build (Auto)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --auto

      - name: Test scancompare with GitHub repo URL and Docker build (Interactive Yes)
        run: |
          echo "Testing scancompare with GitHub repo URL and Docker build (Interactive Yes)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --auto --mock-yes

      - name: Test scancompare with GitHub repo URL and Docker build (Interactive No)
        run: |
          echo "Testing scancompare with GitHub repo URL and Docker build (Interactive No)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --auto --mock-no

      # Test upload to GitHub Advanced Security (GHAS) with --auto flag
      - name: Test upload to GHAS (Mock Yes)
        run: |
          echo "Testing scancompare with GHAS upload (Mock Yes)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --ghas --auto --mock-yes

      - name: Test upload to GHAS (Mock No)
        run: |
          echo "Testing scancompare with GHAS upload (Mock No)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --ghas --auto --mock-no

      - name: Test upload to GHAS (Auto)
        run: |
          echo "Testing scancompare with GHAS upload (Auto)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --ghas --auto

      - name: Test upload to GHAS (Interactive Yes)
        run: |
          echo "Testing scancompare with GHAS upload (Interactive Yes)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --ghas --auto --mock-yes

      - name: Test upload to GHAS (Interactive No)
        run: |
          echo "Testing scancompare with GHAS upload (Interactive No)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --ghas --auto --mock-no

      # Test publishing report to GitHub Pages with --auto flag
      - name: Test publish to GitHub Pages (Mock Yes)
        run: |
          echo "Testing scancompare with GitHub Pages upload (Mock Yes)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --gh-pages --auto --mock-yes

      - name: Test publish to GitHub Pages (Mock No)
        run: |
          echo "Testing scancompare with GitHub Pages upload (Mock No)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --gh-pages --auto --mock-no

      - name: Test publish to GitHub Pages (Auto)
        run: |
          echo "Testing scancompare with GitHub Pages upload (Auto)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --gh-pages --auto

      - name: Test publish to GitHub Pages (Interactive Yes)
        run: |
          echo "Testing scancompare with GitHub Pages upload (Interactive Yes)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --gh-pages --auto --mock-yes

      - name: Test publish to GitHub Pages (Interactive No)
        run: |
          echo "Testing scancompare with GitHub Pages upload (Interactive No)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --gh-pages --auto --mock-no

      # Test verbose mode with --auto flag
      - name: Test scancompare in verbose mode (Auto)
        run: |
          echo "Testing scancompare in verbose mode (Auto)..."
          python scancompare --repo-url https://github.com/docker-library/hello-world --verbose --auto
          
      # Test version check with --auto flag
      - name: Test scancompare version (Auto)
        run: |
          echo "Testing scancompare version (Auto)..."
          python scancompare --version --auto

      # Test update functionality with --auto flag
      - name: Test scancompare update (Auto)
        run: |
          echo "Testing scancompare update (Auto)..."
          python scancompare --update --auto

      # Uninstall scancompare once and then reinstall
      - name: Uninstall scancompare
        run: |
          echo "Uninstalling scancompare..."
          python scancompare --uninstall --auto

      # Reinstall scancompare
      - name: Reinstall scancompare
        run: |
          echo "Reinstalling scancompare..."
          bash <(curl -fsSL https://raw.githubusercontent.com/drewtwitchell/scancompare/main/install.sh)

      # Ensure jinja2 is installed after reinstallation
      - name: Ensure jinja2 is installed (after reinstall)
        run: |
          source ~/.scancompare-env/bin/activate
          pip install jinja2 --quiet --disable-pip-version-check --no-warn-script-location

      # Verify jinja2 installation after reinstallation
      - name: Verify jinja2 after reinstall
        run: |
          source ~/.scancompare-env/bin/activate
          python -c "import jinja2; print('Jinja2 version:', jinja2.__version__)"

      # Test uninstall functionality with --auto flag after reinstall
      - name: Test scancompare uninstall after reinstall (Auto)
        run: |
          echo "Testing scancompare uninstall after reinstall (Auto)..."
          python scancompare --uninstall --auto

      # Check for failed tests and stop the build if any test fails
      - name: Check for failed tests
        run: |
          if [[ $? -ne 0 ]]; then
            echo "Some tests failed! Exiting the build."
            exit 1
          fi