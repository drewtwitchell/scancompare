#!/usr/bin/env python3
import os
import sys
import subprocess
import json
import tempfile
import shutil
from datetime import datetime
from pathlib import Path

VERSION = "1.4.1"
SCRIPT_NAME = "scancompare"
INSTALL_PATH = Path.home() / ".local" / "bin" / SCRIPT_NAME
REPO_USER = "drewtwitchell"
REPO_NAME = "scancompare"
REMOTE_URL = f"https://raw.githubusercontent.com/{REPO_USER}/{REPO_NAME}/main/{SCRIPT_NAME}"
REPORT_DIR = Path("scan_reports")

def run(cmd):
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"‚ùå Error running: {cmd}\n{result.stderr}")
        sys.exit(1)
    return result.stdout.strip()

def get_remote_version():
    try:
        return run(f"curl -fsSL {REMOTE_URL} | grep VERSION | head -n1 | cut -d'\"' -f2")
    except Exception:
        return None

def self_update():
    remote_version = get_remote_version()
    if not remote_version or remote_version == VERSION:
        return  # No update needed or remote version couldn't be determined

    print(f"üîÑ New version available: {remote_version} (current: {VERSION})")

    tmp_file = Path(tempfile.mkstemp(suffix=".py")[1])
    try:
        run(f"curl -fsSL {REMOTE_URL} -o {tmp_file}")
        if not tmp_file.read_text().startswith("#!"):
            print("‚ùå Update failed: fetched script is not a valid Python file.")
            return

        tmp_file.chmod(0o755)
        INSTALL_PATH.parent.mkdir(parents=True, exist_ok=True)
        shutil.copy(tmp_file, INSTALL_PATH)
        print(f"‚úÖ scancompare updated to version {remote_version}")
        subprocess.run(["python3", str(INSTALL_PATH), "--no-update", *sys.argv[1:]])
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå Failed to auto-update: {e}")
        sys.exit(1)

def check_dependencies():
    for tool in ["trivy", "grype", "jq", "docker"]:
        if shutil.which(tool) is None:
            print(f"üì¶ Installing {tool}...")
            try:
                if shutil.which("brew"):
                    run(f"brew install {tool}")
                else:
                    if tool == "jq":
                        run("curl -sL https://github.com/stedolan/jq/releases/latest/download/jq-osx-amd64 -o ~/.local/bin/jq && chmod +x ~/.local/bin/jq")
                    elif tool == "trivy":
                        run("brew install aquasecurity/trivy/trivy")
                    elif tool == "grype":
                        run("brew install anchore/grype/grype")
            except Exception as e:
                print(f"‚ùå Failed to install {tool}: {e}")
                sys.exit(1)

def scan_image(image):
    timestamp = datetime.now().strftime("%Y-%m-%d")
    REPORT_DIR.mkdir(exist_ok=True)
    trivy_file = REPORT_DIR / "original_trivy.json"
    grype_file = REPORT_DIR / "original_grype.json"
    diff_file = REPORT_DIR / "original_diff.json"
    html_file = REPORT_DIR / f"scan_report_{image.replace('/', '_').replace(':', '_')}_{timestamp}.html"

    print("üîπ Scanning with Trivy...")
    run(f"trivy image --scanners vuln --format json -o {trivy_file} {image}")
    print(f"    ‚úî Trivy scan saved to {trivy_file}")

    print("üîπ Scanning with Grype...")
    run(f"grype {image} -o json > {grype_file}")
    print(f"    ‚úî Grype scan saved to {grype_file}")

    return trivy_file, grype_file, diff_file, html_file, timestamp

def compare_scans(trivy_path, grype_path, diff_path):
    with open(trivy_path) as f:
        trivy_data = json.load(f)
    with open(grype_path) as f:
        grype_data = json.load(f)

    trivy_cves = [{"id": v["VulnerabilityID"], "severity": v["Severity"]} for r in trivy_data.get("Results", []) for v in r.get("Vulnerabilities", [])]
    grype_cves = [{"id": m["vulnerability"]["id"], "severity": m["vulnerability"]["severity"]} for m in grype_data.get("matches", [])]

    trivy_ids = {v["id"] for v in trivy_cves}
    grype_ids = {v["id"] for v in grype_cves}
    shared_ids = trivy_ids & grype_ids

    def by_severity(cves):
        result = {}
        for v in cves:
            result.setdefault(v["severity"], []).append(v["id"])
        return {k: sorted(set(v)) for k, v in result.items()}

    result = {
        "summary": {
            "total_trivy": len(trivy_cves),
            "total_grype": len(grype_cves),
            "shared": len(shared_ids),
            "only_in_trivy": len(trivy_ids - grype_ids),
            "only_in_grype": len(grype_ids - trivy_ids)
        },
        "breakdown": {
            "trivy": by_severity([v for v in trivy_cves if v["id"] not in grype_ids]),
            "grype": by_severity([v for v in grype_cves if v["id"] not in trivy_ids]),
            "shared": by_severity([v for v in trivy_cves if v["id"] in shared_ids])
        },
        "actions": {
            "suggestion": "Review shared CVEs and prioritize those with known fixes."
        }
    }

    with open(diff_path, "w") as f:
        json.dump(result, f, indent=2)

    print(f"    ‚úî Diff report saved to {diff_path}")
    return result

def print_terminal_summary(result):
    print("\nüìä CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {result['summary']['total_grype']}    | {result['summary']['only_in_grype']}           | {result['summary']['shared']}")
    print(f"Trivy      | {result['summary']['total_trivy']}    | {result['summary']['only_in_trivy']}           | {result['summary']['shared']}")
    print("\nSuggested Action:", result["actions"]["suggestion"])

    print("\nShared CVEs by Severity:")
    for sev, ids in result["breakdown"]["shared"].items():
        print(f"  {sev}: {len(ids)}")

    print("\nUnique to Grype:")
    for sev, ids in result["breakdown"]["grype"].items():
        print(f"  {sev}: {len(ids)}")

    print("\nUnique to Trivy:")
    for sev, ids in result["breakdown"]["trivy"].items():
        print(f"  {sev}: {len(ids)}")

def generate_html_report(result, html_path, image, timestamp):
    with open(html_path, "w") as f:
        f.write(f"""<!DOCTYPE html><html><head><meta charset="UTF-8"><title>Scan Report</title>
<style>body{{font-family:sans-serif;padding:20px;max-width:900px;margin:auto}} h1,h2,h3{{color:#2c3e50}} pre{{background:#f4f4f4;padding:10px;border-radius:8px;overflow:auto}} button{{margin:10px 0;padding:6px 10px;background:#2c3e50;color:#fff;border:none;border-radius:5px;cursor:pointer}} table{{border-collapse:collapse;width:100%;margin-top:1em}} th,td{{border:1px solid #ccc;padding:8px;text-align:left}} ul{{list-style-type:square;margin-left:20px}}</style>
<script>function toggle(id){{var el=document.getElementById(id);el.style.display=(el.style.display==='none'||!el.style.display)?'block':'none'}} function savePDF(){{window.print();}}</script>
</head><body>
<h1>Scan Summary for <code>{image}</code></h1>
<p><strong>Date:</strong> {timestamp}</p>
<button onclick='savePDF()'>üìÑ Download as PDF</button>
<table>
<tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
<tr><td>Grype</td><td>{result['summary']['total_grype']}</td><td>{result['summary']['only_in_grype']}</td><td>{result['summary']['shared']}</td></tr>
<tr><td>Trivy</td><td>{result['summary']['total_trivy']}</td><td>{result['summary']['only_in_trivy']}</td><td>{result['summary']['shared']}</td></tr>
</table>
<h3>Suggested Action</h3><p>{result['actions']['suggestion']}</p>
<h3>Shared CVEs</h3>""" + "".join(f"<h4>{sev}</h4><ul>" + "".join(f"<li>{cve}</li>" for cve in ids) + "</ul>" for sev, ids in result["breakdown"]["shared"].items()) + """
<h3>Unique to Grype</h3>""" + "".join(f"<h4>{sev}</h4><ul>" + "".join(f"<li>{cve}</li>" for cve in ids) + "</ul>" for sev, ids in result["breakdown"]["grype"].items()) + """
<h3>Unique to Trivy</h3>""" + "".join(f"<h4>{sev}</h4><ul>" + "".join(f"<li>{cve}</li>" for cve in ids) + "</ul>" for sev, ids in result["breakdown"]["trivy"].items()) + f"""
<button onclick="toggle('raw_json')">Toggle Raw JSON</button>
<pre id="raw_json" style="display:none;">{json.dumps(result, indent=2)}</pre>
</body></html>""")

    print(f"‚úÖ HTML report saved: {html_path}")

def ask_open(html_path):
    print("\nüìÅ Would you like to open the HTML report in your browser? (y/n)")
    choice = input().strip().lower()
    if choice == "y":
        if sys.platform == "darwin":
            subprocess.run(["open", html_path])
        elif sys.platform.startswith("linux"):
            subprocess.run(["xdg-open", html_path])
        else:
            print(f"Open manually: {html_path}")
    else:
        print(f"üìé You can view it later at: {html_path}")

def main():
    if "--no-update" not in sys.argv:
        self_update()

    if len(sys.argv) < 2 or sys.argv[1].startswith("-"):
        print("‚ùå Usage: scancompare <docker-image>")
        sys.exit(1)

    check_dependencies()
    image = sys.argv[1]
    trivy, grype, diff, html, timestamp = scan_image(image)
    result = compare_scans(trivy, grype, diff)
    print_terminal_summary(result)
    generate_html_report(result, html, image, timestamp)
    ask_open(html)

if __name__ == "__main__":
    main()
