#!/usr/bin/env python3
# scancompare version 1.7.5

import os
import sys
import json
import subprocess
import platform
from datetime import datetime
from urllib.request import urlopen
from pathlib import Path
import webbrowser

SCRIPT_NAME = "scancompare"
SCRIPT_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"
VERSION = "1.7.5"

def check_latest_version(only_check=False):
    try:
        latest = urlopen(SCRIPT_URL).read().decode("utf-8").split("VERSION = ")[1].split("\n")[0].strip('"')
        if latest != VERSION:
            print(f"üîÑ New version available: {VERSION} ‚Üí {latest}")
            update_script()
            print("‚úÖ scancompare updated to latest version")
            if only_check:
                sys.exit(0)
            os.execv(sys.executable, [sys.executable] + sys.argv)
        elif only_check:
            print(f"üì¶ scancompare version {VERSION}")
            sys.exit(0)
    except Exception:
        print("‚ö†Ô∏è Could not determine remote version.")
        if only_check:
            print(f"üì¶ scancompare version {VERSION}")
            sys.exit(0)

def update_script():
    try:
        new_code = urlopen(SCRIPT_URL).read().decode("utf-8")
        script_path = Path(__file__)
        script_path.write_text(new_code)
    except Exception as e:
        print("‚ùå Failed to update script:", e)

def get_version(tool):
    try:
        result = subprocess.run([tool, "version"], capture_output=True, text=True)
        for line in result.stdout.splitlines():
            if tool.lower() in line.lower() or "Version" in line:
                return line.strip()
    except Exception:
        return "unknown"
    return "unknown"

def run_scan(tool, image, output_path):
    try:
        if tool == "trivy":
            cmd = [tool, "image", "-f", "json", "-o", str(output_path), image]
            subprocess.run(cmd, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        elif tool == "grype":
            with open(output_path, "w") as f:
                subprocess.run([tool, image, "-o", "json"], check=True, stdout=f, stderr=subprocess.DEVNULL)
        return True
    except subprocess.CalledProcessError:
        return False

def extract_cves_by_severity(file_path, tool_name):
    severity_map = {}
    try:
        with open(file_path) as f:
            data = json.load(f)
        for result in data.get("Results", []):
            for item in result.get("Vulnerabilities", []):
                cve = item["VulnerabilityID"]
                severity = item.get("Severity", "Unknown").capitalize()
                if severity not in severity_map:
                    severity_map[severity] = set()
                severity_map[severity].add(cve)
    except Exception:
        pass
    return severity_map

def flatten_cves(severity_map):
    return set(cve for cves in severity_map.values() for cve in cves)

def explain_exit(msg):
    print(f"‚ö†Ô∏è {msg}")
    sys.exit(1)
