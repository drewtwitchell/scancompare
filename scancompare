#!/usr/bin/env python3

import json
import os
import subprocess
import sys
import datetime
from pathlib import Path
from urllib.request import urlopen
from shutil import which

VERSION = "1.5.9"
SCRIPT_NAME = "scancompare"
SCRIPT_PATH = Path(__file__).resolve()
REMOTE_RAW_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"
REPORTS_DIR = Path("scan_reports")
REPORTS_DIR.mkdir(exist_ok=True)

def get_tool_version(command, name):
    try:
        result = subprocess.run([command, "version"], capture_output=True, text=True)
        output = result.stdout.strip()
        if name == "trivy":
            for line in output.splitlines():
                if line.lower().startswith("version:"):
                    return line.split(":")[1].strip()
        elif name == "grype":
            for line in output.splitlines():
                if "Version:" in line:
                    return line.split("Version:")[-1].strip()
        return "unknown"
    except Exception:
        return "unknown"

def self_update():
    try:
        latest_code = urlopen(REMOTE_RAW_URL).read().decode()
        latest_version_line = [line for line in latest_code.splitlines() if "VERSION =" in line][0]
        latest_version = latest_version_line.split("=")[1].strip().replace('"', '')

        if latest_version != VERSION:
            print(f"üîÑ New version available: {VERSION} ‚Üí {latest_version}")
            print("‚úÖ Updating scancompare...")
            with open(SCRIPT_PATH, "w") as f:
                f.write(latest_code)
            os.chmod(SCRIPT_PATH, 0o755)
            print("‚úÖ scancompare updated to latest version")
    except Exception:
        print("‚ö†Ô∏è Could not determine remote version.")

def run_scan(tool, image, output_file):
    try:
        if tool == "trivy":
            result = subprocess.run(
                ["trivy", "image", "--quiet", "--format", "json", "-o", str(output_file), image],
                capture_output=True, text=True
            )
        elif tool == "grype":
            result = subprocess.run(
                ["grype", image, "-o", "json", "-q"], capture_output=True, text=True
            )
            with open(output_file, "w") as f:
                f.write(result.stdout)
        return output_file.exists() and output_file.stat().st_size > 0
    except Exception as e:
        return False

def extract_cves(path, tool):
    try:
        with open(path) as f:
            data = json.load(f)
        if tool == "trivy":
            cves = {item["VulnerabilityID"] for result in data.get("Results", []) for item in result.get("Vulnerabilities", [])}
        elif tool == "grype":
            cves = {match["vulnerability"]["id"] for match in data.get("matches", [])}
        return cves
    except Exception:
        return set()

def severity_map_trivy(path):
    severity_dict = {}
    try:
        with open(path) as f:
            data = json.load(f)
        for result in data.get("Results", []):
            for vuln in result.get("Vulnerabilities", []):
                cve = vuln["VulnerabilityID"]
                sev = vuln.get("Severity", "UNKNOWN").capitalize()
                severity_dict[cve] = sev
    except Exception:
        pass
    return severity_dict

def severity_map_grype(path):
    severity_dict = {}
    try:
        with open(path) as f:
            data = json.load(f)
        for match in data.get("matches", []):
            cve = match["vulnerability"]["id"]
            sev = match["vulnerability"].get("severity", "UNKNOWN").capitalize()
            severity_dict[cve] = sev
    except Exception:
        pass
    return severity_dict

def print_cve_breakdown(shared, only_trivy, only_grype, trivy_sevs, grype_sevs):
    def group_by_severity(cves, sevs):
        grouped = {"Critical": [], "High": [], "Medium": [], "Low": [], "Negligible": [], "Unknown": []}
        for cve in cves:
            level = sevs.get(cve, "Unknown").capitalize()
            if level not in grouped:
                grouped["Unknown"].append(cve)
            else:
                grouped[level].append(cve)
        return grouped

    print("\nüîç CVEs by Severity\n")
    for label, cveset, sevmap in [
        ("Unique to Grype", only_grype, grype_sevs),
        ("Unique to Trivy", only_trivy, trivy_sevs),
        ("Shared CVEs", shared, trivy_sevs),
    ]:
        print(f"üî∏ {label}")
        grouped = group_by_severity(cveset, sevmap)
        for severity in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
            items = sorted(grouped[severity])
            if items:
                print(f"  {severity} ({len(items)}):")
                for cve in items:
                    print(f"    - {cve}")
        print()

def generate_html_report(image, trivy_json, grype_json, shared, only_trivy, only_grype):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d")
    filename = REPORTS_DIR / f"scan_report_{image.replace(':', '_')}_{timestamp}.html"
    trivy_data = json.load(open(trivy_json))
    grype_data = json.load(open(grype_json))

    trivy_sevs = severity_map_trivy(trivy_json)
    grype_sevs = severity_map_grype(grype_json)

    def generate_table(title, cves, sevmap):
        html = f"<h3 id='{title.lower().replace(' ', '_')}'>{title}</h3><ul>"
        grouped = {}
        for cve in cves:
            level = sevmap.get(cve, "Unknown").capitalize()
            grouped.setdefault(level, []).append(cve)
        for sev in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
            if sev in grouped:
                html += f"<li><strong>{sev}</strong><ul>"
                for cve in sorted(grouped[sev]):
                    html += f"<li><a href='https://nvd.nist.gov/vuln/detail/{cve}' target='_blank'>{cve}</a></li>"
                html += "</ul></li>"
        html += "</ul>"
        return html

    html = f"""
    <html>
    <head>
        <title>Scan Report for {image}</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; }}
            ul {{ list-style-type: none; }}
            h2, h3 {{ margin-top: 30px; }}
        </style>
    </head>
    <body>
        <h1>Scan Report: {image}</h1>
        <p><strong>Date:</strong> {timestamp}</p>
        <p><strong>Trivy version:</strong> {get_tool_version("trivy", "trivy")}</p>
        <p><strong>Grype version:</strong> {get_tool_version("grype", "grype")}</p>

        <h2>Summary</h2>
        <table border="1" cellpadding="5" cellspacing="0">
            <tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
            <tr><td>Grype</td><td>{len(only_grype | shared)}</td><td>{len(only_grype)}</td><td>{len(shared)}</td></tr>
            <tr><td>Trivy</td><td>{len(only_trivy | shared)}</td><td>{len(only_trivy)}</td><td>{len(shared)}</td></tr>
        </table>

        <h2>Navigation</h2>
        <ul>
            <li><a href="#unique_to_grype">Unique to Grype</a></li>
            <li><a href="#unique_to_trivy">Unique to Trivy</a></li>
            <li><a href="#shared_cves">Shared CVEs</a></li>
        </ul>

        {generate_table("Unique to Grype", only_grype, grype_sevs)}
        {generate_table("Unique to Trivy", only_trivy, trivy_sevs)}
        {generate_table("Shared CVEs", shared, trivy_sevs)}

        <details>
            <summary><strong>üìÇ Raw Trivy JSON</strong></summary>
            <pre>{json.dumps(trivy_data, indent=2)}</pre>
        </details>
        <details>
            <summary><strong>üìÇ Raw Grype JSON</strong></summary>
            <pre>{json.dumps(grype_data, indent=2)}</pre>
        </details>
    </body>
    </html>
    """
    filename.write_text(html)
    print(f"‚úÖ HTML report saved: {filename}")
    if input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").lower() == 'y':
        subprocess.run(["open", str(filename)])

def main():
    if len(sys.argv) != 2 or sys.argv[1] in ("--help", "-h"):
        print(f"Usage: {SCRIPT_NAME} <image-name>")
        sys.exit(1)

    self_update()

    image = sys.argv[1]
    trivy_path = REPORTS_DIR / "original_trivy.json"
    grype_path = REPORTS_DIR / "original_grype.json"

    print(f"\nüì¶ {SCRIPT_NAME} version {VERSION}")
    print("\nüîπ Scanning with Trivy...")
    print(f"   üì¶ Trivy version: {get_tool_version('trivy', 'trivy')}")
    trivy_success = run_scan("trivy", image, trivy_path)
    print(f"    ‚úî Trivy scan saved to {trivy_path}")

    print("\nüîπ Scanning with Grype...")
    print(f"   üì¶ Grype version: {get_tool_version('grype', 'grype')}")
    grype_success = run_scan("grype", image, grype_path)
    print(f"    ‚úî Grype scan saved to {grype_path}")

    if not trivy_success and not grype_success:
        print(f"\n‚ùå Unable to scan `{image}` ‚Äì image not found or unsupported.")
        print("üí° Please verify the image name and try again.")
        sys.exit(1)

    trivy_cves = extract_cves(trivy_path, "trivy")
    grype_cves = extract_cves(grype_path, "grype")

    shared = trivy_cves & grype_cves
    only_trivy = trivy_cves - grype_cves
    only_grype = grype_cves - trivy_cves

    print("\nüìä CLI Summary Report\n")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {len(grype_cves):<5} | {len(only_grype):<13} | {len(shared)}")
    print(f"Trivy      | {len(trivy_cves):<5} | {len(only_trivy):<13} | {len(shared)}")

    trivy_sevs = severity_map_trivy(trivy_path)
    grype_sevs = severity_map_grype(grype_path)
    print_cve_breakdown(shared, only_trivy, only_grype, trivy_sevs, grype_sevs)

    generate_html_report(image, trivy_path, grype_path, shared, only_trivy, only_grype)

if __name__ == "__main__":
    main()
