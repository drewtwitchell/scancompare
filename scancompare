#!/usr/bin/env python3
import subprocess
import json
import os
import sys
import shutil
from datetime import datetime
from pathlib import Path

VERSION = "1.5.2"
SCRIPT_NAME = "scancompare"
SCRIPT_PATH = Path.home() / ".local" / "bin" / SCRIPT_NAME
REMOTE_URL = f"https://raw.githubusercontent.com/drewtwitchell/scancompare/main/{SCRIPT_NAME}"
REPORT_DIR = "scan_reports"
TRIVY_JSON = f"{REPORT_DIR}/original_trivy.json"
GRYPE_JSON = f"{REPORT_DIR}/original_grype.json"

def print_header():
    print(f"\nüì¶ scancompare version {VERSION}")

def run_cmd(cmd):
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    return result.stdout.strip()

def get_tool_version(tool):
    try:
        if tool == "grype":
            output = run_cmd("grype version")
            for line in output.splitlines():
                if "Version:" in line:
                    return line.split("Version:")[-1].strip()
        elif tool == "trivy":
            output = run_cmd("trivy --version")
            for line in output.splitlines():
                if "Version:" in line:
                    return line.split("Version:")[-1].strip()
    except:
        return "unknown"
    return "unknown"

def update_tool(tool):
    if shutil.which("brew"):
        subprocess.run(f"brew upgrade {tool}", shell=True)
    else:
        print(f"üì¶ Updating {tool} without brew...")
        if tool == "trivy":
            url = "https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.60.0_macOS-64bit.tar.gz"
            subprocess.run(f"curl -sL {url} -o /tmp/trivy.tar.gz && tar -xzf /tmp/trivy.tar.gz -C /tmp && mv /tmp/trivy ~/.local/bin/trivy && chmod +x ~/.local/bin/trivy", shell=True)
        elif tool == "grype":
            url = "https://github.com/anchore/grype/releases/latest/download/grype_macos_arm64.tar.gz"
            subprocess.run(f"curl -sL {url} -o /tmp/grype.tar.gz && tar -xzf /tmp/grype.tar.gz -C /tmp && mv /tmp/grype ~/.local/bin/grype && chmod +x ~/.local/bin/grype", shell=True)

def ensure_tools():
    for tool in ["trivy", "grype", "jq"]:
        if not shutil.which(tool):
            update_tool(tool)

def check_for_tool_updates():
    for tool in ["trivy", "grype"]:
        current = get_tool_version(tool)
        if current == "unknown":
            continue
        update_tool(tool)

def auto_update():
    try:
        latest = run_cmd(f"curl -fsSL {REMOTE_URL} | grep VERSION | head -1").split("=")[-1].strip().replace('"','')
        if latest and latest != VERSION:
            print(f"\nüîÑ New version available: {latest} (current: {VERSION})")
            tmp = Path("/tmp/scancompare_latest")
            subprocess.run(f"curl -fsSL {REMOTE_URL} -o {tmp}", shell=True)
            tmp.chmod(0o755)
            shutil.copy(tmp, SCRIPT_PATH)
            print(f"‚úÖ scancompare updated to version {latest}")
            os.execv(SCRIPT_PATH, [str(SCRIPT_PATH)] + sys.argv[1:])
    except:
        print("‚ö†Ô∏è Could not determine remote version.")

def scan_with_trivy(image):
    print("\nüîπ Scanning with Trivy...")
    trivy_version = get_tool_version("trivy")
    print(f"   üì¶ Trivy version: {trivy_version}")
    subprocess.run(f"trivy image --scanners vuln --format json -o {TRIVY_JSON} {image}", shell=True)
    print(f"    ‚úî Trivy scan saved to {TRIVY_JSON}")
    return trivy_version

def scan_with_grype(image):
    print("\nüîπ Scanning with Grype...")
    grype_version = get_tool_version("grype")
    print(f"   üì¶ Grype version: {grype_version}")
    subprocess.run(f"grype {image} -o json > {GRYPE_JSON}", shell=True)
    print(f"    ‚úî Grype scan saved to {GRYPE_JSON}")
    return grype_version

def extract_cves(json_file, tool):
    cves = []
    with open(json_file) as f:
        data = json.load(f)
        if tool == "trivy":
            for result in data.get("Results", []):
                for vuln in result.get("Vulnerabilities", []):
                    cves.append({"id": vuln["VulnerabilityID"], "severity": vuln["Severity"]})
        else:
            for match in data.get("matches", []):
                vuln = match.get("vulnerability", {})
                cves.append({"id": vuln.get("id"), "severity": vuln.get("severity")})
    return cves

def group_by_severity(cves):
    grouped = {}
    for cve in cves:
        sev = cve["severity"].capitalize()
        grouped.setdefault(sev, []).append(cve["id"])
    return grouped

def print_cve_table(title, grouped):
    if not grouped: return
    print(f"\nüî∏ {title}")
    for severity in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
        if severity in grouped:
            print(f"  {severity} ({len(grouped[severity])}):")
            for cve in sorted(set(grouped[severity])):
                print(f"    - {cve}")

def generate_html(image, grype_ver, trivy_ver, summary, shared, only_trivy, only_grype):
    Path(REPORT_DIR).mkdir(exist_ok=True)
    timestamp = datetime.now().strftime("%Y-%m-%d")
    file_path = f"{REPORT_DIR}/scan_report_{image.replace('/', '_').replace(':','_')}_{timestamp}.html"
    with open(file_path, "w") as f:
        f.write(f"""<!DOCTYPE html><html><head><meta charset='utf-8'><title>Scan Report</title>
<style>body{{font-family:sans-serif;max-width:900px;margin:auto;padding:20px}}table{{border-collapse:collapse;width:100%}}td,th{{border:1px solid #ccc;padding:8px}}code{{background:#eee;padding:2px 4px;border-radius:4px}}</style>
<script>function toggle(id){{let el=document.getElementById(id);el.style.display=(el.style.display==='none')?'block':'none';}}</script></head><body>
<h1>Scan Report for <code>{image}</code></h1>
<p><strong>Date:</strong> {timestamp}</p>
<h2>Tool Versions</h2>
<ul><li>Trivy: {trivy_ver}</li><li>Grype: {grype_ver}</li></ul>
<h2>Summary</h2>
<table><tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
<tr><td>Grype</td><td>{summary['grype']}</td><td>{len(only_grype)}</td><td>{len(shared)}</td></tr>
<tr><td>Trivy</td><td>{summary['trivy']}</td><td>{len(only_trivy)}</td><td>{len(shared)}</td></tr>
</table>
<h2>CVEs by Severity</h2>""")

        def write_section(title, grouped):
            if not grouped: return
            f.write(f"<h3>{title}</h3><ul>")
            for severity in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
                if severity in grouped:
                    f.write(f"<li><strong>{severity} ({len(grouped[severity])})</strong><ul>")
                    for cve in sorted(set(grouped[severity])):
                        f.write(f"<li><a href='https://nvd.nist.gov/vuln/detail/{cve}' target='_blank'>{cve}</a></li>")
                    f.write("</ul></li>")
            f.write("</ul>")

        write_section("Unique to Grype", group_by_severity(only_grype))
        write_section("Unique to Trivy", group_by_severity(only_trivy))
        write_section("Shared CVEs", group_by_severity(shared))

        f.write("</body></html>")

    print(f"\n‚úÖ HTML report saved to {file_path}")
    if input("\nüìÅ Would you like to open the HTML report in your browser? (y/n): ").strip().lower() == "y":
        subprocess.run(f"open {file_path}" if sys.platform == "darwin" else f"xdg-open {file_path}", shell=True)

def main():
    if len(sys.argv) < 2:
        print("‚ùå Usage: scancompare <image>")
        return
    if sys.argv[1] == "--uninstall":
        os.remove(SCRIPT_PATH)
        print("‚úÖ scancompare uninstalled.")
        return
    if sys.argv[1] in ("--version", "-v"):
        print(f"{SCRIPT_NAME} version {VERSION}")
        return

    image = sys.argv[1]
    print_header()
    ensure_tools()
    auto_update()
    check_for_tool_updates()

    trivy_ver = scan_with_trivy(image)
    grype_ver = scan_with_grype(image)

    trivy_cves = extract_cves(TRIVY_JSON, "trivy")
    grype_cves = extract_cves(GRYPE_JSON, "grype")

    trivy_ids = {c["id"] for c in trivy_cves}
    grype_ids = {c["id"] for c in grype_cves}
    shared_ids = trivy_ids & grype_ids
    only_trivy = [c for c in trivy_cves if c["id"] not in grype_ids]
    only_grype = [c for c in grype_cves if c["id"] not in trivy_ids]
    shared = [c for c in trivy_cves + grype_cves if c["id"] in shared_ids]

    print("\nüìä CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {len(grype_cves):<5} | {len(only_grype):<13} | {len(shared)}")
    print(f"Trivy      | {len(trivy_cves):<5} | {len(only_trivy):<13} | {len(shared)}")

    print_cve_table("Unique to Grype", group_by_severity(only_grype))
    print_cve_table("Unique to Trivy", group_by_severity(only_trivy))
    print_cve_table("Shared CVEs", group_by_severity(shared))

    generate_html(image, grype_ver, trivy_ver,
                  {"grype": len(grype_cves), "trivy": len(trivy_cves)},
                  shared, only_trivy, only_grype)

if __name__ == "__main__":
    main()
