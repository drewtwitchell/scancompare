#!/usr/bin/env python3
import os
import subprocess
import sys
import json
import shutil
import platform
import datetime
import urllib.request
import re
from pathlib import Path
from collections import defaultdict

VERSION = "1.5.7"
SCRIPT_NAME = "scancompare"
SCRIPT_PATH = Path(__file__).resolve()
REMOTE_SCRIPT_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"
REPORTS_DIR = Path("scan_reports")
HTML_REPORT = ""
TOOL_VERSIONS = {"trivy": "unknown", "grype": "unknown"}

def get_tool_version(tool):
    try:
        output = subprocess.check_output([tool, "--version"], text=True)
        if tool == "trivy":
            match = re.search(r"Version:\s+([\d.]+)", output)
        elif tool == "grype":
            match = re.search(r"Grype\s+([\d.]+)", output) or re.search(r"Application:\s+grype\s+([\d.]+)", output)
        return match.group(1) if match else "unknown"
    except Exception:
        return "unknown"

def update_tool(tool):
    try:
        subprocess.run(["brew", "upgrade", tool], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except Exception:
        pass

def self_update():
    try:
        latest = urllib.request.urlopen(REMOTE_SCRIPT_URL).read().decode("utf-8")
        latest_version = re.search(r'VERSION\s*=\s*"([^"]+)"', latest).group(1)
        if latest_version != VERSION:
            print(f"\nüîÑ New version available: {VERSION} ‚Üí {latest_version}")
            print(f"‚úÖ Updating {SCRIPT_NAME}...")
            with open(SCRIPT_PATH, "w") as f:
                f.write(latest)
            os.chmod(SCRIPT_PATH, 0o755)
            print(f"‚úÖ {SCRIPT_NAME} updated to latest version\n")
            sys.exit(0)
    except Exception:
        print("‚ö†Ô∏è Could not determine remote version.\n")

def uninstall():
    print("üßπ Uninstalling scancompare...")
    os.remove(SCRIPT_PATH)
    print("‚úÖ Uninstalled successfully.")
    sys.exit(0)

def run_trivy(image):
    TOOL_VERSIONS["trivy"] = get_tool_version("trivy")
    out_file = REPORTS_DIR / "original_trivy.json"
    print(f"\nüîπ Scanning with Trivy...\n   üì¶ Trivy version: {TOOL_VERSIONS['trivy']}")
    subprocess.run(["trivy", "image", "--quiet", "--format", "json", "-o", str(out_file), image])
    print(f"    ‚úî Trivy scan saved to {out_file}")
    return out_file

def run_grype(image):
    TOOL_VERSIONS["grype"] = get_tool_version("grype")
    out_file = REPORTS_DIR / "original_grype.json"
    print(f"\nüîπ Scanning with Grype...\n   üì¶ Grype version: {TOOL_VERSIONS['grype']}")
    subprocess.run(["grype", image, "-o", "json", "-q"], stdout=open(out_file, "w"))
    print(f"    ‚úî Grype scan saved to {out_file}")
    return out_file

def extract_cves(filepath, tool):
    with open(filepath) as f:
        data = json.load(f)
    results = defaultdict(list)
    if tool == "trivy":
        for result in data.get("Results", []):
            for vuln in result.get("Vulnerabilities", []):
                results[vuln["Severity"].lower()].append(vuln["VulnerabilityID"])
    else:
        for match in data.get("matches", []):
            vuln = match["vulnerability"]
            results[vuln["severity"].lower()].append(vuln["id"])
    return results

def summarize_diffs(trivy, grype):
    all_cves = set()
    trivy_set = set()
    grype_set = set()

    for severity, cves in trivy.items():
        trivy_set.update(cves)
        all_cves.update(cves)
    for severity, cves in grype.items():
        grype_set.update(cves)
        all_cves.update(cves)

    shared = trivy_set & grype_set
    only_trivy = trivy_set - grype_set
    only_grype = grype_set - trivy_set

    summary = {
        "shared": shared,
        "only_trivy": only_trivy,
        "only_grype": only_grype
    }
    return summary

def print_summary(summary, trivy, grype):
    print("\nüìä CLI Summary Report\n")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {len(grype_set := set(c for s in grype.values() for c in s)):<5} | {len(summary['only_grype']):<13} | {len(summary['shared'])}")
    print(f"Trivy      | {len(trivy_set := set(c for s in trivy.values() for c in s)):<5} | {len(summary['only_trivy']):<13} | {len(summary['shared'])}")

    def print_group(name, cves):
        if not cves:
            print(f"\nüî∏ {name}\n  None")
            return
        grouped = defaultdict(list)
        for sev in ["critical", "high", "medium", "low", "negligible", "unknown"]:
            for cv in cves:
                if any(cv in group for group in (trivy.values(), grype.values())):
                    grouped[sev] += [cv for s, c in (trivy.items() if name == "Unique to Trivy" else grype.items()) if s == sev and cv in c]

        print(f"\nüî∏ {name}")
        for sev in ["critical", "high", "medium", "low", "negligible", "unknown"]:
            if grouped[sev]:
                print(f"  {sev.capitalize()} ({len(grouped[sev])}):")
                for cv in sorted(set(grouped[sev])):
                    print(f"    - {cv}")

    print_group("Unique to Grype", summary["only_grype"])
    print_group("Unique to Trivy", summary["only_trivy"])
    print_group("Shared CVEs", summary["shared"])

def generate_html(image, summary, trivy, grype):
    global HTML_REPORT
    REPORTS_DIR.mkdir(exist_ok=True)
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d")
    filename = f"scan_report_{image.replace(':', '_')}_{timestamp}.html"
    HTML_REPORT = REPORTS_DIR / filename

    with open(HTML_REPORT, "w") as f:
        f.write(f"""<!DOCTYPE html>
<html><head><meta charset="utf-8"><title>scancompare Report</title>
<style>body{{font-family:sans-serif}} pre{{background:#eee;padding:1em}} .sev{{margin-bottom:1em}} .toc a{{margin-right:1em}} </style>
</head><body>
<h1>scancompare Report</h1>
<p><strong>Image:</strong> {image}</p>
<p><strong>Date:</strong> {timestamp}</p>
<p><strong>Trivy Version:</strong> {TOOL_VERSIONS['trivy']}</p>
<p><strong>Grype Version:</strong> {TOOL_VERSIONS['grype']}</p>
<div class="toc"><strong>Jump to:</strong>
<a href="#summary">Summary</a><a href="#unique-grype">Unique to Grype</a>
<a href="#unique-trivy">Unique to Trivy</a><a href="#shared">Shared</a>
</div>
<h2 id="summary">Summary</h2>
<pre>Tool       | Total | Only in Tool | Shared
-----------|-------|---------------|--------
Grype      | {len(set(c for s in grype.values() for c in s)):<5} | {len(summary['only_grype']):<13} | {len(summary['shared'])}
Trivy      | {len(set(c for s in trivy.values() for c in s)):<5} | {len(summary['only_trivy']):<13} | {len(summary['shared'])}</pre>
""")
        def html_group(name, cves, anchor):
            grouped = defaultdict(list)
            for sev in ["critical", "high", "medium", "low", "negligible", "unknown"]:
                for cv in cves:
                    if any(cv in group for group in (trivy.values(), grype.values())):
                        grouped[sev] += [cv for s, c in (trivy.items() if name == "Unique to Trivy" else grype.items()) if s == sev and cv in c]

            f.write(f"<h2 id='{anchor}'>{name}</h2>")
            for sev in ["critical", "high", "medium", "low", "negligible", "unknown"]:
                if grouped[sev]:
                    f.write(f"<div class='sev'><strong>{sev.capitalize()} ({len(grouped[sev])}):</strong><ul>")
                    for cv in sorted(set(grouped[sev])):
                        f.write(f"<li><a href='https://nvd.nist.gov/vuln/detail/{cv}' target='_blank'>{cv}</a></li>")
                    f.write("</ul></div>")

        html_group("Unique to Grype", summary["only_grype"], "unique-grype")
        html_group("Unique to Trivy", summary["only_trivy"], "unique-trivy")
        html_group("Shared CVEs", summary["shared"], "shared")

        f.write("<h2>Raw JSON (click to expand)</h2><details><summary>Click to expand</summary><pre>")
        try:
            with open(REPORTS_DIR / "original_diff.json") as diff:
                f.write(json.dumps(json.load(diff), indent=2))
        except Exception:
            f.write("N/A")
        f.write("</pre></details></body></html>")

    print(f"\n‚úÖ HTML report saved: {HTML_REPORT}")
    if input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").lower() == "y":
        import webbrowser
        webbrowser.open(f"file://{HTML_REPORT.resolve()}")

def main():
    if len(sys.argv) == 2 and sys.argv[1] in ("--uninstall", "uninstall"):
        uninstall()
    if len(sys.argv) == 2 and sys.argv[1] in ("--version", "-v"):
        print(f"üì¶ scancompare version {VERSION}")
        return

    if len(sys.argv) != 2:
        print("Usage: scancompare <image>")
        sys.exit(1)

    self_update()
    update_tool("trivy")
    update_tool("grype")

    image = sys.argv[1]
    REPORTS_DIR.mkdir(exist_ok=True)
    trivy_path = run_trivy(image)
    grype_path = run_grype(image)

    trivy_data = extract_cves(trivy_path, "trivy")
    grype_data = extract_cves(grype_path, "grype")
    summary = summarize_diffs(trivy_data, grype_data)
    print_summary(summary, trivy_data, grype_data)
    generate_html(image, summary, trivy_data, grype_data)

if __name__ == "__main__":
    main()
