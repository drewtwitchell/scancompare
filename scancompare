#!/usr/bin/env python3
import os
import sys
import subprocess
import json
import shutil
from datetime import datetime
import tempfile
import webbrowser

VERSION = "1.4.2"
REPO_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"
INSTALL_PATH = os.path.expanduser("~/.local/bin/scancompare")
REPORT_DIR = "scan_reports"
TIMESTAMP = datetime.now().strftime("%Y-%m-%d")

def run_cmd(cmd):
    result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    return result.stdout.strip()

def get_tool_version(tool):
    try:
        if tool == "trivy":
            return run_cmd("trivy --version").splitlines()[0]
        elif tool == "grype":
            return run_cmd("grype version").splitlines()[0]
    except:
        return "Unknown"

def auto_update():
    try:
        remote_script = run_cmd(f"curl -fsSL {REPO_URL}")
        if f'VERSION = "{VERSION}"' not in remote_script:
            print(f"üîÑ New version available (current: {VERSION})")
            with tempfile.NamedTemporaryFile("w", delete=False) as tmp:
                tmp.write(remote_script)
                tmp_path = tmp.name
            os.chmod(tmp_path, 0o755)
            shutil.copy(tmp_path, INSTALL_PATH)
            print(f"‚úÖ scancompare updated to latest version")
            os.execv(INSTALL_PATH, [INSTALL_PATH] + sys.argv[1:])
    except Exception as e:
        print(f"‚ö†Ô∏è Auto-update failed: {e}")

def uninstall():
    print("üîß Uninstalling scancompare...")
    try:
        os.remove(INSTALL_PATH)
        print("‚úÖ scancompare has been removed.")
    except FileNotFoundError:
        print("‚ùå scancompare not found.")

def scan_image(image):
    os.makedirs(REPORT_DIR, exist_ok=True)
    trivy_out = os.path.join(REPORT_DIR, "original_trivy.json")
    grype_out = os.path.join(REPORT_DIR, "original_grype.json")

    print("\nüîπ Scanning with Trivy...")
    run_cmd(f"trivy image --scanners vuln --format json -o {trivy_out} {image}")
    print(f"    ‚úî Trivy scan saved to {trivy_out}")

    print("\nüîπ Scanning with Grype...")
    run_cmd(f"grype {image} -o json > {grype_out}")
    print(f"    ‚úî Grype scan saved to {grype_out}")
    return trivy_out, grype_out

def extract_vulns(json_file, tool):
    with open(json_file) as f:
        data = json.load(f)

    results = []
    if tool == "trivy":
        for result in data.get("Results", []):
            for vuln in result.get("Vulnerabilities", []):
                results.append((vuln["VulnerabilityID"], vuln.get("Severity", "Unknown")))
    elif tool == "grype":
        for match in data.get("matches", []):
            vuln = match.get("vulnerability", {})
            results.append((vuln.get("id"), vuln.get("severity", "Unknown")))
    return results

def group_by_severity(vulns):
    grouped = {}
    for cve, severity in vulns:
        severity = severity.capitalize()
        grouped.setdefault(severity, []).append(cve)
    return grouped

def generate_diff_report(trivy_vulns, grype_vulns):
    trivy_set = set([v[0] for v in trivy_vulns])
    grype_set = set([v[0] for v in grype_vulns])
    shared = trivy_set & grype_set
    only_trivy = trivy_set - grype_set
    only_grype = grype_set - trivy_set

    def filter_group(vulns, filter_set):
        return group_by_severity([v for v in vulns if v[0] in filter_set])

    return {
        "shared": filter_group(trivy_vulns + grype_vulns, shared),
        "trivy": filter_group(trivy_vulns, only_trivy),
        "grype": filter_group(grype_vulns, only_grype)
    }

def print_report(image, trivy_vulns, grype_vulns, grouped):
    print(f"\nüìä CLI Summary Report")
    print(f"Tool       | Total | Only in Tool | Shared")
    print(f"-----------|-------|---------------|--------")
    print(f"Grype      | {len(grype_vulns):<5} | {sum(len(v) for v in grouped['grype'].values()):<13} | {sum(len(v) for v in grouped['shared'].values())}")
    print(f"Trivy      | {len(trivy_vulns):<5} | {sum(len(v) for v in grouped['trivy'].values()):<13} | {sum(len(v) for v in grouped['shared'].values())}")
    print("\nüîç CVEs by Severity\n")

    for section in ["grype", "trivy", "shared"]:
        label = {
            "grype": "üî∏ Unique to Grype",
            "trivy": "üî∏ Unique to Trivy",
            "shared": "üî∏ Shared CVEs"
        }[section]
        print(label)
        for severity in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
            vulns = grouped[section].get(severity, [])
            if vulns:
                print(f"  {severity} ({len(vulns)}):")
                for cve in sorted(set(vulns)):
                    print(f"    - {cve}")
        print()

def generate_html_report(image, grouped, trivy_version, grype_version):
    filename = f"{REPORT_DIR}/scan_report_{image.replace(':', '_')}_{TIMESTAMP}.html"
    with open(filename, "w") as f:
        f.write(f"""<!DOCTYPE html><html><head><meta charset="utf-8">
<title>Scan Report</title>
<style>
body {{ font-family: Arial, sans-serif; padding: 20px; }}
h2 {{ margin-top: 2em; }}
table {{ border-collapse: collapse; width: 100%; }}
th, td {{ border: 1px solid #ccc; padding: 8px; text-align: left; }}
.toggle {{ cursor: pointer; color: blue; text-decoration: underline; }}
.hidden {{ display: none; }}
</style>
<script>
function toggle(id) {{
  var e = document.getElementById(id);
  e.className = e.className === "hidden" ? "" : "hidden";
}}
</script>
</head><body>
<h1>Vulnerability Report for <code>{image}</code></h1>
<p><strong>Date:</strong> {TIMESTAMP}</p>
<p><strong>Grype:</strong> {grype_version} | <strong>Trivy:</strong> {trivy_version}</p>
""")

        for section in ["grype", "trivy", "shared"]:
            label = {
                "grype": "Unique to Grype",
                "trivy": "Unique to Trivy",
                "shared": "Shared CVEs"
            }[section]
            f.write(f"<h2>{label}</h2>\n")
            for severity in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
                vulns = grouped[section].get(severity, [])
                if vulns:
                    f.write(f"<h3>{severity} ({len(vulns)})</h3><ul>")
                    for cve in sorted(set(vulns)):
                        f.write(f"<li><a href='https://nvd.nist.gov/vuln/detail/{cve}' target='_blank'>{cve}</a></li>")
                    f.write("</ul>\n")

        f.write(f"""
<h2 class="toggle" onclick="toggle('raw')">Toggle Raw JSON</h2>
<pre id="raw" class="hidden">{json.dumps(grouped, indent=2)}</pre>
</body></html>""")
    print(f"‚úÖ HTML report saved: {filename}")
    return filename

def main():
    if len(sys.argv) == 2:
        if sys.argv[1] in ("--version", "-v"):
            print(f"scancompare version {VERSION}")
            return
        elif sys.argv[1] in ("--uninstall", "uninstall"):
            uninstall()
            return

    if len(sys.argv) != 2:
        print("‚ùå Usage: scancompare <image>")
        return

    image = sys.argv[1]
    auto_update()

    trivy_ver = get_tool_version("trivy")
    grype_ver = get_tool_version("grype")

    trivy_out, grype_out = scan_image(image)
    trivy_vulns = extract_vulns(trivy_out, "trivy")
    grype_vulns = extract_vulns(grype_out, "grype")
    grouped = generate_diff_report(trivy_vulns, grype_vulns)

    print_report(image, trivy_vulns, grype_vulns, grouped)
    html_file = generate_html_report(image, grouped, trivy_ver, grype_ver)

    choice = input("\nüìÅ Would you like to open the HTML report in your browser? (y/n): ").strip().lower()
    if choice == "y":
        webbrowser.open(f"file://{os.path.abspath(html_file)}")

if __name__ == "__main__":
    main()
