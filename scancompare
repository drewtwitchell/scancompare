#!/usr/bin/env python3

import json
import os
import subprocess
import sys
import shutil
from datetime import datetime
from pathlib import Path

VERSION = "1.4.9"
SCRIPT_NAME = "scancompare"
REPO_USER = "drewtwitchell"
REPO_NAME = "scancompare"
REPO_URL = f"https://raw.githubusercontent.com/{REPO_USER}/{REPO_NAME}/main/{SCRIPT_NAME}"
INSTALL_PATH = str(Path.home() / ".local/bin" / SCRIPT_NAME)

REPORT_DIR = Path("scan_reports")
REPORT_DIR.mkdir(exist_ok=True)
TIMESTAMP = datetime.now().strftime("%Y-%m-%d")
TRIVY_JSON = REPORT_DIR / "original_trivy.json"
GRYPE_JSON = REPORT_DIR / "original_grype.json"
DIFF_JSON = REPORT_DIR / "original_diff.json"

def run_command(command, capture_output=True):
    return subprocess.run(command, shell=True, check=True, capture_output=capture_output, text=True).stdout.strip()

def get_tool_version(tool):
    try:
        out = run_command(f"{tool} version")
        if tool == "grype":
            for line in out.splitlines():
                if line.lower().startswith("application:"):
                    return line.split(":")[1].strip()
        elif tool == "trivy":
            for line in out.splitlines():
                if "Version:" in line:
                    return line.split(":")[1].strip()
    except:
        return "unknown"
    return "unknown"

def self_update():
    try:
        remote_script = run_command(f"curl -fsSL {REPO_URL}")
        for line in remote_script.splitlines():
            if line.strip().startswith("VERSION="):
                latest = line.strip().split("=")[1].strip('"')
                break
        else:
            print("‚ö†Ô∏è Could not determine remote version.")
            return
    except Exception as e:
        print(f"‚ö†Ô∏è Update check failed: {e}")
        return

    if latest != VERSION:
        print(f"üîÑ New version available: {latest} (current: {VERSION})")
        try:
            with open(INSTALL_PATH, "w") as f:
                f.write(remote_script)
            os.chmod(INSTALL_PATH, 0o755)
            print(f"‚úÖ scancompare updated to version {latest}")
            os.execv(INSTALL_PATH, [INSTALL_PATH] + sys.argv[1:])
        except Exception as e:
            print(f"‚ùå Failed to self-update: {e}")

def uninstall():
    print("üßπ Uninstalling scancompare...")
    try:
        os.remove(INSTALL_PATH)
        print("‚úÖ scancompare uninstalled.")
    except Exception as e:
        print(f"‚ùå Failed to uninstall: {e}")
    sys.exit(0)

def extract_cves(file_path, source):
    with open(file_path) as f:
        data = json.load(f)
    cves = []
    if source == "trivy":
        for result in data.get("Results", []):
            for vuln in result.get("Vulnerabilities", []):
                cves.append({
                    "id": vuln["VulnerabilityID"],
                    "severity": vuln["Severity"].lower()
                })
    elif source == "grype":
        for match in data.get("matches", []):
            vuln = match.get("vulnerability", {})
            cves.append({
                "id": vuln.get("id"),
                "severity": vuln.get("severity", "").lower()
            })
    return cves

def group_cves(cves):
    grouped = {}
    for cve in cves:
        severity = cve["severity"]
        grouped.setdefault(severity, []).append(cve["id"])
    return grouped

def compare_cves(trivy, grype):
    trivy_ids = set(v["id"] for v in trivy)
    grype_ids = set(v["id"] for v in grype)

    shared = trivy_ids & grype_ids
    only_trivy = trivy_ids - grype_ids
    only_grype = grype_ids - trivy_ids

    def filter_by(ids, data):
        return [v for v in data if v["id"] in ids]

    return {
        "shared": group_cves(filter_by(shared, trivy)),
        "only_trivy": group_cves(filter_by(only_trivy, trivy)),
        "only_grype": group_cves(filter_by(only_grype, grype)),
        "summary": {
            "total_trivy": len(trivy_ids),
            "total_grype": len(grype_ids),
            "shared": len(shared),
            "only_in_trivy": len(only_trivy),
            "only_in_grype": len(only_grype)
        }
    }

def print_cve_section(title, grouped):
    print(f"\nüî∏ {title}")
    for level in ["critical", "high", "medium", "low", "negligible", "unknown"]:
        if level in grouped:
            print(f"  {level.capitalize()} ({len(grouped[level])}):")
            for cve in sorted(set(grouped[level])):
                print(f"    - {cve}")

def generate_html_report(target, result, trivy_version, grype_version):
    html_file = REPORT_DIR / f"scan_report_{target.replace(':', '_')}_{TIMESTAMP}.html"
    with open(html_file, "w") as f:
        f.write(f"""<!DOCTYPE html>
<html><head><meta charset="UTF-8">
<title>Scan Report - {target}</title>
<style>
body {{ font-family: sans-serif; padding: 20px; }}
h2 {{ border-bottom: 1px solid #ccc; }}
pre {{ background: #f8f8f8; padding: 10px; border-radius: 6px; }}
table {{ border-collapse: collapse; width: 100%; }}
th, td {{ border: 1px solid #ccc; padding: 8px; text-align: left; }}
a {{ text-decoration: none; color: #3498db; }}
button {{ margin-top: 20px; padding: 8px 12px; }}
</style>
<script>
function toggle(id) {{
  var el = document.getElementById(id);
  el.style.display = el.style.display === 'none' ? 'block' : 'none';
}}
function savePDF() {{
  window.print();
}}
</script>
</head><body>
<h1>scancompare Report for <code>{target}</code></h1>
<p><strong>Date:</strong> {TIMESTAMP}</p>
<p><strong>Trivy Version:</strong> {trivy_version} | <strong>Grype Version:</strong> {grype_version}</p>
<button onclick="savePDF()">üìÑ Export to PDF</button>
<table>
<tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
<tr><td>Trivy</td><td>{result['summary']['total_trivy']}</td><td>{result['summary']['only_in_trivy']}</td><td>{result['summary']['shared']}</td></tr>
<tr><td>Grype</td><td>{result['summary']['total_grype']}</td><td>{result['summary']['only_in_grype']}</td><td>{result['summary']['shared']}</td></tr>
</table>
""")

        for key, label in [("only_grype", "Unique to Grype"), ("only_trivy", "Unique to Trivy"), ("shared", "Shared CVEs")]:
            f.write(f"<h2>{label}</h2>")
            section = result.get(key, {})
            for sev in ["critical", "high", "medium", "low", "negligible", "unknown"]:
                items = section.get(sev, [])
                if items:
                    f.write(f"<h3>{sev.capitalize()} ({len(items)})</h3><ul>")
                    for cve in sorted(set(items)):
                        link = f"https://nvd.nist.gov/vuln/detail/{cve}"
                        f.write(f"<li><a href='{link}' target='_blank'>{cve}</a></li>")
                    f.write("</ul>")

        f.write("<button onclick=\"toggle('raw')\">Toggle Raw JSON</button>")
        f.write(f"<pre id='raw' style='display:none'>{json.dumps(result, indent=2)}</pre>")
        f.write("</body></html>")
    print(f"\n‚úÖ HTML report saved to {html_file}")

def main():
    if len(sys.argv) < 2:
        print("‚ùå Usage: scancompare <image> or scancompare --uninstall or scancompare --version")
        return

    if sys.argv[1] in ("--version", "-v"):
        print(f"{SCRIPT_NAME} version {VERSION}")
        return

    if sys.argv[1] == "--uninstall":
        uninstall()

    self_update()

    target = sys.argv[1]
    print(f"\nüì¶ scancompare version {VERSION}")
    print(f"üîπ Scanning with Trivy...")

    try:
        run_command(f"trivy image --scanners vuln --format json -o {TRIVY_JSON} {target}")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è Trivy scan failed. Continuing...")

    trivy_version = get_tool_version("trivy")
    print(f"   üì¶ Trivy version: {trivy_version}")

    print(f"\nüîπ Scanning with Grype...")
    try:
        run_command(f"grype {target} -o json > {GRYPE_JSON}")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è Grype scan failed. Continuing...")

    grype_version = get_tool_version("grype")
    print(f"   üì¶ Grype version: {grype_version}")

    trivy_cves = extract_cves(TRIVY_JSON, "trivy")
    grype_cves = extract_cves(GRYPE_JSON, "grype")
    result = compare_cves(trivy_cves, grype_cves)

    print("\nüîß Tool Versions:")
    print(f"  Trivy: {trivy_version}")
    print(f"  Grype: {grype_version}")

    print("\nüìä CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {result['summary']['total_grype']}   | {result['summary']['only_in_grype']}             | {result['summary']['shared']}")
    print(f"Trivy      | {result['summary']['total_trivy']}   | {result['summary']['only_in_trivy']}             | {result['summary']['shared']}")

    print("\nüîç CVEs by Severity")
    print_cve_section("Unique to Grype", result["only_grype"])
    print_cve_section("Unique to Trivy", result["only_trivy"])
    print_cve_section("Shared CVEs", result["shared"])

    generate_html_report(target, result, trivy_version, grype_version)

    open_prompt = input("\nüìÅ Would you like to open the HTML report in your browser? (y/n): ").strip().lower()
    if open_prompt == "y":
        if sys.platform == "darwin":
            run_command(f"open {REPORT_DIR}/scan_report_{target.replace(':', '_')}_{TIMESTAMP}.html", capture_output=False)
        else:
            run_command(f"xdg-open {REPORT_DIR}/scan_report_{target.replace(':', '_')}_{TIMESTAMP}.html", capture_output=False)

if __name__ == "__main__":
    main()
