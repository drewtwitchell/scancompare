#!/usr/bin/env python3
import os
import subprocess
import sys
import json
import datetime
import shutil
import platform
import webbrowser
from pathlib import Path

VERSION = "1.5.6"
SCRIPT_NAME = "scancompare"
REPO_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"

def get_latest_version():
    try:
        output = subprocess.check_output(["curl", "-fsSL", REPO_URL], text=True)
        for line in output.splitlines():
            if line.strip().startswith("VERSION"):
                return line.split("=")[1].strip().replace('"', '')
    except:
        return None

def self_update():
    latest = get_latest_version()
    if not latest:
        print("‚ö†Ô∏è Could not determine remote version.")
        return
    if latest != VERSION:
        print(f"\nüì¶ {SCRIPT_NAME} version {VERSION}")
        print(f"üîÑ New version available: {VERSION} ‚Üí {latest}")
        print("‚úÖ Updating scancompare...")
        try:
            new_script = subprocess.check_output(["curl", "-fsSL", REPO_URL], text=True)
            script_path = shutil.which(SCRIPT_NAME)
            with open(script_path, "w") as f:
                f.write(new_script)
            os.chmod(script_path, 0o755)
            print(f"‚úÖ {SCRIPT_NAME} updated to version {latest}")
        except Exception as e:
            print(f"‚ùå Update failed: {e}")

def run_command(cmd):
    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    return result.stdout.strip()

def install_or_upgrade_tool(tool, check_cmd, install_cmds):
    try:
        subprocess.run(check_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
    except:
        print(f"üì¶ Installing {tool}...")
        for cmd in install_cmds:
            try:
                subprocess.run(cmd, check=True)
                return
            except:
                continue

def get_tool_version(cmd, label):
    try:
        output = subprocess.check_output(cmd, text=True)
        for line in output.splitlines():
            if "Version" in line or "version" in line:
                return line.split(":")[-1].strip()
    except:
        return "unknown"

def scan_with_trivy(image, output_path):
    print(f"\nüîπ Scanning with Trivy...")
    trivy_version = get_tool_version(["trivy", "--version"], "Trivy")
    print(f"   üì¶ Trivy version: {trivy_version}")
    subprocess.run(["trivy", "image", "-q", "-f", "json", "-o", output_path, image])
    print(f"    ‚úî Trivy scan saved to {output_path}")
    return trivy_version

def scan_with_grype(image, output_path):
    print(f"\nüîπ Scanning with Grype...")
    grype_version = get_tool_version(["grype", "--version"], "Grype")
    print(f"   üì¶ Grype version: {grype_version}")
    subprocess.run(["grype", image, "-q", "-o", "json", "-f", "json", "--file", output_path])
    print(f"    ‚úî Grype scan saved to {output_path}")
    return grype_version

def extract_cves(filepath):
    with open(filepath) as f:
        data = json.load(f)
    cves = set()
    for result in data.get("Results", []):
        for vuln in result.get("Vulnerabilities", []):
            cves.add(vuln["VulnerabilityID"])
    return cves

def extract_grype_cves(filepath):
    with open(filepath) as f:
        data = json.load(f)
    cves = set()
    for match in data.get("matches", []):
        vuln = match.get("vulnerability", {})
        cves.add(vuln.get("id", ""))
    return cves

def cves_by_severity(cve_list, source, raw_data):
    mapping = {}
    for cve in cve_list:
        sev = "Unknown"
        for item in raw_data:
            if "Vulnerabilities" in item:
                for v in item["Vulnerabilities"]:
                    if v["VulnerabilityID"] == cve:
                        sev = v.get("Severity", "Unknown")
            elif "vulnerability" in item:
                if item["vulnerability"]["id"] == cve:
                    sev = item["vulnerability"].get("severity", "Unknown")
        mapping.setdefault(sev.capitalize(), []).append(cve)
    return mapping

def print_grouped_cves(title, cves, data, sort=True):
    print(f"\nüî∏ {title}")
    severity_map = cves_by_severity(cves, title, data)
    for sev in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
        if sev in severity_map:
            print(f"  {sev} ({len(severity_map[sev])}):")
            for cve in sorted(severity_map[sev]) if sort else severity_map[sev]:
                print(f"    - {cve}")

def generate_html_report(trivy_data, grype_data, shared, unique_trivy, unique_grype, image, trivy_version, grype_version):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d")
    report_path = f"scan_reports/scan_report_{image.replace(':', '_')}_{timestamp}.html"
    os.makedirs("scan_reports", exist_ok=True)
    with open(report_path, "w") as f:
        f.write(f"""<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Scan Report for {image}</title>
  <style>
    body {{ font-family: Arial; padding: 20px; }}
    h2 {{ border-bottom: 1px solid #ccc; }}
    ul {{ padding-left: 20px; }}
    .toc a {{ display: block; margin-bottom: 5px; }}
    .collapsible {{ background-color: #eee; cursor: pointer; padding: 10px; width: 100%; border: none; text-align: left; }}
    .content {{ display: none; padding: 10px; border: 1px solid #ccc; }}
  </style>
</head>
<body>
<h1>Scan Report for {image}</h1>
<p><strong>Trivy Version:</strong> {trivy_version} | <strong>Grype Version:</strong> {grype_version}</p>
<div class="toc">
  <h2>Table of Contents</h2>
  <a href="#summary">Summary</a>
  <a href="#trivy">Trivy Unique CVEs</a>
  <a href="#grype">Grype Unique CVEs</a>
  <a href="#shared">Shared CVEs</a>
  <a href="#raw">Raw JSON Output</a>
</div>
<h2 id="summary">Summary</h2>
<ul>
  <li>Trivy: {len(trivy_data)}</li>
  <li>Grype: {len(grype_data)}</li>
  <li>Shared: {len(shared)}</li>
</ul>
<h2 id="trivy">Unique to Trivy</h2>
<ul>{"".join(f'<li><a href="https://nvd.nist.gov/vuln/detail/{c}">{c}</a></li>' for c in unique_trivy)}</ul>
<h2 id="grype">Unique to Grype</h2>
<ul>{"".join(f'<li><a href="https://nvd.nist.gov/vuln/detail/{c}">{c}</a></li>' for c in unique_grype)}</ul>
<h2 id="shared">Shared CVEs</h2>
<ul>{"".join(f'<li><a href="https://nvd.nist.gov/vuln/detail/{c}">{c}</a></li>' for c in shared)}</ul>
<h2 id="raw">Raw JSON Output</h2>
<button class="collapsible">Show Raw JSON</button>
<div class="content"><pre>{{
"trivy": {json.dumps(trivy_data, indent=2)},
"grype": {json.dumps(grype_data, indent=2)}
}}</pre></div>
<script>
document.querySelector(".collapsible").onclick = function() {{
  this.classList.toggle("active");
  var content = this.nextElementSibling;
  content.style.display = content.style.display === "block" ? "none" : "block";
}};
</script>
</body></html>""")
    print(f"\n‚úÖ HTML report saved: {report_path}")
    if input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").lower() == 'y':
        webbrowser.open(f"file://{os.path.realpath(report_path)}")

def main():
    if len(sys.argv) != 2 or sys.argv[1] in ["--help", "-h"]:
        print("Usage: scancompare <image_name>")
        return
    if sys.argv[1] in ["--uninstall", "uninstall"]:
        path = shutil.which(SCRIPT_NAME)
        if path:
            os.remove(path)
            print(f"‚úÖ {SCRIPT_NAME} uninstalled.")
        return
    if sys.argv[1] in ["--version", "-v"]:
        print(f"{SCRIPT_NAME} version {VERSION}")
        return

    self_update()

    image = sys.argv[1]
    os.makedirs("scan_reports", exist_ok=True)
    trivy_path = f"scan_reports/original_trivy.json"
    grype_path = f"scan_reports/original_grype.json"

    install_or_upgrade_tool("trivy", ["trivy", "--version"], [["brew", "install", "aquasecurity/trivy/trivy"]])
    install_or_upgrade_tool("grype", ["grype", "--version"], [["brew", "install", "anchore/grype/grype"]])

    trivy_version = scan_with_trivy(image, trivy_path)
    grype_version = scan_with_grype(image, grype_path)

    trivy_data = extract_cves(trivy_path)
    grype_data = extract_grype_cves(grype_path)

    shared = trivy_data & grype_data
    unique_trivy = trivy_data - grype_data
    unique_grype = grype_data - trivy_data

    print("\nüìä CLI Summary Report")
    print(f"{'Tool':<10} | {'Total':<5} | {'Only in Tool':<13} | Shared")
    print("-" * 43)
    print(f"{'Grype':<10} | {len(grype_data):<5} | {len(unique_grype):<13} | {len(shared)}")
    print(f"{'Trivy':<10} | {len(trivy_data):<5} | {len(unique_trivy):<13} | {len(shared)}")

    print_grouped_cves("Unique to Grype", unique_grype, json.load(open(grype_path)))
    print_grouped_cves("Unique to Trivy", unique_trivy, json.load(open(trivy_path)))
    print_grouped_cves("Shared CVEs", shared, json.load(open(trivy_path)))

    generate_html_report(trivy_data, grype_data, shared, unique_trivy, unique_grype, image, trivy_version, grype_version)

if __name__ == "__main__":
    main()
