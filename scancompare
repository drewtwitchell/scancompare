#!/usr/bin/env python3
import subprocess
import sys
import os
import json
import shutil
import datetime

VERSION = "1.4.7"
REPO_RAW_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"
INSTALL_PATH = os.path.expanduser("~/.local/bin/scancompare")
REPORT_DIR = "scan_reports"

def get_tool_version(tool):
    try:
        if tool == "trivy":
            result = subprocess.run(["trivy", "--version"], capture_output=True, text=True)
            for line in result.stdout.splitlines():
                if "Version:" in line:
                    return line.split("Version:")[-1].strip()
        elif tool == "grype":
            result = subprocess.run(["grype", "--version"], capture_output=True, text=True)
            return result.stdout.split()[2]  # e.g., grype version 0.70.0
    except Exception:
        pass
    return "unknown"

def check_for_updates():
    try:
        remote_code = subprocess.run(
            ["curl", "-fsSL", REPO_RAW_URL],
            capture_output=True, text=True, check=True
        ).stdout
        for line in remote_code.splitlines():
            if line.startswith("VERSION ="):
                remote_version = line.split("=")[-1].strip().replace('"', '')
                if remote_version != VERSION:
                    print(f"üîÑ New version available: {remote_version} (current: {VERSION})")
                    print("‚úÖ scancompare updated to version", remote_version)
                    with open(INSTALL_PATH, "w") as f:
                        f.write(remote_code)
                    os.chmod(INSTALL_PATH, 0o755)
                    os.execv(INSTALL_PATH, [INSTALL_PATH] + sys.argv[1:])
    except Exception as e:
        print("‚ö†Ô∏è Auto-update check failed:", e)

def uninstall():
    print("üö´ Uninstalling scancompare...")
    try:
        os.remove(INSTALL_PATH)
        print("‚úÖ Uninstalled successfully.")
    except Exception as e:
        print("‚ùå Failed to uninstall:", e)
    sys.exit(0)

def ensure_dirs():
    os.makedirs(REPORT_DIR, exist_ok=True)

def run_trivy(image, output_path):
    print("üîπ Scanning with Trivy...")
    trivy_version = get_tool_version("trivy")
    try:
        subprocess.run(
            ["trivy", "image", "--scanners", "vuln", "--format", "json", "--output", output_path, image],
            check=True
        )
    except Exception as e:
        print("‚ùå Trivy scan failed:", e)
    print("   üì¶ Trivy version:", trivy_version)
    return trivy_version

def run_grype(image, output_path):
    print("üîπ Scanning with Grype...")
    grype_version = get_tool_version("grype")
    try:
        subprocess.run(["grype", image, "-o", "json"], stdout=open(output_path, "w"), check=True)
    except Exception as e:
        print("‚ùå Grype scan failed:", e)
    print("   üì¶ Grype version:", grype_version)
    return grype_version

def extract_cves_trivy(path):
    with open(path) as f:
        data = json.load(f)
    vulns = []
    for result in data.get("Results", []):
        for v in result.get("Vulnerabilities", []):
            vulns.append({"id": v["VulnerabilityID"], "severity": v["Severity"]})
    return vulns

def extract_cves_grype(path):
    with open(path) as f:
        data = json.load(f)
    return [{"id": m["vulnerability"]["id"], "severity": m["vulnerability"]["severity"]} for m in data.get("matches", [])]

def group_by_severity(cves):
    sev_order = ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]
    grouped = {sev: [] for sev in sev_order}
    for cve in cves:
        grouped.setdefault(cve["severity"], []).append(cve["id"])
    return grouped

def print_severity_section(title, grouped):
    print(f"\nüî∏ {title}")
    for sev in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
        if grouped.get(sev):
            print(f"  {sev} ({len(grouped[sev])}):")
            for cve in sorted(set(grouped[sev])):
                print(f"    - {cve}")

def generate_html(image, grouped_data, trivy_version, grype_version, html_path):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    def cve_link(cve): return f'<a href="https://nvd.nist.gov/vuln/detail/{cve}" target="_blank">{cve}</a>'
    with open(html_path, "w") as f:
        f.write(f"""<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Scan Report</title>
<style>
body {{ font-family: Arial, sans-serif; padding: 20px; }}
h1, h2 {{ color: #2c3e50; }}
table {{ width: 100%; border-collapse: collapse; margin-top: 1em; }}
th, td {{ border: 1px solid #ccc; padding: 8px; text-align: left; }}
a {{ color: #2c3e50; }}
pre {{ background: #f4f4f4; padding: 10px; border-radius: 8px; overflow: auto; }}
button {{ margin: 10px 0; padding: 6px 10px; background: #2c3e50; color: #fff; border: none; border-radius: 5px; cursor: pointer }}
</style>
<script>
function toggle(id) {{
  var el = document.getElementById(id);
  el.style.display = (el.style.display === 'none') ? 'block' : 'none';
}}
function savePDF() {{
  window.print();
}}
</script>
</head>
<body>
<h1>Scan Report for <code>{image}</code></h1>
<p><strong>Date:</strong> {timestamp}</p>
<p><strong>Trivy Version:</strong> {trivy_version} &nbsp;&nbsp;&nbsp; <strong>Grype Version:</strong> {grype_version}</p>
<button onclick="savePDF()">üìÑ Download as PDF</button>

<h2>Summary</h2>
<table>
<tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
<tr><td>Grype</td><td>{grouped_data['summary']['total_grype']}</td><td>{grouped_data['summary']['only_in_grype']}</td><td>{grouped_data['summary']['shared']}</td></tr>
<tr><td>Trivy</td><td>{grouped_data['summary']['total_trivy']}</td><td>{grouped_data['summary']['only_in_trivy']}</td><td>{grouped_data['summary']['shared']}</td></tr>
</table>

<h2>CVEs by Severity</h2>
<ul>
  <li><a href="#grype">Unique to Grype</a></li>
  <li><a href="#trivy">Unique to Trivy</a></li>
  <li><a href="#shared">Shared CVEs</a></li>
</ul>

""")
        for section in ["grype", "trivy", "shared"]:
            title = {
                "grype": "Unique to Grype",
                "trivy": "Unique to Trivy",
                "shared": "Shared CVEs"
            }[section]
            f.write(f"<h3 id='{section}'>{title}</h3>")
            for sev in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
                if grouped_data["breakdown"][section].get(sev):
                    f.write(f"<h4>{sev} ({len(grouped_data['breakdown'][section][sev])})</h4><ul>")
                    for cve in sorted(set(grouped_data["breakdown"][section][sev])):
                        f.write(f"<li>{cve_link(cve)}</li>")
                    f.write("</ul>")
        f.write(f"""
<button onclick="toggle('raw')">Toggle Raw JSON</button>
<pre id='raw' style="display:none;">{json.dumps(grouped_data, indent=2)}</pre>
</body></html>""")
    print(f"\n‚úÖ HTML report saved to {html_path}")

def main():
    if len(sys.argv) < 2:
        print("‚ùå Usage: scancompare <image> | --uninstall | --version")
        return
    if sys.argv[1] in ("--version", "-v"):
        print("üì¶ scancompare version", VERSION)
        return
    if sys.argv[1] == "--uninstall":
        uninstall()

    check_for_updates()
    ensure_dirs()

    image = sys.argv[1]
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d")
    trivy_out = f"{REPORT_DIR}/original_trivy.json"
    grype_out = f"{REPORT_DIR}/original_grype.json"
    html_out = f"{REPORT_DIR}/scan_report_{image.replace('/', '_').replace(':', '_')}_{timestamp}.html"

    trivy_version = run_trivy(image, trivy_out)
    grype_version = run_grype(image, grype_out)

    trivy_cves = extract_cves_trivy(trivy_out)
    grype_cves = extract_cves_grype(grype_out)

    trivy_ids = set(v["id"] for v in trivy_cves)
    grype_ids = set(v["id"] for v in grype_cves)

    shared = trivy_ids & grype_ids
    only_trivy = trivy_ids - grype_ids
    only_grype = grype_ids - trivy_ids

    def filter_group(cves, ids): return [c for c in cves if c["id"] in ids]
    summary = {
        "total_trivy": len(trivy_ids),
        "total_grype": len(grype_ids),
        "shared": len(shared),
        "only_in_trivy": len(only_trivy),
        "only_in_grype": len(only_grype)
    }

    breakdown = {
        "trivy": group_by_severity(filter_group(trivy_cves, only_trivy)),
        "grype": group_by_severity(filter_group(grype_cves, only_grype)),
        "shared": group_by_severity(filter_group(trivy_cves, shared))
    }

    print("\nüîß Tool Versions:")
    print(f"  Trivy: {trivy_version}")
    print(f"  Grype: {grype_version}")

    print("\nüìä CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {summary['total_grype']}   | {summary['only_in_grype']}             | {summary['shared']}")
    print(f"Trivy      | {summary['total_trivy']}   | {summary['only_in_trivy']}             | {summary['shared']}")

    print("\nüîç CVEs by Severity")
    print_severity_section("Unique to Grype", breakdown["grype"])
    print_severity_section("Unique to Trivy", breakdown["trivy"])
    print_severity_section("Shared CVEs", breakdown["shared"])

    generate_html(image, {"summary": summary, "breakdown": breakdown}, trivy_version, grype_version, html_out)

    choice = input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").strip().lower()
    if choice == "y":
        if sys.platform.startswith("darwin"):
            subprocess.run(["open", html_out])
        elif sys.platform.startswith("linux"):
            subprocess.run(["xdg-open", html_out])
        else:
            print("üìé You can view the report manually at:", html_out)

if __name__ == "__main__":
    main()
