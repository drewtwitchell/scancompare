#!/usr/bin/env python3

import os
import sys
import json
import subprocess
import tempfile
import datetime
import shutil
import platform
from pathlib import Path

VERSION = "1.4.0"
REPO_USER = "drewtwitchell"
REPO_NAME = "scancompare"
SCRIPT_NAME = "scancompare"
REMOTE_URL = f"https://raw.githubusercontent.com/{REPO_USER}/{REPO_NAME}/main/scancompare.py"
INSTALL_PATH = Path.home() / ".local" / "bin" / SCRIPT_NAME
REPORT_DIR = Path("scan_reports")
REPORT_DIR.mkdir(exist_ok=True)

def step(msg): print(f"\nüîπ {msg}")
def done(msg): print(f"    ‚úî {msg}")

def run(cmd, capture=False):
    result = subprocess.run(cmd, shell=True, capture_output=capture, text=True)
    if capture: return result.stdout.strip()

def get_remote_version():
    try:
        return run(f"curl -fsSL {REMOTE_URL} | grep 'VERSION' | head -1 | cut -d'\"' -f2", capture=True)
    except: return VERSION

def self_update():
    remote_version = get_remote_version()
    if remote_version != VERSION:
        print(f"üîÑ New version available: {remote_version} (current: {VERSION})")
        tmp_file = Path(tempfile.mkstemp()[1])
        run(f"curl -fsSL {REMOTE_URL} -o {tmp_file}")
        tmp_file.chmod(0o755)
        shutil.copy(tmp_file, INSTALL_PATH)
        print(f"‚úÖ scancompare updated to version {remote_version}")
        os.execv(INSTALL_PATH, [SCRIPT_NAME] + sys.argv[1:])

def install_tool(tool):
    print(f"üì¶ Installing {tool}...")
    if shutil.which("brew"):
        run(f"brew install {tool}")
    elif shutil.which("apt"):
        run(f"sudo apt install -y {tool}")
    else:
        print(f"‚ùå Cannot install {tool} automatically. Please install it manually.")
        sys.exit(1)

def check_dependencies():
    for tool in ["trivy", "grype", "jq"]:
        if not shutil.which(tool):
            install_tool(tool)

def scan_image(image):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d")
    target_safe = image.replace("/", "_").replace(":", "_")
    trivy_json = REPORT_DIR / "original_trivy.json"
    grype_json = REPORT_DIR / "original_grype.json"
    diff_json = REPORT_DIR / "original_diff.json"
    html_report = REPORT_DIR / f"scan_report_{target_safe}_{timestamp}.html"

    step("Scanning with Trivy...")
    run(f"trivy image --scanners vuln --format json --output {trivy_json} {image}")
    done(f"Trivy scan saved to {trivy_json}")

    step("Scanning with Grype...")
    run(f"grype {image} -o json > {grype_json}")
    done(f"Grype scan saved to {grype_json}")

    return trivy_json, grype_json, diff_json, html_report, timestamp

def compare_scans(trivy_file, grype_file, diff_file):
    trivy_data = json.loads(Path(trivy_file).read_text())
    grype_data = json.loads(Path(grype_file).read_text())

    trivy_cves = [{"id": v["VulnerabilityID"], "severity": v["Severity"]} 
                  for result in trivy_data.get("Results", []) 
                  for v in result.get("Vulnerabilities", [])]

    grype_cves = [{"id": match["vulnerability"]["id"], "severity": match["vulnerability"]["severity"]} 
                  for match in grype_data.get("matches", [])]

    t_ids = {v["id"] for v in trivy_cves}
    g_ids = {v["id"] for v in grype_cves}

    shared = t_ids & g_ids
    unique_trivy = t_ids - g_ids
    unique_grype = g_ids - t_ids

    def group(cves, ids):
        out = {}
        for v in cves:
            if v["id"] in ids:
                sev = v["severity"].upper()
                out.setdefault(sev, []).append(v["id"])
        return out

    result = {
        "summary": {
            "total_grype": len(g_ids),
            "total_trivy": len(t_ids),
            "shared": len(shared),
            "only_in_grype": len(unique_grype),
            "only_in_trivy": len(unique_trivy)
        },
        "breakdown": {
            "grype": group(grype_cves, g_ids),
            "trivy": group(trivy_cves, t_ids)
        },
        "actions": {
            "suggestion": "Review shared CVEs and prioritize those with known fixes."
        }
    }

    Path(diff_file).write_text(json.dumps(result, indent=2))
    return result

def print_terminal_summary(diff):
    print("\nüìä CLI Summary Report")
    print(f"{'Tool':<10} | {'Total':<5} | {'Only in Tool':<13} | {'Shared'}")
    print("-" * 45)
    print(f"Grype     | {diff['summary']['total_grype']:<5} | {diff['summary']['only_in_grype']:<13} | {diff['summary']['shared']}")
    print(f"Trivy     | {diff['summary']['total_trivy']:<5} | {diff['summary']['only_in_trivy']:<13} | {diff['summary']['shared']}")
    print("\nSuggested Action:", diff['actions']['suggestion'])

    print("\nüîé Breakdown by Tool and Severity:\n")
    for tool in ["grype", "trivy"]:
        print(f"{tool.upper()}:\n")
        for sev in ["CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE", "UNKNOWN"]:
            vulns = diff["breakdown"].get(tool, {}).get(sev, [])
            if vulns:
                print(f"  {sev:<10} ({len(vulns)})")
                for cve in vulns:
                    print(f"    - {cve}")
        print("")

def generate_html_report(diff, html_file, image, timestamp):
    with open(html_file, "w") as f:
        f.write(f"""<!DOCTYPE html>
<html><head><meta charset='UTF-8'><title>Scan Report</title>
<style>
body {{ font-family:sans-serif; padding:20px; max-width:900px; margin:auto }}
h1,h2,h3 {{ color:#2c3e50 }}
pre {{ background:#f4f4f4; padding:10px; border-radius:8px; overflow:auto }}
button {{ margin:10px 0; padding:6px 10px; background:#2c3e50; color:#fff; border:none; border-radius:5px; cursor:pointer }}
table {{ border-collapse:collapse; width:100%; margin-top:1em }}
th,td {{ border:1px solid #ccc; padding:8px; text-align:left }}
a {{ text-decoration:none; color:#2c3e50 }}
</style>
<script>
function toggle(id) {{
  var el = document.getElementById(id);
  el.style.display = (el.style.display === 'none' || !el.style.display) ? 'block' : 'none';
}}
function savePDF() {{ window.print(); }}
</script></head>
<body>
<h1>Scan Report for <code>{image}</code></h1>
<p><strong>Date:</strong> {timestamp}</p>
<button onclick='savePDF()'>üìÑ Download as PDF</button>

<table>
  <tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
  <tr><td><a href='#grype'>Grype</a></td><td>{diff['summary']['total_grype']}</td><td>{diff['summary']['only_in_grype']}</td><td>{diff['summary']['shared']}</td></tr>
  <tr><td><a href='#trivy'>Trivy</a></td><td>{diff['summary']['total_trivy']}</td><td>{diff['summary']['only_in_trivy']}</td><td>{diff['summary']['shared']}</td></tr>
</table>

<h3>Suggested Action</h3><p>{diff['actions']['suggestion']}</p>
""")
        for tool in ['grype', 'trivy']:
            f.write(f"<h2 id='{tool}'>{tool.capitalize()} Vulnerabilities by Severity</h2>\n")
            for severity, vulns in diff['breakdown'].get(tool, {}).items():
                f.write(f"<h3>{severity} ({len(vulns)})</h3><ul>\n")
                for cve in vulns:
                    f.write(f"<li><a href='https://nvd.nist.gov/vuln/detail/{cve}' target='_blank'>{cve}</a></li>\n")
                f.write("</ul>\n")
        f.write(f"""
<hr><button onclick="toggle('raw')">Toggle Raw JSON</button>
<pre id="raw" style="display:none;">{json.dumps(diff, indent=2)}</pre>
</body></html>""")
    print(f"‚úÖ HTML report saved: {html_file}")

def ask_open(html_file):
    print("\nüìÅ Would you like to open the HTML report in your browser? (y/n)")
    choice = input().lower().strip()
    if choice == "y":
        if sys.platform.startswith("darwin"):
            run(f"open {html_file}")
        elif sys.platform.startswith("linux"):
            run(f"xdg-open {html_file}")
        else:
            print("Open the file manually:", html_file)
    else:
        print("üìé You can view it later at:", html_file)

def main():
    if len(sys.argv) < 2:
        print("‚ùå Usage: scancompare <docker-image>")
        sys.exit(1)

    check_dependencies()
    image = sys.argv[1]
    self_update()

    trivy, grype, diff, html, timestamp = scan_image(image)
    result = compare_scans(trivy, grype, diff)
    print_terminal_summary(result)
    generate_html_report(result, html, image, timestamp)
    ask_open(html)

if __name__ == "__main__":
    main()
