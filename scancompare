#!/usr/bin/env python3
import json
import subprocess
import os
import sys
import datetime
import shutil

VERSION = "1.4.6"
SCRIPT_PATH = os.path.expanduser("~/.local/bin/scancompare")
REPO_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"

def get_installed_version(tool):
    try:
        if tool == "trivy":
            out = subprocess.check_output(["trivy", "--version"]).decode()
            return out.splitlines()[0].split()[2]
        elif tool == "grype":
            out = subprocess.check_output(["grype", "version", "-o", "json"]).decode()
            return json.loads(out)["application"]["version"]
    except:
        return "unknown"

def check_for_tool_update(tool):
    try:
        if tool == "trivy":
            subprocess.run(["trivy", "--download-db-only", "--quiet"], stdout=subprocess.DEVNULL)
        elif tool == "grype":
            subprocess.run(["grype", "db", "check"], stdout=subprocess.DEVNULL)
            subprocess.run(["grype", "db", "update", "--quiet"], stdout=subprocess.DEVNULL)
    except:
        pass

def auto_update_self():
    try:
        remote_script = subprocess.check_output(["curl", "-fsSL", REPO_URL]).decode()
        if f'VERSION = "{VERSION}"' not in remote_script:
            remote_version = remote_script.split('VERSION = "')[1].split('"')[0]
            print(f"üîÑ New version available: {remote_version} (current: {VERSION})")
            with open(SCRIPT_PATH, "w") as f:
                f.write(remote_script)
            os.chmod(SCRIPT_PATH, 0o755)
            print(f"‚úÖ scancompare updated to version {remote_version}")
            os.execv(SCRIPT_PATH, [SCRIPT_PATH] + sys.argv[1:])
    except:
        pass

def uninstall():
    print("üßπ Uninstalling scancompare...")
    os.remove(SCRIPT_PATH)
    print("‚úÖ Uninstalled.")
    sys.exit(0)

def run_trivy_scan(image, out_file):
    print("\nüîπ Scanning with Trivy...")
    trivy_version = get_installed_version("trivy")
    check_for_tool_update("trivy")
    print(f"   üì¶ Trivy version: {trivy_version}")
    subprocess.run(["trivy", "image", "--scanners", "vuln", "--format", "json", "--output", out_file, image], stdout=subprocess.DEVNULL)
    print(f"    ‚úî Trivy scan saved to {out_file}")
    return trivy_version

def run_grype_scan(image, out_file):
    print("\nüîπ Scanning with Grype...")
    grype_version = get_installed_version("grype")
    check_for_tool_update("grype")
    print(f"   üì¶ Grype version: {grype_version}")
    with open(out_file, "w") as f:
        subprocess.run(["grype", image, "-o", "json"], stdout=f)
    print(f"    ‚úî Grype scan saved to {out_file}")
    return grype_version

def extract_cves_trivy(json_path):
    data = json.load(open(json_path))
    cves = []
    for result in data.get("Results", []):
        for vuln in result.get("Vulnerabilities", []):
            cves.append({"id": vuln["VulnerabilityID"], "severity": vuln["Severity"]})
    return cves

def extract_cves_grype(json_path):
    data = json.load(open(json_path))
    cves = []
    for match in data.get("matches", []):
        vuln = match.get("vulnerability", {})
        cves.append({"id": vuln.get("id"), "severity": vuln.get("severity")})
    return cves

def group_by_severity(cve_list):
    severity_order = ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]
    grouped = {s: [] for s in severity_order}
    for item in cve_list:
        sev = item["severity"].capitalize()
        if sev not in grouped:
            sev = "Unknown"
        grouped[sev].append(item["id"])
    return grouped

def generate_html_report(image, summary, grouped, trivy_version, grype_version, html_path):
    def html_cve_list(cves):
        return "".join([f'<li><a href="https://nvd.nist.gov/vuln/detail/{cve}" target="_blank">{cve}</a></li>' for cve in cves])

    now = datetime.datetime.now().strftime("%Y-%m-%d")
    with open(html_path, "w") as f:
        f.write(f"""<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Scan Report</title>
<style>
body{{font-family:sans-serif;padding:20px;max-width:900px;margin:auto}}h1,h2,h3{{color:#2c3e50}}
table{{border-collapse:collapse;width:100%;margin-top:1em}}th,td{{border:1px solid #ccc;padding:8px;text-align:left}}
ul{{list-style-type:square;margin-left:20px}}pre{{background:#f4f4f4;padding:10px;border-radius:8px;overflow:auto;}}
button{{margin:10px 0;padding:6px 10px;background:#2c3e50;color:#fff;border:none;border-radius:5px;cursor:pointer}}
a.section-link{{margin-left:10px;font-size:0.9em;text-decoration:none;color:#2980b9}}
</style>
<script>
function toggle(id){{var e=document.getElementById(id);e.style.display=(e.style.display==='none'||!e.style.display)?'block':'none'}}
function savePDF(){{window.print()}}
</script></head><body>
<h1>Scan Report for <code>{image}</code></h1>
<p><strong>Date:</strong> {now}</p>
<p><strong>Trivy:</strong> {trivy_version} | <strong>Grype:</strong> {grype_version}</p>
<button onclick='savePDF()'>üìÑ Export to PDF</button>
<table>
<tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
<tr><td>Grype</td><td>{summary['grype_total']}</td><td>{summary['grype_unique']}</td><td>{summary['shared']}</td></tr>
<tr><td>Trivy</td><td>{summary['trivy_total']}</td><td>{summary['trivy_unique']}</td><td>{summary['shared']}</td></tr>
</table>

<h2 id="toc">Contents</h2>
<ul>
  <li><a href="#grype">Unique to Grype</a></li>
  <li><a href="#trivy">Unique to Trivy</a></li>
  <li><a href="#shared">Shared CVEs</a></li>
</ul>
""")

        for label, cvemap in grouped.items():
            f.write(f"<h3 id='{label.lower()}'>{label}</h3>\n")
            for sev in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
                if sev in cvemap and cvemap[sev]:
                    f.write(f"<h4>{sev} ({len(cvemap[sev])})</h4>\n<ul>\n")
                    f.write(html_cve_list(cvemap[sev]))
                    f.write("</ul>\n")

        f.write(f"""
<button onclick="toggle('json')">Toggle Raw JSON</button>
<pre id="json" style="display:none;">{json.dumps(grouped, indent=2)}</pre>
</body></html>""")
    print(f"‚úÖ HTML report saved to {html_path}")

def print_cli_summary(summary, grouped, trivy_ver, grype_ver):
    print(f"\nüîß Tool Versions:\n  Trivy: {trivy_ver}\n  Grype: {grype_ver}")
    print("\nüìä CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {summary['grype_total']}   | {summary['grype_unique']}             | {summary['shared']}")
    print(f"Trivy      | {summary['trivy_total']}   | {summary['trivy_unique']}             | {summary['shared']}")

    print("\nüîç CVEs by Severity\n")

    for label, cves in grouped.items():
        print(f"üî∏ {label}")
        for sev in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
            if sev in cves and cves[sev]:
                print(f"  {sev} ({len(cves[sev])}):")
                for cve in cves[sev]:
                    print(f"    - {cve}")
        print()

def main():
    if "--version" in sys.argv:
        print(f"scancompare version {VERSION}")
        sys.exit(0)
    if "--uninstall" in sys.argv:
        uninstall()

    if len(sys.argv) < 2:
        print("‚ùå Usage: scancompare <image>")
        sys.exit(1)

    image = sys.argv[1]
    auto_update_self()

    os.makedirs("scan_reports", exist_ok=True)
    trivy_out = "scan_reports/original_trivy.json"
    grype_out = "scan_reports/original_grype.json"
    html_report = f"scan_reports/scan_report_{image.replace('/', '_').replace(':', '_')}_{datetime.date.today()}.html"

    trivy_ver = run_trivy_scan(image, trivy_out)
    grype_ver = run_grype_scan(image, grype_out)

    trivy_cves = extract_cves_trivy(trivy_out)
    grype_cves = extract_cves_grype(grype_out)

    trivy_ids = set(c["id"] for c in trivy_cves)
    grype_ids = set(c["id"] for c in grype_cves)

    shared = trivy_ids & grype_ids
    trivy_only = trivy_ids - grype_ids
    grype_only = grype_ids - trivy_ids

    summary = {
        "trivy_total": len(trivy_ids),
        "grype_total": len(grype_ids),
        "shared": len(shared),
        "trivy_unique": len(trivy_only),
        "grype_unique": len(grype_only)
    }

    grouped = {
        "Unique to Grype": group_by_severity([c for c in grype_cves if c["id"] in grype_only]),
        "Unique to Trivy": group_by_severity([c for c in trivy_cves if c["id"] in trivy_only]),
        "Shared CVEs": group_by_severity([c for c in grype_cves if c["id"] in shared])
    }

    print_cli_summary(summary, grouped, trivy_ver, grype_ver)
    generate_html_report(image, summary, grouped, trivy_ver, grype_ver, html_report)

    open_browser = input("\nüìÅ Would you like to open the HTML report in your browser? (y/n): ").strip().lower()
    if open_browser == "y":
        if sys.platform == "darwin":
            subprocess.run(["open", html_report])
        elif sys.platform.startswith("linux"):
            subprocess.run(["xdg-open", html_report])
        else:
            print(f"Open this file manually: {html_report}")

if __name__ == "__main__":
    main()
