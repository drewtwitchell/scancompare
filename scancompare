#!/usr/bin/env python3

import os
import sys
import subprocess
import json
import shutil
import datetime
import platform
from pathlib import Path

VERSION = "1.4.1"
REPO = "drewtwitchell/scancompare"
SCRIPT_URL = f"https://raw.githubusercontent.com/{REPO}/main/scancompare"
INSTALL_PATH = Path.home() / ".local/bin/scancompare"
REPORT_DIR = Path("scan_reports")
REPORT_DIR.mkdir(exist_ok=True)
TIMESTAMP = datetime.datetime.now().strftime("%Y-%m-%d")

def print_step(msg): print(f"\nüîπ {msg}")
def print_done(msg): print(f"    ‚úî {msg}")

def is_tool_installed(tool):
    return shutil.which(tool) is not None

def install_tool(tool):
    print(f"üì¶ Installing {tool}...")
    try:
        if is_tool_installed("brew"):
            subprocess.run(["brew", "install", tool], check=True)
        else:
            # Fallback: install via raw binaries
            if tool == "jq":
                url = "https://github.com/stedolan/jq/releases/latest/download/jq-osx-amd64"
                target = Path.home() / ".local/bin/jq"
            elif tool == "trivy":
                url = "https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.60.0_macOS-64bit.tar.gz"
                subprocess.run(f"curl -sL {url} | tar -xz -C /tmp && mv /tmp/trivy ~/.local/bin/", shell=True, check=True)
                return
            elif tool == "grype":
                url = "https://github.com/anchore/grype/releases/latest/download/grype_macos_amd64.tar.gz"
                subprocess.run(f"curl -sL {url} | tar -xz -C /tmp && mv /tmp/grype ~/.local/bin/", shell=True, check=True)
                return
            else:
                print(f"‚ùå Unknown tool: {tool}")
                return
            subprocess.run(["curl", "-L", url, "-o", str(target)], check=True)
            target.chmod(0o755)
    except Exception as e:
        print(f"‚ùå Failed to install {tool}: {e}")

def ensure_dependencies():
    for tool in ["jq", "trivy", "grype"]:
        if not is_tool_installed(tool):
            install_tool(tool)

def get_remote_version():
    try:
        res = subprocess.run(["curl", "-fsSL", SCRIPT_URL], capture_output=True, text=True, check=True)
        for line in res.stdout.splitlines():
            if line.startswith("VERSION"):
                return line.split("=")[1].strip().strip('"')
    except Exception:
        return None

def self_update():
    remote_version = get_remote_version()
    if remote_version and remote_version != VERSION:
        print(f"üîÑ New version available: {remote_version} (current: {VERSION})")
        try:
            tmp_file = Path("/tmp/scancompare_update.py")
            subprocess.run(["curl", "-fsSL", SCRIPT_URL, "-o", str(tmp_file)], check=True)
            tmp_file.chmod(0o755)
            shutil.copy(tmp_file, INSTALL_PATH)
            print(f"‚úÖ scancompare updated to version {remote_version}")
            os.execv(str(INSTALL_PATH), [str(INSTALL_PATH)] + sys.argv[1:])
        except Exception as e:
            print(f"‚ùå Update failed: {e}")

def run_scan(tool, image, output_file):
    if tool == "trivy":
        subprocess.run(["trivy", "image", "--scanners", "vuln", "--format", "json", "-o", output_file, image], check=True)
    elif tool == "grype":
        with open(output_file, "w") as f:
            subprocess.run(["grype", image, "-o", "json"], stdout=f, check=True)

def extract_vulns(filepath, tool):
    try:
        with open(filepath) as f:
            data = json.load(f)
        vulns = []
        if tool == "trivy":
            for result in data.get("Results", []):
                for vuln in result.get("Vulnerabilities", []):
                    vulns.append({"id": vuln.get("VulnerabilityID"), "severity": vuln.get("Severity", "UNKNOWN")})
        elif tool == "grype":
            for match in data.get("matches", []):
                vuln = match.get("vulnerability", {})
                vulns.append({"id": vuln.get("id"), "severity": vuln.get("severity", "UNKNOWN")})
        return vulns
    except Exception as e:
        print(f"‚ùå Failed to parse {tool} output: {e}")
        return []

def group_by_severity(vulns):
    grouped = {}
    for v in vulns:
        sev = v["severity"].upper()
        grouped.setdefault(sev, []).append(v["id"])
    return grouped

def compare_vulns(trivy_vulns, grype_vulns):
    trivy_ids = set(v["id"] for v in trivy_vulns)
    grype_ids = set(v["id"] for v in grype_vulns)
    shared = trivy_ids & grype_ids
    unique_trivy = trivy_ids - grype_ids
    unique_grype = grype_ids - trivy_ids
    return sorted(shared), sorted(unique_trivy), sorted(unique_grype)

def print_cli_report(shared, uniq_t, uniq_g, grouped_t, grouped_g):
    print("\nüìä CLI Summary Report")
    print("Tool   | Total | Only in Tool | Shared")
    print("-------|-------|--------------|--------")
    print(f"Grype  | {sum(len(v) for v in grouped_g.values())}    | {len(uniq_g)}           | {len(shared)}")
    print(f"Trivy  | {sum(len(v) for v in grouped_t.values())}    | {len(uniq_t)}           | {len(shared)}")

    def print_severity(title, group):
        print(f"\n{title}")
        for sev in sorted(group.keys(), reverse=True):
            print(f"  {sev}: {len(group[sev])}")
            for cve in sorted(group[sev]):
                print(f"    - {cve}")

    print("\nüü¢ Shared CVEs by Severity:")
    shared_grouped = group_by_severity([{"id": i, "severity": "UNKNOWN"} for i in shared])
    print_severity("Shared", shared_grouped)

    print("\nüü° Unique to Trivy:")
    uniq_t_grouped = group_by_severity([v for v in trivy_vulns if v["id"] in uniq_t])
    print_severity("Trivy", uniq_t_grouped)

    print("\nüî¥ Unique to Grype:")
    uniq_g_grouped = group_by_severity([v for v in grype_vulns if v["id"] in uniq_g])
    print_severity("Grype", uniq_g_grouped)

def generate_html_report(image, trivy_grouped, grype_grouped, shared, uniq_t, uniq_g, raw_data):
    fname = f"scan_report_{image.replace(':', '_').replace('/', '_')}_{TIMESTAMP}.html"
    fpath = REPORT_DIR / fname
    with open(fpath, "w") as f:
        f.write(f"""<!DOCTYPE html><html><head><meta charset="utf-8">
        <title>Scan Report: {image}</title>
        <style>body{{font-family:sans-serif;padding:20px;max-width:900px;margin:auto}}h1,h2,h3{{color:#2c3e50}}pre{{background:#f4f4f4;padding:10px;border-radius:8px;overflow:auto}}table{{border-collapse:collapse;width:100%;margin-top:1em}}th,td{{border:1px solid #ccc;padding:8px;text-align:left}}button{{padding:5px 10px;margin:10px 0;background:#333;color:#fff;border:none;cursor:pointer}}ul{{margin-left:20px}}.hidden{{display:none}}</style>
        <script>function toggle(id){{var e=document.getElementById(id);e.classList.toggle("hidden")}}</script>
        </head><body>
        <h1>Scan Report for <code>{image}</code></h1>
        <p><strong>Date:</strong> {TIMESTAMP}</p>

        <table>
        <tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
        <tr><td>Grype</td><td>{sum(len(v) for v in grype_grouped.values())}</td><td>{len(uniq_g)}</td><td>{len(shared)}</td></tr>
        <tr><td>Trivy</td><td>{sum(len(v) for v in trivy_grouped.values())}</td><td>{len(uniq_t)}</td><td>{len(shared)}</td></tr>
        </table>

        <h2 id="shared">Shared CVEs</h2><ul>
        {''.join(f"<li>{cve}</li>" for cve in shared)}
        </ul>

        <h2 id="trivy">Unique to Trivy</h2><ul>
        {''.join(f"<li>{cve}</li>" for cve in uniq_t)}
        </ul>

        <h2 id="grype">Unique to Grype</h2><ul>
        {''.join(f"<li>{cve}</li>" for cve in uniq_g)}
        </ul>

        <button onclick="toggle('raw')">Toggle Raw JSON</button>
        <pre id="raw" class="hidden">{json.dumps(raw_data, indent=2)}</pre>

        </body></html>
        """)
    print(f"‚úÖ HTML report saved: {fpath}")
    if input("üìÅ Open report in browser? (y/n): ").strip().lower() == "y":
        if platform.system() == "Darwin":
            subprocess.run(["open", str(fpath)])
        elif platform.system() == "Linux":
            subprocess.run(["xdg-open", str(fpath)])
        else:
            print(f"üìé View the report at: {fpath}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("‚ùå Usage: scancompare <image>")
        sys.exit(1)

    self_update()
    ensure_dependencies()

    image = sys.argv[1]
    trivy_json = REPORT_DIR / "original_trivy.json"
    grype_json = REPORT_DIR / "original_grype.json"

    print_step("Scanning with Trivy...")
    run_scan("trivy", image, trivy_json)
    print_done(f"Trivy scan saved to {trivy_json}")

    print_step("Scanning with Grype...")
    run_scan("grype", image, grype_json)
    print_done(f"Grype scan saved to {grype_json}")

    trivy_vulns = extract_vulns(trivy_json, "trivy")
    grype_vulns = extract_vulns(grype_json, "grype")
    grouped_t = group_by_severity(trivy_vulns)
    grouped_g = group_by_severity(grype_vulns)

    shared, uniq_t, uniq_g = compare_vulns(trivy_vulns, grype_vulns)
    print_cli_report(shared, uniq_t, uniq_g, grouped_t, grouped_g)

    raw_diff = {
        "summary": {
            "total_trivy": sum(len(v) for v in grouped_t.values()),
            "total_grype": sum(len(v) for v in grouped_g.values()),
            "shared": shared,
            "only_trivy": uniq_t,
            "only_grype": uniq_g,
        },
        "trivy_by_severity": grouped_t,
        "grype_by_severity": grouped_g,
    }

    generate_html_report(image, grouped_t, grouped_g, shared, uniq_t, uniq_g, raw_diff)
