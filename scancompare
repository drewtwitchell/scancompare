#!/usr/bin/env python3

import os
import sys
import json
import subprocess
import datetime
import re
from pathlib import Path

VERSION = "1.5.2"
SCRIPT_NAME = "scancompare"
INSTALL_PATH = Path.home() / ".local" / "bin" / SCRIPT_NAME
SCRIPT_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"

def run_command(command, capture_output=False):
    result = subprocess.run(command, shell=True, capture_output=capture_output, text=True)
    if capture_output:
        return result.stdout.strip()
    return None

def self_update():
    try:
        remote_script = run_command(f"curl -fsSL {SCRIPT_URL}", capture_output=True)
        if not remote_script:
            print("‚ö†Ô∏è Could not fetch remote script.")
            return
        for line in remote_script.splitlines():
            if line.strip().startswith("VERSION"):
                latest = line.split("=")[1].strip().replace('"', '')
                break
        else:
            print("‚ö†Ô∏è Could not determine remote version.")
            return
        if latest != VERSION:
            print(f"\nüîÑ New version available: {latest} (current: {VERSION})")
            with open(INSTALL_PATH, "w") as f:
                f.write(remote_script)
            os.chmod(INSTALL_PATH, 0o755)
            print(f"‚úÖ {SCRIPT_NAME} updated to version {latest}")
            sys.exit(0)
    except Exception as e:
        print(f"‚ö†Ô∏è Auto-update failed: {e}")

def uninstall():
    if INSTALL_PATH.exists():
        INSTALL_PATH.unlink()
        print(f"‚úÖ {SCRIPT_NAME} uninstalled.")
    else:
        print("‚ùå Not installed via install script.")
    sys.exit(0)

def clean_version(version_output, tool):
    try:
        # Specific cleaning for Grype
        if tool == "grype":
            # Look for version patterns like "v0.0.0" or "0.0.0"
            version_match = re.search(r'(?:v)?(\d+\.\d+\.\d+)', version_output)
            if version_match:
                return version_match.group(1)
        
        # Specific cleaning for Trivy
        elif tool == "trivy":
            # Extract version from "Version: x.x.x" or similar formats
            version_match = re.search(r'(?:Version:)?\s*(\d+\.\d+\.\d+)', version_output, re.IGNORECASE)
            if version_match:
                return version_match.group(1)
        
        # Fallback if specific parsing fails
        return version_output.strip().split()[0]
    except Exception as e:
        print(f"‚ö†Ô∏è Version parsing error for {tool}: {e}")
        return "unknown"

def get_version_info(tool):
    try:
        # Capture full version output
        output = run_command(f"{tool} version", capture_output=True)
        
        # Clean and return version
        return clean_version(output, tool)
    except:
        return "unknown"

def scan_with_trivy(image, report_path):
    print(f"üîπ Scanning with Trivy...")
    trivy_version = get_version_info("trivy")
    print(f"   üì¶ Trivy version: {trivy_version}")
    trivy_cmd = f"trivy image --quiet --format json -o {report_path} {image}"
    os.system(trivy_cmd)

def scan_with_grype(image, report_path):
    print(f"\nüîπ Scanning with Grype...")
    grype_version = get_version_info("grype")
    print(f"   üì¶ Grype version: {grype_version}")
    grype_cmd = f"grype {image} -q -o json > {report_path}"
    os.system(grype_cmd)

def extract_cves(path, tool):
    try:
        with open(path) as f:
            data = json.load(f)
        cves = []
        if tool == "trivy":
            for result in data.get("Results", []):
                for vuln in result.get("Vulnerabilities", []):
                    cves.append({
                        "id": vuln.get("VulnerabilityID"),
                        "severity": vuln.get("Severity", "UNKNOWN").upper()
                    })
        elif tool == "grype":
            for match in data.get("matches", []):
                vuln = match.get("vulnerability", {})
                cves.append({
                    "id": vuln.get("id"),
                    "severity": vuln.get("severity", "UNKNOWN").upper()
                })
        return cves
    except Exception as e:
        print(f"‚ùå Failed to parse {tool} output: {e}")
        return []

def group_by_severity(cves):
    groups = {"CRITICAL": [], "HIGH": [], "MEDIUM": [], "LOW": [], "NEGLIGIBLE": [], "UNKNOWN": []}
    for cve in cves:
        groups.get(cve["severity"].upper(), groups["UNKNOWN"]).append(cve["id"])
    return groups

def print_grouped(title, grouped):
    print(f"\nüî∏ {title}")
    for sev in ["CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE", "UNKNOWN"]:
        if grouped[sev]:
            print(f"  {sev.title()} ({len(grouped[sev])}):")
            for cve in sorted(set(grouped[sev])):
                print(f"    - {cve}")

def write_html_report(filename, shared, trivy, grype, versions):
    with open(filename, "w") as f:
        f.write(f"""<html><head><title>Scan Report</title><style>
body {{ font-family: sans-serif; padding: 20px; }}
h2 {{ margin-top: 40px; }}
ul {{ columns: 3; -webkit-columns: 3; -moz-columns: 3; }}
.details {{ margin-top: 30px; }}
.collapse {{ cursor: pointer; color: blue; }}
</style>
<script>
function toggle(id) {{
    var e = document.getElementById(id);
    e.style.display = e.style.display === 'none' ? 'block' : 'none';
}}
</script>
</head><body>
<h1>scancompare Report</h1>
<p><strong>scancompare:</strong> {VERSION} | <strong>Trivy:</strong> {versions['trivy']} | <strong>Grype:</strong> {versions['grype']}</p>
<h2>Navigation</h2>
<ul>
  <li><a href="#shared">Shared CVEs</a></li>
  <li><a href="#unique-trivy">Unique to Trivy</a></li>
  <li><a href="#unique-grype">Unique to Grype</a></li>
</ul>
""")
        for title, data, anchor in [
            ("Shared CVEs", shared, "shared"),
            ("Unique to Trivy", trivy, "unique-trivy"),
            ("Unique to Grype", grype, "unique-grype")
        ]:
            f.write(f"<h2 id='{anchor}'>{title}</h2>\n")
            grouped = group_by_severity(data)
            for sev in ["CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE", "UNKNOWN"]:
                if grouped[sev]:
                    f.write(f"<h3>{sev.title()} ({len(grouped[sev])})</h3><ul>")
                    for cve in sorted(set(grouped[sev])):
                        f.write(f"<li><a href='https://nvd.nist.gov/vuln/detail/{cve}' target='_blank'>{cve}</a></li>")
                    f.write("</ul>\n")
        f.write(f"""
<div class='details'>
<h2 onclick="toggle('json')">üì¶ Raw JSON (click to expand)</h2>
<pre id='json' style='display:none;'>{json.dumps({
            "shared": shared,
            "trivy_unique": trivy,
            "grype_unique": grype
        }, indent=2)}</pre>
</div>
</body></html>""")

def main():
    if len(sys.argv) < 2:
        print("‚ùå Usage: scancompare <image> | scancompare --version | scancompare uninstall")
        sys.exit(1)
    if sys.argv[1] in ("--version", "-v"):
        print(f"{SCRIPT_NAME} version {VERSION}")
        sys.exit(0)
    if sys.argv[1] == "uninstall":
        uninstall()

    self_update()
    image = sys.argv[1]
    print(f"\nüì¶ scancompare version {VERSION}")
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d")
    os.makedirs("scan_reports", exist_ok=True)
    trivy_out = f"scan_reports/original_trivy.json"
    grype_out = f"scan_reports/original_grype.json"
    html_out = f"scan_reports/scan_report_{image.replace(':','_')}_{timestamp}.html"

    scan_with_trivy(image, trivy_out)
    scan_with_grype(image, grype_out)

    trivy_cves = extract_cves(trivy_out, "trivy")
    grype_cves = extract_cves(grype_out, "grype")

    trivy_ids = {c["id"] for c in trivy_cves}
    grype_ids = {c["id"] for c in grype_cves}
    shared_ids = trivy_ids & grype_ids
    trivy_only = [c for c in trivy_cves if c["id"] not in grype_ids]
    grype_only = [c for c in grype_cves if c["id"] not in trivy_ids]
    shared = [c for c in trivy_cves + grype_cves if c["id"] in shared_ids]

    print("\nüìä CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {len(grype_ids):<5} | {len(grype_only):<13} | {len(shared_ids)}")
    print(f"Trivy      | {len(trivy_ids):<5} | {len(trivy_only):<13} | {len(shared_ids)}")

    print_grouped("Unique to Grype", group_by_severity(grype_only))
    print_grouped("Unique to Trivy", group_by_severity(trivy_only))
    print_grouped("Shared CVEs", group_by_severity(shared))

    write_html_report(html_out, shared, trivy_only, grype_only, {
        "trivy": get_version_info("trivy"),
        "grype": get_version_info("grype"),
    })

    print(f"\n‚úÖ HTML report saved to {html_out}")
    if input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").lower() == "y":
        run_command(f"open {html_out}")

if __name__ == "__main__":
    main()
