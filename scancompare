#!/bin/bash
VERSION="1.0.8"
SCRIPT_NAME="scancompare"
SCRIPT_PATH="$HOME/.local/bin/$SCRIPT_NAME"
REPO_USER="drewtwitchell"
REPO_NAME="scancompare"
REMOTE_URL="https://raw.githubusercontent.com/$REPO_USER/$REPO_NAME/main/$SCRIPT_NAME"

if [[ "$1" == "--no-update" ]]; then SKIP_UPDATE=true; shift; else SKIP_UPDATE=false; fi

TARGET="$1"
REPORT_DIR="scan_reports"
GRYPE_OUTPUT="$REPORT_DIR/grype_output.json"
TRIVY_OUTPUT="$REPORT_DIR/trivy_output.json"
DIFF_JSON="$REPORT_DIR/diff_report.json"
HTML_REPORT="$REPORT_DIR/scan_report.html"
UPGRADED_IMAGE=""

step() { echo -e "\nüîπ $1"; }
done_msg() { echo "    ‚úî $1"; }

get_remote_version() {
  curl -fsSL "$REMOTE_URL" | grep 'VERSION=' | cut -d'"' -f2
}

auto_update_check() {
  remote_ver=$(get_remote_version)
  if [[ "$VERSION" != "$remote_ver" ]]; then
    echo "üîÑ New version available: $remote_ver (current: $VERSION)"
    self_update "$@"
  fi
}

self_update() {
  tmp_file=$(mktemp)
  echo "üì• Auto-updating from $REMOTE_URL"
  curl -fsSL "$REMOTE_URL" -o "$tmp_file" || { echo "‚ùå Failed to fetch update."; exit 1; }
  remote_version=$(grep '^VERSION=' "$tmp_file" | cut -d'"' -f2)
  echo "üåê Fetched remote version: $remote_version"

  if [[ "$remote_version" == "$VERSION" ]]; then
    rm -f "$tmp_file"
    return
  fi

  echo "üîÑ New version available: $remote_version (current: $VERSION)"
  chmod +x "$tmp_file"
  mv "$tmp_file" "$SCRIPT_PATH"
  echo "‚úÖ scancompare updated to version $remote_version"
  exec "$SCRIPT_PATH" --no-update "$@"
}

check_tools() {
  for tool in grype trivy jq; do
    if ! command -v $tool &>/dev/null; then
      echo "üì¶ Installing $tool..."
      if command -v brew &>/dev/null; then brew install $tool
      else echo "‚ùå Please install $tool manually"; exit 1; fi
    fi
  done
}

run_scans() {
  mkdir -p "$REPORT_DIR"
  step "Scanning with Trivy..."
  trivy image --format json --output "$TRIVY_OUTPUT" "$TARGET"
  done_msg "Trivy scan saved to $TRIVY_OUTPUT"

  step "Scanning with Grype..."
  grype "$TARGET" -o json > "$GRYPE_OUTPUT"
  done_msg "Grype scan saved to $GRYPE_OUTPUT"
}

compare_results() {
  step "Comparing scan results..."
  grype_cves=$(jq -r '.matches[].vulnerability.id' "$GRYPE_OUTPUT" | sort | uniq)
  trivy_cves=$(jq -r '[.Results[].Vulnerabilities[]?.VulnerabilityID] | flatten | .[]' "$TRIVY_OUTPUT" | sort | uniq)
  echo "$grype_cves" > "$REPORT_DIR/grype.txt"
  echo "$trivy_cves" > "$REPORT_DIR/trivy.txt"
  only_grype=$(comm -23 "$REPORT_DIR/grype.txt" "$REPORT_DIR/trivy.txt")
  only_trivy=$(comm -13 "$REPORT_DIR/grype.txt" "$REPORT_DIR/trivy.txt")
  in_both=$(comm -12 "$REPORT_DIR/grype.txt" "$REPORT_DIR/trivy.txt")

  jq -n \
    --argjson only_in_grype "$(jq -R -s -c 'split("\n") | map(select(. != ""))' <<< "$only_grype")" \
    --argjson only_in_trivy "$(jq -R -s -c 'split("\n") | map(select(. != ""))' <<< "$only_trivy")" \
    --argjson in_both "$(jq -R -s -c 'split("\n") | map(select(. != ""))' <<< "$in_both")" '
    def count(a): a | length;
    {
      summary: {
        total_grype: (count($only_in_grype) + count($in_both)),
        total_trivy: (count($only_in_trivy) + count($in_both)),
        shared: count($in_both),
        only_in_grype: count($only_in_grype),
        only_in_trivy: count($only_in_trivy)
      },
      unique_to_grype: $only_in_grype,
      unique_to_trivy: $only_in_trivy,
      common_vulnerabilities: $in_both,
      actions: {
        suggestion: "Prioritize shared vulnerabilities and those with fixed versions."
      }
    }' > "$DIFF_JSON"

  done_msg "Diff report saved to $DIFF_JSON"
}

generate_html_report() {
  [[ ! -s "$DIFF_JSON" || ! -s "$GRYPE_OUTPUT" || ! -s "$TRIVY_OUTPUT" ]] && {
    echo "‚ùå Missing report data."; return 1;
  }

  local image_name_clean=$(echo "$TARGET" | tr '/:' '__')
  local timestamp=$(date +"%Y-%m-%d")
  local report_title="scan_report_${image_name_clean}_$timestamp"
  HTML_REPORT="$REPORT_DIR/${report_title}.html"

  {
    echo "<!DOCTYPE html><html><head><meta charset='UTF-8'>"
    echo "<title>Scan Report - $TARGET - $timestamp</title>"
    echo "<style>
      body { font-family: sans-serif; padding: 20px; max-width: 960px; margin: auto; }
      h1, h2, h3 { color: #2c3e50; }
      ul { background: #f9f9f9; padding: 10px; border-radius: 8px; }
      pre { background: #f0f0f0; padding: 1em; border-radius: 8px; overflow-x: auto; display: none; }
      .section { margin-top: 30px; }
      button { margin-top: 10px; padding: 8px 14px; background-color: #2c3e50; color: white; border: none; border-radius: 5px; cursor: pointer; }
    </style>"
    echo "<script>
      function toggle(id) {
        var x = document.getElementById(id);
        if (x.style.display === 'none') x.style.display = 'block';
        else x.style.display = 'none';
      }
      function savePDF() {
        window.print();
      }
    </script></head><body>"

    echo "<h1>Grype vs Trivy Vulnerability Report</h1>"
    echo "<p><strong>Image:</strong> $TARGET<br><strong>Date:</strong> $timestamp</p>"
    echo "<button onclick='savePDF()'>üìÑ Download as PDF</button>"

    jq -r '
      def cves(title; list):
        "<h3>" + title + "</h3><ul>" +
        (list | map("<li>" + . + "</li>") | join("")) +
        "</ul>";

      (.summary | "<div><strong>Total Grype:</strong> \(.total_grype) |
       <strong>Total Trivy:</strong> \(.total_trivy) |
       <strong>Shared:</strong> \(.shared)</div>") +
      cves("Only in Grype"; .unique_to_grype) +
      cves("Only in Trivy"; .unique_to_trivy) +
      cves("Common Vulnerabilities"; .common_vulnerabilities) +
      "<div><strong>Recommendation:</strong> " + .actions.suggestion + "</div>"
    ' "$DIFF_JSON"

    echo "<div class='section'><h2>üóÇ Trivy Full Output</h2>"
    echo "<button onclick=\"toggle('trivy_raw')\">Toggle Trivy Output</button>"
    echo "<pre id='trivy_raw'>"
    jq . "$TRIVY_OUTPUT" || cat "$TRIVY_OUTPUT"
    echo "</pre></div>"

    echo "<div class='section'><h2>üóÇ Grype Full Output</h2>"
    echo "<button onclick=\"toggle('grype_raw')\">Toggle Grype Output</button>"
    echo "<pre id='grype_raw'>"
    jq . "$GRYPE_OUTPUT" || cat "$GRYPE_OUTPUT"
    echo "</pre></div>"

    echo "</body></html>"
  } > "$HTML_REPORT"

  echo "‚úÖ HTML report saved: $HTML_REPORT"
}

open_html() {
  echo "üìÑ Opening report..."
  case "$OSTYPE" in
    darwin*) open "$HTML_REPORT" ;;
    linux*) xdg-open "$HTML_REPORT" ;;
    *) echo "View at: $HTML_REPORT" ;;
  esac
}

get_base_image() {
  grep '^FROM' Dockerfile | head -n 1 | awk '{print $2}'
}

check_for_base_image_upgrade() {
  step "Checking for base image upgrade..."
  base_image=$(get_base_image)
  image_name=$(echo "$base_image" | cut -d':' -f1)
  current_tag=$(echo "$base_image" | cut -d':' -f2)
  tags=$(curl -s "https://registry.hub.docker.com/v1/repositories/$image_name/tags" | jq -r '.[].name')
  latest=$(echo "$tags" | grep -E '^[0-9]+\.[0-9]+' | sort -V | tail -1)

  if [[ "$latest" != "$current_tag" ]]; then
    echo "‚¨ÜÔ∏è  Upgrade found: $current_tag ‚Üí $latest"
    sed -i.bak "s|$base_image|$image_name:$latest|" Dockerfile
    docker build -t "${TARGET}-upgraded" .
    UPGRADED_IMAGE="${TARGET}-upgraded"
    echo "‚úÖ Rebuilt upgraded image: $UPGRADED_IMAGE"
  else
    echo "‚úÖ Base image is already latest."
  fi
}

main() {
  [[ -z "$TARGET" ]] && echo "‚ùå Usage: scancompare <image>" && exit 1
  echo "üîç Starting vulnerability scan for image: $TARGET"

  check_tools
  run_scans
  compare_results
  generate_html_report
  open_html

  if [[ -f Dockerfile ]]; then
    check_for_base_image_upgrade
    if [[ -n "$UPGRADED_IMAGE" ]]; then
      TARGET="$UPGRADED_IMAGE"
      echo "üîÅ Re-scanning upgraded image: $UPGRADED_IMAGE"
      run_scans
      compare_results
      generate_html_report
      open_html
    fi
  fi
}

[[ "$1" == "update" ]] && self_update "$@" && exit 0
$SKIP_UPDATE || auto_update_check "$@"

main "$@"
