#!/usr/bin/env python3
# scancompare version 1.6.8

import os
import sys
import json
import subprocess
import platform
import shutil
import webbrowser
from datetime import datetime
from urllib.request import urlopen
from pathlib import Path

SCRIPT_NAME = "scancompare"
SCRIPT_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"
VERSION = "1.6.8"

INSTALL_BIN = Path.home() / ".local/bin"
INSTALL_LIB = Path.home() / ".local/lib/scancompare"
WRAPPER_PATH = INSTALL_BIN / SCRIPT_NAME
SCRIPT_PATH = INSTALL_LIB / SCRIPT_NAME

def check_latest_version(only_check=False):
    try:
        latest = urlopen(SCRIPT_URL).read().decode("utf-8").split("VERSION = ")[1].split("\n")[0].strip('"')
        if latest != VERSION:
            print(f"üîÑ New version available: {VERSION} ‚Üí {latest}")
            update_script()
            print("‚úÖ scancompare updated to latest version")
            if only_check:
                sys.exit(0)
            os.execv(sys.executable, [sys.executable] + sys.argv)
        elif only_check:
            print(f"üì¶ scancompare version {VERSION}")
            sys.exit(0)
    except Exception:
        print("‚ö†Ô∏è Could not determine remote version.")
        if only_check:
            print(f"üì¶ scancompare version {VERSION}")
            sys.exit(0)

def update_script():
    try:
        new_code = urlopen(SCRIPT_URL).read().decode("utf-8")
        Path(__file__).write_text(new_code)
    except Exception as e:
        print("‚ùå Failed to update script:", e)

def get_version(tool):
    try:
        result = subprocess.run([tool, "version"], capture_output=True, text=True)
        for line in result.stdout.splitlines():
            if tool.lower() in line.lower() or "Version" in line:
                return line.strip().split()[-1]
    except Exception:
        return "unknown"
    return "unknown"

def check_image_exists(image_name):
    try:
        subprocess.run(["docker", "image", "inspect", image_name], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        return True
    except subprocess.CalledProcessError:
        try:
            subprocess.run(["docker", "manifest", "inspect", image_name], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            return True
        except subprocess.CalledProcessError:
            return False
    except FileNotFoundError:
        print("‚ùå Docker is not installed or not in PATH.")
        return False

def run_scan(tool, image, output_path):
    with open(output_path, "w") as outfile:
        try:
            subprocess.run([tool, "image", "-f", "json", "-o", output_path, image],
                           check=True, stdout=outfile, stderr=subprocess.DEVNULL)
            return True
        except subprocess.CalledProcessError:
            return False

def extract_cves(file_path):
    try:
        with open(file_path) as f:
            data = json.load(f)
        return {item["VulnerabilityID"] for result in data.get("Results", []) for item in result.get("Vulnerabilities", [])}
    except Exception:
        return set()

def display_summary(trivy_cves, grype_cves):
    shared = trivy_cves & grype_cves
    only_trivy = trivy_cves - grype_cves
    only_grype = grype_cves - trivy_cves

    print("\nüìä CLI Summary Report\n")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {len(grype_cves)}   | {len(only_grype)}             | {len(shared)}")
    print(f"Trivy      | {len(trivy_cves)}   | {len(only_trivy)}            | {len(shared)}")
    return shared, only_trivy, only_grype

def explain_exit(msg):
    print(f"‚ö†Ô∏è {msg}")
    sys.exit(1)

def generate_html_report(image, trivy_json, grype_json, shared, only_trivy, only_grype):
    timestamp = datetime.now().strftime("%Y-%m-%d")
    report_name = f"scan_report_{image.replace(':', '_')}_{timestamp}.html"
    report_path = Path("scan_reports") / report_name
    trivy_data = json.load(open(trivy_json)) if Path(trivy_json).stat().st_size > 0 else {}
    grype_data = json.load(open(grype_json)) if Path(grype_json).stat().st_size > 0 else {}

    def cve_details_section(cves, source_data):
        out = ""
        for cve in sorted(cves):
            details = find_cve_details(cve, source_data)
            out += f"<li><b>{cve}</b>{details}</li>"
        return "<ul>" + out + "</ul>" if out else "<p>No CVEs found.</p>"

    def find_cve_details(cve_id, data):
        try:
            details = []
            for result in data.get("Results", []):
                for vuln in result.get("Vulnerabilities", []):
                    if vuln.get("VulnerabilityID") == cve_id:
                        pkg = vuln.get("PkgName", "")
                        sev = vuln.get("Severity", "")
                        desc = vuln.get("Description", "")[:200]
                        link = vuln.get("PrimaryURL", "")
                        json_blob = json.dumps(vuln, indent=2)
                        details.append(f"<br>üß™ {pkg} ‚Äî {sev}<br>{desc}<br><a href='{link}' target='_blank'>{link}</a><br><details><summary>Raw JSON</summary><pre>{json_blob}</pre></details>")
            return "".join(details)
        except Exception:
            return ""
        
    html = f"""<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>ScanCompare Report</title>
  <style>
    body {{ font-family: Arial, sans-serif; padding: 20px; }}
    h1, h2, h3 {{ color: #333; }}
    ul {{ line-height: 1.6; }}
    .toc a {{ display: block; text-decoration: none; }}
    details {{ margin: 0.5em 0; }}
  </style>
</head>
<body>
  <h1>Scan Report for {image}</h1>
  <h2>Table of Contents</h2>
  <div class="toc">
    <a href="#summary">Summary</a>
    <a href="#shared">Shared CVEs</a>
    <a href="#trivy">Unique to Trivy</a>
    <a href="#grype">Unique to Grype</a>
  </div>
  <hr>
  <h2 id="summary">Summary</h2>
  <pre>
Tool       | Total | Only in Tool | Shared
-----------|-------|---------------|--------
Grype      | {len(only_grype) + len(shared)}   | {len(only_grype)}             | {len(shared)}
Trivy      | {len(only_trivy) + len(shared)}   | {len(only_trivy)}            | {len(shared)}
  </pre>
  <h2 id="shared">Shared CVEs</h2>
  {cve_details_section(shared, trivy_data)}
  <h2 id="trivy">Unique to Trivy</h2>
  {cve_details_section(only_trivy, trivy_data)}
  <h2 id="grype">Unique to Grype</h2>
  {cve_details_section(only_grype, grype_data)}
</body>
</html>
"""  # noqa: E501

    report_path.write_text(html)
    print(f"‚úÖ HTML report saved: {report_path}")

    try:
        import pdfkit
        pdf_path = str(report_path).replace(".html", ".pdf")
        pdfkit.from_file(str(report_path), pdf_path)
        print(f"‚úÖ PDF export saved: {pdf_path}")
    except Exception:
        print("‚ö†Ô∏è PDF export skipped (pdfkit not available)")

    open_html = input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").strip().lower()
    if open_html == "y":
        webbrowser.open(f"file://{report_path.absolute()}")

def uninstall_scancompare():
    print("üßπ Uninstalling scancompare...")
    try:
        WRAPPER_PATH.unlink(missing_ok=True)
        SCRIPT_PATH.unlink(missing_ok=True)
        shutil.rmtree("scan_reports", ignore_errors=True)

        for file in [".bashrc", ".zshrc", ".profile"]:
            profile_path = Path.home() / file
            if profile_path.exists():
                content = profile_path.read_text()
                if 'export PATH="$HOME/.local/bin:$PATH"' in content:
                    content = content.replace('export PATH="$HOME/.local/bin:$PATH"\n', "")
                    profile_path.write_text(content)
    except Exception as e:
        print("‚ö†Ô∏è Error during uninstall:", e)
    print("‚úÖ scancompare uninstalled.")

def main():
    if len(sys.argv) == 2:
        if sys.argv[1] in ("--version", "version"):
            print(f"üì¶ scancompare version {VERSION}")
            sys.exit(0)
        elif sys.argv[1] in ("uninstall", "--uninstall"):
            uninstall_scancompare()
            sys.exit(0)
        elif sys.argv[1] == "update":
            check_latest_version(only_check=True)

    if len(sys.argv) < 2:
        print("Usage: scancompare <image>")
        sys.exit(1)

    image = sys.argv[1]
    check_latest_version()

    if not check_image_exists(image):
        explain_exit(f"Image '{image}' could not be found locally or remotely.")

    scan_dir = Path("scan_reports")
    scan_dir.mkdir(exist_ok=True)

    trivy_path = scan_dir / "original_trivy.json"
    grype_path = scan_dir / "original_grype.json"

    print(f"\nüîπ Scanning with Trivy...")
    trivy_version = get_version("trivy")
    print(f"   üì¶ Trivy version: {trivy_version}")
    if not run_scan("trivy", image, trivy_path):
        explain_exit("Trivy scan failed or image not found.")
    print(f"    ‚úî Trivy scan saved to {trivy_path}")

    print(f"\nüîπ Scanning with Grype...")
    grype_version = get_version("grype")
    print(f"   üì¶ Grype version: {grype_version}")
    if not run_scan("grype", image, grype_path):
        explain_exit("Grype scan failed or image not found.")
    print(f"    ‚úî Grype scan saved to {grype_path}")

    trivy_cves = extract_cves(trivy_path)
    grype_cves = extract_cves(grype_path)

    shared, only_trivy, only_grype = display_summary(trivy_cves, grype_cves)

    print("\nüîç CVEs by Severity")
    print("\nüî∏ Unique to Grype")
    for cve in sorted(only_grype): print(f"  - {cve}")
    print("\nüî∏ Unique to Trivy")
    for cve in sorted(only_trivy): print(f"  - {cve}")
    print("\nüî∏ Shared CVEs")
    for cve in sorted(shared): print(f"  - {cve}")

    generate_html_report(image, trivy_path, grype_path, shared, only_trivy, only_grype)

if __name__ == "__main__":
    main()
