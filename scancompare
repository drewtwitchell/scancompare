#!/bin/bash
VERSION="1.1.5"
SCRIPT_NAME="scancompare"
SCRIPT_PATH="$HOME/.local/bin/$SCRIPT_NAME"
REPO_USER="drewtwitchell"
REPO_NAME="scancompare"
REMOTE_URL="https://raw.githubusercontent.com/$REPO_USER/$REPO_NAME/main/$SCRIPT_NAME"

if [[ "$1" == "--no-update" ]]; then SKIP_UPDATE=true; shift; else SKIP_UPDATE=false; fi

TARGET="$1"
ORIGINAL_TARGET="$TARGET"
REPORT_DIR="scan_reports"
TIMESTAMP=$(date +"%Y-%m-%d")
HTML_REPORT="$REPORT_DIR/scan_report_${ORIGINAL_TARGET//[\/:]/_}_$TIMESTAMP.html"

ORIG_GRYPE="$REPORT_DIR/original_grype.json"
ORIG_TRIVY="$REPORT_DIR/original_trivy.json"
ORIG_DIFF="$REPORT_DIR/original_diff.json"

step() { echo -e "\nüîπ $1"; }
done_msg() { echo "    ‚úî $1"; }

get_remote_version() {
  curl -fsSL "$REMOTE_URL" | grep 'VERSION=' | cut -d'"' -f2
}

auto_update_check() {
  remote_ver=$(get_remote_version)
  if [[ "$VERSION" != "$remote_ver" ]]; then
    echo "üîÑ New version available: $remote_ver (current: $VERSION)"
    self_update "$@"
  fi
}

self_update() {
  tmp_file=$(mktemp)
  echo "üì• Auto-updating from $REMOTE_URL"
  curl -fsSL "$REMOTE_URL" -o "$tmp_file" || { echo "‚ùå Failed to fetch update."; exit 1; }
  remote_version=$(grep '^VERSION=' "$tmp_file" | cut -d'"' -f2)
  echo "üåê Fetched remote version: $remote_version"
  if [[ "$remote_version" == "$VERSION" ]]; then rm -f "$tmp_file"; return; fi
  chmod +x "$tmp_file"
  mv "$tmp_file" "$SCRIPT_PATH"
  echo "‚úÖ scancompare updated to version $remote_version"
  exec "$SCRIPT_PATH" --no-update "$@"
}

check_tools() {
  for tool in grype trivy jq docker; do
    if ! command -v $tool &>/dev/null; then
      echo "üì¶ Installing $tool..."
      if command -v brew &>/dev/null; then brew install $tool
      else echo "‚ùå Please install $tool manually"; exit 1; fi
    fi
  done
}

clear_old_report() {
  rm -f "$HTML_REPORT"
}

run_scans() {
  mkdir -p "$REPORT_DIR"
  step "Scanning with Trivy..."
  trivy image --format json --output "$ORIG_TRIVY" "$TARGET"
  done_msg "Trivy scan saved to $ORIG_TRIVY"
  step "Scanning with Grype..."
  grype "$TARGET" -o json > "$ORIG_GRYPE"
  done_msg "Grype scan saved to $ORIG_GRYPE"
}

compare_results() {
  step "Comparing scan results..."
  grype_cves=$(jq -r '.matches[].vulnerability.id' "$ORIG_GRYPE" | sort | uniq)
  trivy_cves=$(jq -r '[.Results[].Vulnerabilities[]?.VulnerabilityID] | flatten | .[]' "$ORIG_TRIVY" | sort | uniq)
  echo "$grype_cves" > "$REPORT_DIR/grype.txt"
  echo "$trivy_cves" > "$REPORT_DIR/trivy.txt"
  only_grype=$(comm -23 "$REPORT_DIR/grype.txt" "$REPORT_DIR/trivy.txt")
  only_trivy=$(comm -13 "$REPORT_DIR/grype.txt" "$REPORT_DIR/trivy.txt")
  in_both=$(comm -12 "$REPORT_DIR/grype.txt" "$REPORT_DIR/trivy.txt")
  jq -n \
    --argjson only_in_grype "$(jq -R -s -c 'split("\n") | map(select(. != ""))' <<< "$only_grype")" \
    --argjson only_in_trivy "$(jq -R -s -c 'split("\n") | map(select(. != ""))' <<< "$only_trivy")" \
    --argjson in_both "$(jq -R -s -c 'split("\n") | map(select(. != ""))' <<< "$in_both")" '
    def count(a): a | length;
    {
      summary: {
        total_grype: (count($only_in_grype) + count($in_both)),
        total_trivy: (count($only_in_trivy) + count($in_both)),
        shared: count($in_both),
        only_in_grype: count($only_in_grype),
        only_in_trivy: count($only_in_trivy)
      },
      unique_to_grype: $only_in_grype,
      unique_to_trivy: $only_in_trivy,
      common_vulnerabilities: $in_both,
      actions: {
        suggestion: "Review shared CVEs and prioritize those with known fixes."
      }
    }' > "$ORIG_DIFF"
  done_msg "Diff report saved to $ORIG_DIFF"

  # CLI output
  echo -e "\nüìä CLI Summary Report"
  jq -r '
    "Tool       | Total | Only in Tool | Shared\n-----------|-------|---------------|--------" +
    "\nGrype      | \(.summary.total_grype)    | \(.summary.only_in_grype)           | \(.summary.shared)" +
    "\nTrivy      | \(.summary.total_trivy)    | \(.summary.only_in_trivy)           | \(.summary.shared)\n" +
    "\nShared CVEs:\n" +
    (.common_vulnerabilities | map("- " + .) | join("\n")) +
    "\n\nSuggested Action: \(.actions.suggestion)"
  ' "$ORIG_DIFF"
}

generate_html_report() {
  {
    echo "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Scan Report</title>
    <style>body{font-family:sans-serif;padding:20px;max-width:900px;margin:auto} h1,h2,h3{color:#2c3e50} pre{background:#f4f4f4;padding:10px;border-radius:8px;overflow:auto;} button{margin:10px 0;padding:6px 10px;background:#2c3e50;color:#fff;border:none;border-radius:5px;cursor:pointer} table{border-collapse:collapse;width:100%;margin-top:1em} th,td{border:1px solid #ccc;padding:8px;text-align:left}</style><script>function toggle(id){var el=document.getElementById(id);el.style.display=(el.style.display==='none'||!el.style.display)?'block':'none'} function savePDF(){window.print();}</script></head><body>
    <h1>Scan Summary for <code>$ORIGINAL_TARGET</code></h1>
    <p><strong>Date:</strong> $TIMESTAMP</p>
    <p>This report shows vulnerabilities detected in the image <code>$ORIGINAL_TARGET</code> using Trivy and Grype. It provides shared vulnerabilities, tool-specific issues, and recommendations.</p>
    <button onclick='savePDF()'>üìÑ Download as PDF</button>"
    diff_json="$ORIG_DIFF"
    echo "<h2>Vulnerability Summary</h2>"
    jq -r '
      "<table><tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>" +
      "<tr><td>Grype</td><td>\(.summary.total_grype)</td><td>\(.summary.only_in_grype)</td><td>\(.summary.shared)</td></tr>" +
      "<tr><td>Trivy</td><td>\(.summary.total_trivy)</td><td>\(.summary.only_in_trivy)</td><td>\(.summary.shared)</td></tr></table>" +
      "<h3>Common Vulnerabilities</h3><ul>" +
      (.common_vulnerabilities | map("<li><a href=\"https://nvd.nist.gov/vuln/detail/" + . + "\" target=\"_blank\">" + . + "</a></li>") | join("")) +
      "</ul><h3>Suggested Action</h3><p>" + .actions.suggestion + "</p>"
    ' "$diff_json"
    echo "<button onclick=\"toggle('raw_json')\">Toggle Raw JSON</button><pre id='raw_json' style='display:none;'>"
    jq . "$diff_json"
    echo "</pre>"
    echo "</body></html>"
  } > "$HTML_REPORT"
  echo "‚úÖ HTML report saved: $HTML_REPORT"
}

prompt_open_html() {
  echo -e "\nüìÅ Would you like to open the HTML report in your browser? (y/n)"
  read -r choice
  if [[ "$choice" == "y" ]]; then
    case "$OSTYPE" in
      darwin*) open "$HTML_REPORT" ;;
      linux*) xdg-open "$HTML_REPORT" ;;
      *) echo "View at: $HTML_REPORT" ;;
    esac
  else
    echo "üìé You can view it later at: $HTML_REPORT"
  fi
}

main() {
  [[ -z "$TARGET" ]] && echo "‚ùå Usage: scancompare <image>" && exit 1
  echo "üîç Starting vulnerability scan for image: $TARGET"
  check_tools
  clear_old_report
  run_scans
  compare_results
  generate_html_report
  prompt_open_html
}

[[ "$1" == "update" ]] && self_update "$@" && exit 0
$SKIP_UPDATE || auto_update_check "$@"

main "$@"
