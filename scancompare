#!/usr/bin/env python3
# scancompare version 1.6.4

import os
import sys
import json
import subprocess
import platform
import webbrowser
from datetime import datetime
from urllib.request import urlopen
from pathlib import Path

SCRIPT_NAME = "scancompare"
SCRIPT_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"
VERSION = "1.6.4"

def check_latest_version():
    try:
        latest = urlopen(SCRIPT_URL).read().decode("utf-8").split("VERSION = ")[1].split("\n")[0].strip('"')
        if "--version" in sys.argv:
            print(f"üì¶ scancompare version {VERSION}")
            sys.exit(0)
        if latest != VERSION:
            print(f"üîÑ New version available: {VERSION} ‚Üí {latest}")
            update_script()
            print("‚úÖ scancompare updated to latest version")
            print(f"\nüì¶ scancompare version {latest}")
            os.execv(sys.executable, [sys.executable] + sys.argv)
        else:
            print(f"\nüì¶ scancompare version {VERSION}")
    except Exception:
        print("‚ö†Ô∏è Could not determine remote version.\nüì¶ scancompare version", VERSION)

def update_script():
    try:
        new_code = urlopen(SCRIPT_URL).read().decode("utf-8")
        script_path = Path(__file__)
        script_path.write_text(new_code)
    except Exception as e:
        print("‚ùå Failed to update script:", e)

def get_version(tool):
    try:
        result = subprocess.run([tool, "version"], capture_output=True, text=True)
        for line in result.stdout.splitlines():
            if tool.lower() in line.lower() or "Version" in line:
                parts = line.strip().split()
                for part in parts:
                    if part[0].isdigit():
                        return part
    except Exception:
        return "unknown"
    return "unknown"

def run_scan(tool, image, output_path):
    with open(output_path, "w") as outfile:
        try:
            subprocess.run([tool, "image", "-f", "json", "-o", output_path, image],
                           check=True, stdout=outfile, stderr=subprocess.DEVNULL)
            return True
        except subprocess.CalledProcessError:
            return False

def extract_cves(file_path):
    try:
        with open(file_path) as f:
            data = json.load(f)
        return {item["VulnerabilityID"] for result in data.get("Results", []) for item in result.get("Vulnerabilities", [])}
    except Exception:
        return set()

def display_summary(trivy_cves, grype_cves):
    shared = trivy_cves & grype_cves
    only_trivy = trivy_cves - grype_cves
    only_grype = grype_cves - trivy_cves

    print("\nüìä CLI Summary Report\n")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {len(grype_cves)}   | {len(only_grype)}             | {len(shared)}")
    print(f"Trivy      | {len(trivy_cves)}   | {len(only_trivy)}            | {len(shared)}")
    return shared, only_trivy, only_grype

def explain_exit(msg):
    print(f"‚ö†Ô∏è {msg}")
    sys.exit(1)

def generate_html_report(image, trivy_path, grype_path, shared, only_trivy, only_grype):
    timestamp = datetime.now().strftime("%Y-%m-%d")
    report_file = f"scan_reports/scan_report_{image.replace(':', '_')}_{timestamp}.html"

    def list_cves(cves):
        return "\n".join(f"<li>{cve}</li>" for cve in sorted(cves))

    html = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset='UTF-8'>
    <title>scancompare Report - {image}</title>
    <style>
        body {{ font-family: Arial, sans-serif; padding: 20px; }}
        h2 {{ border-bottom: 2px solid #ccc; }}
        ul {{ column-count: 2; }}
        .summary-table {{ border-collapse: collapse; width: 100%; margin-bottom: 30px; }}
        .summary-table th, .summary-table td {{ border: 1px solid #ccc; padding: 8px; text-align: center; }}
        .summary-table th {{ background-color: #f2f2f2; }}
        .nav-links a {{ margin-right: 15px; }}
        .button-container {{ margin: 20px 0; }}
        .button-container button {{
            padding: 8px 14px;
            font-size: 14px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }}
    </style>
</head>
<body>
    <h1>scancompare Report</h1>
    <p><strong>Image:</strong> {image}</p>
    <div class='nav-links'>
        <a href='#cli-summary'>CLI Summary</a>
        <a href='#unique-grype'>Unique to Grype</a>
        <a href='#unique-trivy'>Unique to Trivy</a>
        <a href='#shared'>Shared CVEs</a>
    </div>
    <div class='button-container'>
        <button onclick="window.print()">Export to PDF</button>
    </div>
    <h2 id='cli-summary'>üìä CLI Summary Report</h2>
    <table class="summary-table">
        <tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
        <tr><td>Grype</td><td>{len(only_grype)+len(shared)}</td><td>{len(only_grype)}</td><td>{len(shared)}</td></tr>
        <tr><td>Trivy</td><td>{len(only_trivy)+len(shared)}</td><td>{len(only_trivy)}</td><td>{len(shared)}</td></tr>
    </table>

    <h2 id='unique-grype'>üî∏ Unique to Grype</h2>
    <ul>{list_cves(only_grype)}</ul>

    <h2 id='unique-trivy'>üî∏ Unique to Trivy</h2>
    <ul>{list_cves(only_trivy)}</ul>

    <h2 id='shared'>üî∏ Shared CVEs</h2>
    <ul>{list_cves(shared)}</ul>
</body>
</html>"""

    Path(report_file).write_text(html)
    print(f"‚úÖ HTML report saved: {report_file}")
    open_prompt = input("üìÅ Would you like to open the HTML report in your browser? (y/n): ")
    if open_prompt.lower() == "y":
        webbrowser.open(f"file://{Path(report_file).resolve()}")

def main():
    if len(sys.argv) < 2:
        print("Usage: scancompare <image>")
        sys.exit(1)

    image = sys.argv[1]
    check_latest_version()

    scan_dir = Path("scan_reports")
    scan_dir.mkdir(exist_ok=True)

    trivy_path = scan_dir / "original_trivy.json"
    grype_path = scan_dir / "original_grype.json"

    print(f"\nüîπ Scanning with Trivy...")
    trivy_version = get_version("trivy")
    print(f"   üì¶ Trivy version: {trivy_version}")
    if not run_scan("trivy", image, trivy_path):
        explain_exit("Trivy scan failed or image not found.")
    print("    ‚úî Trivy scan saved to", trivy_path)

    print(f"\nüîπ Scanning with Grype...")
    grype_version = get_version("grype")
    print(f"   üì¶ Grype version: {grype_version}")
    if not run_scan("grype", image, grype_path):
        explain_exit("Grype scan failed or image not found.")
    print("    ‚úî Grype scan saved to", grype_path)

    trivy_cves = extract_cves(trivy_path)
    grype_cves = extract_cves(grype_path)

    shared, only_trivy, only_grype = display_summary(trivy_cves, grype_cves)

    print("\nüîç CVEs by Severity")
    print("\nüî∏ Unique to Grype")
    for cve in sorted(only_grype): print(f"  - {cve}")
    print("\nüî∏ Unique to Trivy")
    for cve in sorted(only_trivy): print(f"  - {cve}")
    print("\nüî∏ Shared CVEs")
    for cve in sorted(shared): print(f"  - {cve}")

    generate_html_report(image, trivy_path, grype_path, shared, only_trivy, only_grype)

if __name__ == "__main__":
    main()
