#!/usr/bin/env python3

import os
import subprocess
import json
import datetime
import webbrowser
import sys
from pathlib import Path

VERSION = "1.5.8"
SCRIPT_NAME = "scancompare"
SCRIPT_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"
REPORT_DIR = "scan_reports"
Path(REPORT_DIR).mkdir(exist_ok=True)

def run_command(cmd):
    try:
        result = subprocess.run(cmd, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        return e.stdout.strip() + "\n" + e.stderr.strip()

def get_version(tool):
    out = run_command(f"{tool} version")
    if tool == "trivy":
        for line in out.splitlines():
            if "Version:" in line:
                return line.split("Version:")[-1].strip()
    if tool == "grype":
        for line in out.splitlines():
            if "Version:" in line:
                return line.split("Version:")[-1].strip()
    return "unknown"

def check_update():
    try:
        latest = run_command(f"curl -s {SCRIPT_URL} | grep VERSION | head -n 1").split("=")[1].strip().strip('"')
        if latest != VERSION:
            print(f"\nüîÑ New version available: {VERSION} ‚Üí {latest}")
            print(f"‚úÖ Updating {SCRIPT_NAME}...")
            updated_script = run_command(f"curl -fsSL {SCRIPT_URL}")
            script_path = Path(__file__).resolve()
            script_path.write_text(updated_script)
            os.chmod(script_path, 0o755)
            print(f"‚úÖ {SCRIPT_NAME} updated to version {latest}\n")
            sys.exit(0)
    except Exception:
        print("‚ö†Ô∏è Could not determine remote version.\n")

def scan_with_tool(tool, image, output_path):
    if tool == "trivy":
        cmd = f"trivy image -q -f json -o {output_path} {image}"
    else:
        cmd = f"grype {image} -q -o json > {output_path}"
    result = run_command(cmd)
    return os.path.exists(output_path)

def extract_cves(path, tool):
    try:
        with open(path) as f:
            data = json.load(f)
    except:
        return []

    cves = []
    if tool == "trivy":
        for result in data.get("Results", []):
            for vuln in result.get("Vulnerabilities", []):
                cves.append({
                    "id": vuln["VulnerabilityID"],
                    "severity": vuln.get("Severity", "Unknown"),
                    "tool": "Trivy"
                })
    elif tool == "grype":
        for match in data.get("matches", []):
            vuln = match.get("vulnerability", {})
            cves.append({
                "id": vuln.get("id", "unknown"),
                "severity": vuln.get("severity", "Unknown"),
                "tool": "Grype"
            })
    return cves

def group_cves(cves):
    by_tool = {"Trivy": set(), "Grype": set()}
    details = {}

    for cve in cves:
        cid = cve["id"]
        details[cid] = cve
        by_tool[cve["tool"]].add(cid)

    shared = by_tool["Trivy"] & by_tool["Grype"]
    only_trivy = by_tool["Trivy"] - shared
    only_grype = by_tool["Grype"] - shared

    def group_by_severity(ids):
        sev_map = {"Critical": [], "High": [], "Medium": [], "Low": [], "Negligible": [], "Unknown": []}
        for cid in ids:
            sev = details[cid]["severity"]
            sev_map.setdefault(sev, []).append(cid)
        return sev_map

    return {
        "Trivy": group_by_severity(only_trivy),
        "Grype": group_by_severity(only_grype),
        "Shared": group_by_severity(shared),
        "summary": {
            "trivy_total": len(by_tool["Trivy"]),
            "grype_total": len(by_tool["Grype"]),
            "shared": len(shared),
            "only_trivy": len(only_trivy),
            "only_grype": len(only_grype),
        }
    }

def print_report(groups, trivy_ver, grype_ver):
    print(f"\nüîß Tool Versions:\n  Trivy: {trivy_ver}\n  Grype: {grype_ver}\n")
    print("üìä CLI Summary Report\n")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {groups['summary']['grype_total']:5} | {groups['summary']['only_grype']:11} | {groups['summary']['shared']:6}")
    print(f"Trivy      | {groups['summary']['trivy_total']:5} | {groups['summary']['only_trivy']:11} | {groups['summary']['shared']:6}\n")

    print("üîç CVEs by Severity\n")

    for label in ["Grype", "Trivy", "Shared"]:
        print(f"üî∏ {'Unique to ' + label if label != 'Shared' else 'Shared CVEs'}")
        for sev in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
            ids = groups[label].get(sev, [])
            if ids:
                print(f"  {sev} ({len(ids)}):")
                for cve in sorted(ids):
                    print(f"    - {cve}")
        print()

def generate_html(groups, trivy_ver, grype_ver, image):
    now = datetime.datetime.now().strftime("%Y-%m-%d")
    filename = f"{REPORT_DIR}/scan_report_{image.replace(':', '_')}_{now}.html"
    with open(filename, "w") as f:
        f.write(f"""<html><head><title>Scan Report for {image}</title>
<style>
body {{ font-family: Arial; margin: 20px; }}
h2 {{ border-bottom: 1px solid #ccc; }}
table {{ border-collapse: collapse; width: 100%; margin-top: 10px; }}
th, td {{ border: 1px solid #ccc; padding: 8px; text-align: left; }}
a {{ color: #007acc; }}
summary {{ font-weight: bold; cursor: pointer; }}
</style>
</head><body>
<h1>Scan Report for {image}</h1>
<p><strong>Trivy:</strong> {trivy_ver} &nbsp;|&nbsp; <strong>Grype:</strong> {grype_ver}</p>

<h2>Table of Contents</h2>
<ul>
  <li><a href="#summary">Summary</a></li>
  <li><a href="#grype">Unique to Grype</a></li>
  <li><a href="#trivy">Unique to Trivy</a></li>
  <li><a href="#shared">Shared CVEs</a></li>
</ul>

<h2 id="summary">Summary</h2>
<table>
<tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
<tr><td>Grype</td><td>{groups['summary']['grype_total']}</td><td>{groups['summary']['only_grype']}</td><td>{groups['summary']['shared']}</td></tr>
<tr><td>Trivy</td><td>{groups['summary']['trivy_total']}</td><td>{groups['summary']['only_trivy']}</td><td>{groups['summary']['shared']}</td></tr>
</table>
""")
        for label in ["Grype", "Trivy", "Shared"]:
            f.write(f"<h2 id='{label.lower()}'>{'Unique to ' + label if label != 'Shared' else 'Shared CVEs'}</h2>")
            for sev in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
                ids = groups[label].get(sev, [])
                if ids:
                    f.write(f"<h3>{sev} ({len(ids)})</h3><ul>")
                    for cve in sorted(ids):
                        f.write(f"<li><a href='https://nvd.nist.gov/vuln/detail/{cve}' target='_blank'>{cve}</a></li>")
                    f.write("</ul>")
        f.write(f"""
<details><summary>üìÑ Raw JSON (Trivy + Grype)</summary>
<pre>
Trivy: <a href="original_trivy.json" download>Download</a>
Grype: <a href="original_grype.json" download>Download</a>
</pre>
</details>
</body></html>""")
    return filename

def main():
    if len(sys.argv) != 2:
        print("Usage: scancompare <image> | --uninstall | --version")
        return

    arg = sys.argv[1]
    if arg in ("--version", "-v"):
        print(f"{SCRIPT_NAME} version {VERSION}")
        return
    if arg in ("--uninstall", "-uninstall"):
        os.remove(__file__)
        print("‚úÖ scancompare uninstalled.")
        return

    image = arg
    check_update()
    print(f"\nüì¶ scancompare version {VERSION}")
    trivy_ver = get_version("trivy")
    grype_ver = get_version("grype")

    print(f"\nüîπ Scanning with Trivy...\n   üì¶ Trivy version: {trivy_ver}")
    trivy_path = f"{REPORT_DIR}/original_trivy.json"
    trivy_ok = scan_with_tool("trivy", image, trivy_path)
    if not trivy_ok:
        print("‚ùå Trivy scan failed.")
        return

    print(f"    ‚úî Trivy scan saved to {trivy_path}")

    print(f"\nüîπ Scanning with Grype...\n   üì¶ Grype version: {grype_ver}")
    grype_path = f"{REPORT_DIR}/original_grype.json"
    grype_ok = scan_with_tool("grype", image, grype_path)
    if not grype_ok:
        print("‚ùå Grype scan failed.")
        return
    print(f"    ‚úî Grype scan saved to {grype_path}")

    trivy_data = extract_cves(trivy_path, "trivy")
    grype_data = extract_cves(grype_path, "grype")
    if not trivy_data and not grype_data:
        print("‚ùå No valid scan data found.")
        return

    all_cves = trivy_data + grype_data
    groups = group_cves(all_cves)

    print_report(groups, trivy_ver, grype_ver)

    html_file = generate_html(groups, trivy_ver, grype_ver, image)
    print(f"‚úÖ HTML report saved: {html_file}")

    open_html = input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").lower()
    if open_html == "y":
        webbrowser.open(f"file://{os.path.abspath(html_file)}")

if __name__ == "__main__":
    main()
