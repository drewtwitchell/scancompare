#!/usr/bin/env python3
import os
import sys
import json
import subprocess
import datetime
import tempfile
from pathlib import Path

VERSION = "1.5.4"
SCRIPT_NAME = "scancompare"
REMOTE_URL = f"https://raw.githubusercontent.com/drewtwitchell/scancompare/main/{SCRIPT_NAME}"

def run_cmd(cmd, capture_output=True):
    try:
        result = subprocess.run(cmd, shell=True, check=True, text=True,
                                stdout=subprocess.PIPE if capture_output else None)
        return result.stdout.strip() if capture_output else ""
    except subprocess.CalledProcessError as e:
        return ""

def get_tool_version(tool, json_flag=False):
    if json_flag:
        out = run_cmd(f"{tool} version -o json")
        try:
            data = json.loads(out)
            return data.get("version", "unknown")
        except:
            return "unknown"
    else:
        out = run_cmd(f"{tool} version")
        return next((line for line in out.splitlines() if "Version:" in line), "unknown").split()[-1]

def update_self():
    remote_version = run_cmd(f"curl -fsSL {REMOTE_URL} | grep 'VERSION ='", capture_output=True)
    if remote_version:
        latest = remote_version.split('=')[1].strip().strip('"')
        if latest != VERSION:
            print(f"🔄 New version available: {latest} (current: {VERSION})")
            print("✅ Updating scancompare...")
            script_content = run_cmd(f"curl -fsSL {REMOTE_URL}")
            with open(__file__, "w") as f:
                f.write(script_content)
            os.chmod(__file__, 0o755)
            print(f"✅ scancompare updated to version {latest}")
            sys.exit(0)
    else:
        print("⚠️ Could not determine remote version.")

def uninstall():
    print("🧹 Uninstalling scancompare...")
    os.remove(__file__)
    print("✅ scancompare removed.")
    sys.exit(0)

def scan_image(image, tool):
    filename = f"scan_reports/original_{tool}.json"
    if tool == "trivy":
        run_cmd(f"{tool} image -q -f json -o {filename} {image}", capture_output=False)
    else:
        run_cmd(f"{tool} -o json {image} > {filename}", capture_output=False)
    return filename

def extract_cves(filename):
    with open(filename) as f:
        data = json.load(f)

    cves = set()
    if "Results" in data:  # Trivy
        for result in data["Results"]:
            for vuln in result.get("Vulnerabilities", []):
                cves.add(vuln["VulnerabilityID"])
    elif "matches" in data:  # Grype
        for match in data["matches"]:
            cves.add(match["vulnerability"]["id"])
    return cves

def summarize_cves_by_severity(filename, tool):
    with open(filename) as f:
        data = json.load(f)

    severity_map = {}
    if "Results" in data:  # Trivy
        for result in data["Results"]:
            for vuln in result.get("Vulnerabilities", []):
                sev = vuln["Severity"].lower()
                severity_map.setdefault(sev, []).append(vuln["VulnerabilityID"])
    elif "matches" in data:  # Grype
        for match in data["matches"]:
            sev = match["vulnerability"]["severity"].lower()
            severity_map.setdefault(sev, []).append(match["vulnerability"]["id"])
    return severity_map

def generate_html_report(trivy_data, grype_data, shared, trivy_sev, grype_sev, tool_versions, image):
    now = datetime.datetime.now().strftime("%Y-%m-%d")
    filename = f"scan_reports/scan_report_{image.replace(':', '_')}_{now}.html"
    with open(filename, "w") as f:
        f.write(f"""<html>
<head>
    <title>Scan Report for {image}</title>
    <style>
        body {{ font-family: Arial, sans-serif; padding: 20px; }}
        h2 {{ border-bottom: 1px solid #ccc; }}
        ul {{ column-count: 2; }}
        .section {{ margin-bottom: 30px; }}
        .toc a {{ display: block; margin: 5px 0; }}
        details summary {{ cursor: pointer; font-weight: bold; }}
    </style>
    <script>
        function downloadPDF() {{
            window.print();
        }}
    </script>
</head>
<body>
<h1>Scan Report: {image}</h1>
<h3>Date: {now}</h3>
<h3>Tool Versions:</h3>
<ul>
    <li>Trivy: {tool_versions['trivy']}</li>
    <li>Grype: {tool_versions['grype']}</li>
</ul>
<button onclick="downloadPDF()">📄 Export as PDF</button>

<div class="section toc">
    <h3>🔗 Table of Contents</h3>
    <a href="#summary">📊 Summary</a>
    <a href="#unique-trivy">🔸 Unique to Trivy</a>
    <a href="#unique-grype">🔸 Unique to Grype</a>
    <a href="#shared">🔸 Shared CVEs</a>
    <a href="#raw">📦 Raw JSON</a>
</div>

<div class="section" id="summary">
    <h2>📊 CLI Summary Report</h2>
    <table border="1" cellpadding="5">
        <tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
        <tr><td>Trivy</td><td>{len(trivy_data)}</td><td>{len(trivy_data - grype_data)}</td><td>{len(shared)}</td></tr>
        <tr><td>Grype</td><td>{len(grype_data)}</td><td>{len(grype_data - trivy_data)}</td><td>{len(shared)}</td></tr>
    </table>
</div>

""")
        def write_cve_section(title, cveset, sevdict, anchor):
            f.write(f'<div class="section" id="{anchor}"><h2>{title}</h2>')
            for sev in ['critical', 'high', 'medium', 'low', 'negligible', 'unknown']:
                vulns = [cve for cve in sevdict.get(sev, []) if cve in cveset]
                if vulns:
                    f.write(f"<h4>{sev.title()} ({len(vulns)}):</h4><ul>")
                    for cve in sorted(set(vulns)):
                        f.write(f'<li><a href="https://nvd.nist.gov/vuln/detail/{cve}" target="_blank">{cve}</a></li>')
                    f.write("</ul>")
            f.write("</div>")

        write_cve_section("🔸 Unique to Trivy", trivy_data - grype_data, trivy_sev, "unique-trivy")
        write_cve_section("🔸 Unique to Grype", grype_data - trivy_data, grype_sev, "unique-grype")
        write_cve_section("🔸 Shared CVEs", shared, trivy_sev, "shared")

        f.write(f"""
<div class="section" id="raw">
    <h2>📦 Raw JSON</h2>
    <details><summary>Trivy Output</summary><pre>{json.dumps(trivy_sev, indent=2)}</pre></details>
    <details><summary>Grype Output</summary><pre>{json.dumps(grype_sev, indent=2)}</pre></details>
</div>
</body></html>
""")
    print(f"✅ HTML report saved to {filename}")
    if input("📁 Would you like to open the HTML report in your browser? (y/n): ").strip().lower() == "y":
        os.system(f"open {filename}")

def main():
    if len(sys.argv) < 2:
        print("Usage: scancompare <image>")
        sys.exit(1)
    if sys.argv[1] in ("--uninstall", "uninstall"):
        uninstall()
    if sys.argv[1] in ("--version", "-v"):
        print(f"{SCRIPT_NAME} version {VERSION}")
        sys.exit(0)

    update_self()
    print(f"\n📦 scancompare version {VERSION}")

    image = sys.argv[1]
    os.makedirs("scan_reports", exist_ok=True)

    print("🔹 Scanning with Trivy...")
    trivy_version = get_tool_version("trivy")
    print(f"   📦 Trivy version: {trivy_version}")
    trivy_file = scan_image(image, "trivy")

    print("🔹 Scanning with Grype...")
    grype_version = get_tool_version("grype", json_flag=True)
    print(f"   📦 Grype version: {grype_version}")
    grype_file = scan_image(image, "grype")

    trivy_data = extract_cves(trivy_file)
    grype_data = extract_cves(grype_file)
    shared = trivy_data & grype_data

    print("\n📊 CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {len(grype_data)}   | {len(grype_data - trivy_data)}             | {len(shared)}")
    print(f"Trivy      | {len(trivy_data)}   | {len(trivy_data - grype_data)}             | {len(shared)}")

    trivy_sev = summarize_cves_by_severity(trivy_file, "trivy")
    grype_sev = summarize_cves_by_severity(grype_file, "grype")

    print("\n🔍 CVEs by Severity")
    def print_group(title, cves, sevs):
        print(f"\n{title}")
        for level in ['critical', 'high', 'medium', 'low', 'negligible', 'unknown']:
            items = [cve for cve in sevs.get(level, []) if cve in cves]
            if items:
                print(f"  {level.title()} ({len(items)}):")
                for cve in sorted(set(items)):
                    print(f"    - {cve}")

    print_group("🔸 Unique to Grype", grype_data - trivy_data, grype_sev)
    print_group("🔸 Unique to Trivy", trivy_data - grype_data, trivy_sev)
    print_group("🔸 Shared CVEs", shared, trivy_sev)

    generate_html_report(trivy_data, grype_data, shared, trivy_sev, grype_sev, {
        "trivy": trivy_version,
        "grype": grype_version
    }, image)

if __name__ == "__main__":
    main()
