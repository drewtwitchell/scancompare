#!/bin/bash
VERSION="1.0.9"
SCRIPT_NAME="scancompare"
SCRIPT_PATH="$HOME/.local/bin/$SCRIPT_NAME"
REPO_USER="drewtwitchell"
REPO_NAME="scancompare"
REMOTE_URL="https://raw.githubusercontent.com/$REPO_USER/$REPO_NAME/main/$SCRIPT_NAME"

if [[ "$1" == "--no-update" ]]; then SKIP_UPDATE=true; shift; else SKIP_UPDATE=false; fi

TARGET="$1"
ORIGINAL_TARGET="$TARGET"
REPORT_DIR="scan_reports"
GRYPE_OUTPUT="$REPORT_DIR/grype_output.json"
TRIVY_OUTPUT="$REPORT_DIR/trivy_output.json"
GRYPE_OUTPUT_UPGRADED="$REPORT_DIR/grype_upgraded_output.json"
TRIVY_OUTPUT_UPGRADED="$REPORT_DIR/trivy_upgraded_output.json"
DIFF_JSON="$REPORT_DIR/diff_report.json"
DIFF_JSON_UPGRADED="$REPORT_DIR/diff_report_upgraded.json"
HTML_REPORT="$REPORT_DIR/scan_report.html"
UPGRADED_IMAGE=""

step() { echo -e "\nüîπ $1"; }
done_msg() { echo "    ‚úî $1"; }

get_remote_version() {
  curl -fsSL "$REMOTE_URL" | grep 'VERSION=' | cut -d'"' -f2
}

auto_update_check() {
  remote_ver=$(get_remote_version)
  if [[ "$VERSION" != "$remote_ver" ]]; then
    echo "üîÑ New version available: $remote_ver (current: $VERSION)"
    self_update "$@"
  fi
}

self_update() {
  tmp_file=$(mktemp)
  echo "üì• Auto-updating from $REMOTE_URL"
  curl -fsSL "$REMOTE_URL" -o "$tmp_file" || { echo "‚ùå Failed to fetch update."; exit 1; }
  remote_version=$(grep '^VERSION=' "$tmp_file" | cut -d'"' -f2)
  echo "üåê Fetched remote version: $remote_version"

  if [[ "$remote_version" == "$VERSION" ]]; then
    rm -f "$tmp_file"
    return
  fi

  echo "üîÑ New version available: $remote_version (current: $VERSION)"
  chmod +x "$tmp_file"
  mv "$tmp_file" "$SCRIPT_PATH"
  echo "‚úÖ scancompare updated to version $remote_version"
  exec "$SCRIPT_PATH" --no-update "$@"
}

check_tools() {
  for tool in grype trivy jq; do
    if ! command -v $tool &>/dev/null; then
      echo "üì¶ Installing $tool..."
      if command -v brew &>/dev/null; then brew install $tool
      else echo "‚ùå Please install $tool manually"; exit 1; fi
    fi
  done
}

run_scans() {
  local output_prefix=$1
  mkdir -p "$REPORT_DIR"

  step "Scanning with Trivy..."
  trivy image --format json --output "${output_prefix}_trivy.json" "$TARGET"
  done_msg "Trivy scan saved to ${output_prefix}_trivy.json"

  step "Scanning with Grype..."
  grype "$TARGET" -o json > "${output_prefix}_grype.json"
  done_msg "Grype scan saved to ${output_prefix}_grype.json"
}

compare_results() {
  local output_prefix=$1
  local grype_json="${output_prefix}_grype.json"
  local trivy_json="${output_prefix}_trivy.json"
  local diff_output="${output_prefix}_diff.json"

  step "Comparing scan results..."
  grype_cves=$(jq -r '.matches[].vulnerability.id' "$grype_json" | sort | uniq)
  trivy_cves=$(jq -r '[.Results[].Vulnerabilities[]?.VulnerabilityID] | flatten | .[]' "$trivy_json" | sort | uniq)

  echo "$grype_cves" > "$REPORT_DIR/grype.txt"
  echo "$trivy_cves" > "$REPORT_DIR/trivy.txt"
  only_grype=$(comm -23 "$REPORT_DIR/grype.txt" "$REPORT_DIR/trivy.txt")
  only_trivy=$(comm -13 "$REPORT_DIR/grype.txt" "$REPORT_DIR/trivy.txt")
  in_both=$(comm -12 "$REPORT_DIR/grype.txt" "$REPORT_DIR/trivy.txt")

  jq -n \
    --argjson only_in_grype "$(jq -R -s -c 'split("\n") | map(select(. != ""))' <<< "$only_grype")" \
    --argjson only_in_trivy "$(jq -R -s -c 'split("\n") | map(select(. != ""))' <<< "$only_trivy")" \
    --argjson in_both "$(jq -R -s -c 'split("\n") | map(select(. != ""))' <<< "$in_both")" '
    def count(a): a | length;
    {
      summary: {
        total_grype: (count($only_in_grype) + count($in_both)),
        total_trivy: (count($only_in_trivy) + count($in_both)),
        shared: count($in_both),
        only_in_grype: count($only_in_grype),
        only_in_trivy: count($only_in_trivy)
      },
      unique_to_grype: $only_in_grype,
      unique_to_trivy: $only_in_trivy,
      common_vulnerabilities: $in_both,
      actions: {
        suggestion: "Prioritize shared vulnerabilities and consider upgrading base image if available."
      }
    }' > "$diff_output"

  done_msg "Diff report saved to $diff_output"
}

generate_html_report() {
  local original="${REPORT_DIR}/scan_report_original.json"
  local upgraded="${REPORT_DIR}/scan_report_upgraded.json"
  cp "$REPORT_DIR/original_diff.json" "$original"
  [[ -f "$REPORT_DIR/upgraded_diff.json" ]] && cp "$REPORT_DIR/upgraded_diff.json" "$upgraded"

  local timestamp=$(date +"%Y-%m-%d")
  HTML_REPORT="$REPORT_DIR/scan_report_${ORIGINAL_TARGET//[\/:]/_}_$timestamp.html"

  {
    echo "<!DOCTYPE html><html><head><meta charset='UTF-8'>"
    echo "<title>Scan Report - $ORIGINAL_TARGET</title>"
    echo "<style>body { font-family: sans-serif; padding: 20px; max-width: 960px; margin: auto; }
      h1,h2,h3 { color: #2c3e50; }
      table { border-collapse: collapse; width: 100%; margin-top: 1em; }
      th,td { border: 1px solid #ccc; padding: 8px; text-align: left; }
      pre { display: none; background: #f8f8f8; padding: 10px; border-radius: 8px; overflow-x: auto; }
      button { margin-top: 10px; padding: 6px 12px; background: #2c3e50; color: #fff; border: none; border-radius: 4px; cursor: pointer; }
    </style>
    <script>
      function toggle(id) {
        const el = document.getElementById(id);
        el.style.display = (el.style.display === 'none' || !el.style.display) ? 'block' : 'none';
      }
      function savePDF() { window.print(); }
    </script>
    </head><body>
    <h1>Vulnerability Report for <code>$ORIGINAL_TARGET</code></h1>
    <p>Date: $timestamp</p>
    <button onclick='savePDF()'>üìÑ Download as PDF</button>"

    echo "<h2>üß™ Original Image</h2>"
    jq -r '.summary | "<table><tr><th>Tool</th><th>Total</th><th>Only Tool</th><th>Shared</th></tr>" +
      "<tr><td>Grype</td><td>\(.total_grype)</td><td>\(.only_in_grype)</td><td>\(.shared)</td></tr>" +
      "<tr><td>Trivy</td><td>\(.total_trivy)</td><td>\(.only_in_trivy)</td><td>\(.shared)</td></tr></table>"' "$original"

    echo "<button onclick=\"toggle('raw_original')\">Toggle Original Raw JSON</button>
    <pre id='raw_original'>"
    cat "$original"
    echo "</pre>"

    if [[ -f "$upgraded" ]]; then
      echo "<h2>üîÅ Upgraded Base Image</h2>"
      jq -r '.summary | "<table><tr><th>Tool</th><th>Total</th><th>Only Tool</th><th>Shared</th></tr>" +
        "<tr><td>Grype</td><td>\(.total_grype)</td><td>\(.only_in_grype)</td><td>\(.shared)</td></tr>" +
        "<tr><td>Trivy</td><td>\(.total_trivy)</td><td>\(.only_in_trivy)</td><td>\(.shared)</td></tr></table>"' "$upgraded"

      echo "<button onclick=\"toggle('raw_upgraded')\">Toggle Upgraded Raw JSON</button>
      <pre id='raw_upgraded'>"
      cat "$upgraded"
      echo "</pre>"
    fi

    echo "</body></html>"
  } > "$HTML_REPORT"

  echo "‚úÖ HTML report saved: $HTML_REPORT"
}

open_html() {
  echo "üìÑ Opening report..."
  case "$OSTYPE" in
    darwin*) open "$HTML_REPORT" ;;
    linux*) xdg-open "$HTML_REPORT" ;;
    *) echo "View at: $HTML_REPORT" ;;
  esac
}

get_base_image() {
  grep '^FROM' Dockerfile | head -n 1 | awk '{print $2}'
}

check_for_base_image_upgrade() {
  step "Checking for base image upgrade..."
  base_image=$(get_base_image)
  image_name=$(echo "$base_image" | cut -d':' -f1)
  current_tag=$(echo "$base_image" | cut -d':' -f2)
  tags=$(curl -s "https://registry.hub.docker.com/v1/repositories/$image_name/tags" | jq -r '.[].name')
  latest=$(echo "$tags" | grep -E '^[0-9]+\.[0-9]+' | sort -V | tail -1)

  if [[ "$latest" != "$current_tag" ]]; then
    echo "‚¨ÜÔ∏è  Upgrade found: $current_tag ‚Üí $latest"
    sed -i.bak "s|$base_image|$image_name:$latest|" Dockerfile
    docker build -t "${TARGET}-upgraded" .
    UPGRADED_IMAGE="${TARGET}-upgraded"
    echo "‚úÖ Rebuilt upgraded image: $UPGRADED_IMAGE"
  else
    echo "‚úÖ Base image is already latest."
  fi
}

main() {
  [[ -z "$TARGET" ]] && echo "‚ùå Usage: scancompare <image>" && exit 1
  echo "üîç Starting vulnerability scan for image: $TARGET"

  check_tools
  TARGET="$ORIGINAL_TARGET"
  run_scans "$REPORT_DIR/original"
  compare_results "$REPORT_DIR/original"

  if [[ -f Dockerfile ]]; then
    check_for_base_image_upgrade
    if [[ -n "$UPGRADED_IMAGE" ]]; then
      TARGET="$UPGRADED_IMAGE"
      run_scans "$REPORT_DIR/upgraded"
      compare_results "$REPORT_DIR/upgraded"
    fi
  fi

  generate_html_report
  open_html
}

[[ "$1" == "update" ]] && self_update "$@" && exit 0
$SKIP_UPDATE || auto_update_check "$@"

main "$@"
