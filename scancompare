#!/usr/bin/env python3
import os
import sys
import json
import subprocess
import datetime
from pathlib import Path

VERSION = "1.5.0"
SCRIPT_NAME = "scancompare"
INSTALL_PATH = str(Path.home() / ".local" / "bin" / SCRIPT_NAME)
REPO_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"

def run_command(cmd):
    result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    return result.stdout.strip()

def get_tool_version(tool):
    try:
        output = run_command(f"{tool} version")
        if tool == "trivy":
            for line in output.splitlines():
                if "Version:" in line:
                    return line.split(":")[1].strip()
        elif tool == "grype":
            for line in output.splitlines():
                if "Version:" in line:
                    return line.split(":", 1)[1].strip()
                elif line.lower().startswith("grype"):
                    parts = line.split()
                    if len(parts) > 1:
                        return parts[1]
        return output.split()[1] if output else "unknown"
    except:
        return "unknown"

def self_update():
    try:
        remote_script = run_command(f"curl -fsSL {REPO_URL}")
        latest = None
        for line in remote_script.splitlines():
            if line.strip().startswith("VERSION="):
                latest = line.strip().split("=")[1].strip('"')
                break

        if not latest:
            print("‚ö†Ô∏è Could not determine remote version.")
            return

        if latest != VERSION:
            print(f"üîÑ New version available: {latest} (current: {VERSION})")
            with open(INSTALL_PATH, "w") as f:
                f.write(remote_script)
            os.chmod(INSTALL_PATH, 0o755)
            print(f"‚úÖ scancompare updated to version {latest}")
            os.execv(INSTALL_PATH, [INSTALL_PATH] + sys.argv[1:])
    except Exception as e:
        print(f"‚ö†Ô∏è Update check failed: {e}")

def main():
    if len(sys.argv) < 2:
        print("‚ùå Usage: scancompare <image>")
        sys.exit(1)

    if sys.argv[1] in ("--uninstall", "uninstall"):
        os.remove(INSTALL_PATH)
        print("üßπ scancompare has been uninstalled.")
        sys.exit(0)

    if sys.argv[1] in ("--version", "-version"):
        print(f"{SCRIPT_NAME} version {VERSION}")
        sys.exit(0)

    target = sys.argv[1]

    self_update()

    today = datetime.datetime.now().strftime("%Y-%m-%d")
    report_dir = "scan_reports"
    os.makedirs(report_dir, exist_ok=True)

    trivy_out = os.path.join(report_dir, "original_trivy.json")
    grype_out = os.path.join(report_dir, "original_grype.json")
    diff_out = os.path.join(report_dir, "original_diff.json")
    html_report = os.path.join(report_dir, f"scan_report_{target.replace(':', '_')}_{today}.html")

    print(f"\nüîπ Scanning with Trivy...")
    trivy_version = get_tool_version("trivy")
    print(f"   üì¶ Trivy version: {trivy_version}")
    os.system(f"trivy image --scanners vuln --format json --output {trivy_out} {target}")
    print(f"   ‚úî Trivy scan saved to {trivy_out}")

    print(f"\nüîπ Scanning with Grype...")
    grype_version = get_tool_version("grype")
    print(f"   üì¶ Grype version: {grype_version}")
    os.system(f"grype {target} -o json > {grype_out}")
    print(f"   ‚úî Grype scan saved to {grype_out}")

    print(f"\nüîß Tool Versions:\n  Trivy: {trivy_version}\n  Grype: {grype_version}")

    trivy_cves = extract_cves_trivy(trivy_out)
    grype_cves = extract_cves_grype(grype_out)

    summary, breakdown = compare_cves(trivy_cves, grype_cves)

    print("\nüìä CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {summary['grype_total']:<5} | {summary['only_grype']:<13} | {summary['shared']}")
    print(f"Trivy      | {summary['trivy_total']:<5} | {summary['only_trivy']:<13} | {summary['shared']}")

    print("\nüîç CVEs by Severity")

    for category in ["only_grype", "only_trivy", "shared"]:
        print(f"\nüî∏ {category.replace('_', ' ').title()}")
        for severity in ["CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE", "UNKNOWN"]:
            cves = breakdown[category].get(severity, [])
            if cves:
                print(f"  {severity.title()} ({len(cves)}):")
                for cve in sorted(set(cves)):
                    print(f"    - {cve}")

    generate_html(html_report, target, today, summary, breakdown, trivy_version, grype_version)
    print(f"\n‚úÖ HTML report saved to {html_report}")
    if input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").strip().lower() == "y":
        os.system(f"open {html_report}" if sys.platform == "darwin" else f"xdg-open {html_report}")

def extract_cves_trivy(path):
    try:
        with open(path) as f:
            data = json.load(f)
        return [{"id": v["VulnerabilityID"], "severity": v["Severity"]} 
                for result in data.get("Results", []) 
                for v in result.get("Vulnerabilities", [])]
    except:
        return []

def extract_cves_grype(path):
    try:
        with open(path) as f:
            data = json.load(f)
        return [{"id": m["vulnerability"]["id"], "severity": m["vulnerability"]["severity"]}
                for m in data.get("matches", [])]
    except:
        return []

def compare_cves(trivy, grype):
    def group_by_severity(cves):
        grouped = {}
        for item in cves:
            sev = item["severity"].upper()
            grouped.setdefault(sev, []).append(item["id"])
        return grouped

    t_ids = set([x["id"] for x in trivy])
    g_ids = set([x["id"] for x in grype])
    shared = t_ids & g_ids
    only_trivy = t_ids - g_ids
    only_grype = g_ids - t_ids

    def filter_and_group(cve_list, ids):
        return group_by_severity([cve for cve in cve_list if cve["id"] in ids])

    breakdown = {
        "shared": filter_and_group(trivy + grype, shared),
        "only_trivy": filter_and_group(trivy, only_trivy),
        "only_grype": filter_and_group(grype, only_grype),
    }

    summary = {
        "shared": len(shared),
        "only_trivy": len(only_trivy),
        "only_grype": len(only_grype),
        "trivy_total": len(t_ids),
        "grype_total": len(g_ids)
    }

    return summary, breakdown

def generate_html(path, image, date, summary, breakdown, trivy_version, grype_version):
    def cves_to_html(title, data):
        html = f"<h2 id='{title.lower().replace(' ', '_')}'>{title}</h2>"
        for severity in ["CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE", "UNKNOWN"]:
            cves = data.get(severity, [])
            if cves:
                html += f"<h3>{severity.title()} ({len(cves)})</h3><ul>"
                for cve in sorted(set(cves)):
                    html += f"<li><a href='https://nvd.nist.gov/vuln/detail/{cve}' target='_blank'>{cve}</a></li>"
                html += "</ul>"
        return html

    with open(path, "w") as f:
        f.write(f"""<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Scan Report</title>
<style>body{{font-family:sans-serif;padding:20px;max-width:900px;margin:auto}}h1,h2,h3{{color:#2c3e50}}table{{border-collapse:collapse;width:100%;margin-top:1em}}th,td{{border:1px solid #ccc;padding:8px;text-align:left}}ul{{list-style-type:square}}pre{{background:#f4f4f4;padding:10px;border-radius:8px;overflow:auto;}}</style>
<script>function toggle(id){{var e=document.getElementById(id);e.style.display=(e.style.display==='none')?'block':'none';}}</script>
</head><body>
<h1>Scan Report for <code>{image}</code></h1>
<p><strong>Date:</strong> {date}</p>
<p><strong>Trivy version:</strong> {trivy_version} | <strong>Grype version:</strong> {grype_version}</p>
<table><tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
<tr><td>Grype</td><td>{summary['grype_total']}</td><td>{summary['only_grype']}</td><td>{summary['shared']}</td></tr>
<tr><td>Trivy</td><td>{summary['trivy_total']}</td><td>{summary['only_trivy']}</td><td>{summary['shared']}</td></tr>
</table>
<p><a href="#only_grype">Unique to Grype</a> | <a href="#only_trivy">Unique to Trivy</a> | <a href="#shared">Shared CVEs</a></p>
{cves_to_html("Unique to Grype", breakdown["only_grype"])}
{cves_to_html("Unique to Trivy", breakdown["only_trivy"])}
{cves_to_html("Shared CVEs", breakdown["shared"])}
<button onclick="toggle('json')">Toggle Raw JSON</button>
<pre id='json' style='display:none'>{json.dumps({"summary": summary, "breakdown": breakdown}, indent=2)}</pre>
</body></html>""")

if __name__ == "__main__":
    main()
