#!/usr/bin/env python3
import subprocess
import json
import os
import sys
import shutil
import tempfile
import datetime
from pathlib import Path

VERSION = "1.4.3"
SCRIPT_NAME = "scancompare"
SCRIPT_PATH = Path.home() / ".local" / "bin" / SCRIPT_NAME
REMOTE_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"

REPORT_DIR = Path("scan_reports")
REPORT_DIR.mkdir(exist_ok=True)
TRIVY_JSON = REPORT_DIR / "original_trivy.json"
GRYPE_JSON = REPORT_DIR / "original_grype.json"
DIFF_JSON = REPORT_DIR / "original_diff.json"

def run_cmd(cmd):
    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    return result.stdout.strip()

def get_tool_version(tool):
    try:
        version_output = run_cmd([tool, "--version"])
        return version_output.split()[1] if version_output else "Unknown"
    except:
        return "Unknown"

def fetch_remote_version():
    try:
        output = run_cmd(["curl", "-fsSL", REMOTE_URL])
        for line in output.splitlines():
            if line.startswith("VERSION"):
                return line.split("=")[1].strip().replace('"', '')
    except:
        return None

def self_update():
    remote_version = fetch_remote_version()
    if not remote_version or remote_version == VERSION:
        return
    print(f"üîÑ New version available: {remote_version} (current: {VERSION})")
    try:
        new_script = run_cmd(["curl", "-fsSL", REMOTE_URL])
        if new_script:
            SCRIPT_PATH.write_text(new_script)
            SCRIPT_PATH.chmod(0o755)
            print(f"‚úÖ scancompare updated to version {remote_version}")
            os.execv(SCRIPT_PATH, [str(SCRIPT_PATH)] + sys.argv[1:])
    except Exception as e:
        print(f"‚ùå Auto-update failed: {e}")

def uninstall():
    print("üßπ Uninstalling scancompare...")
    try:
        os.remove(SCRIPT_PATH)
        print("‚úÖ scancompare removed from ~/.local/bin")
    except:
        print("‚ö†Ô∏è scancompare was not found or could not be removed.")
    sys.exit(0)

def scan_with_trivy(image):
    print("üîπ Scanning with Trivy...")
    subprocess.run(["trivy", "image", "--scanners", "vuln", "--format", "json", "--output", TRIVY_JSON, image])
    print(f"    ‚úî Trivy scan saved to {TRIVY_JSON}")

def scan_with_grype(image):
    print("üîπ Scanning with Grype...")
    with open(GRYPE_JSON, "w") as f:
        subprocess.run(["grype", image, "-o", "json"], stdout=f)
    print(f"    ‚úî Grype scan saved to {GRYPE_JSON}")

def extract_cves(filepath, tool):
    try:
        with open(filepath) as f:
            data = json.load(f)
        if tool == "trivy":
            vulns = [
                {"id": v["VulnerabilityID"], "severity": v["Severity"]}
                for result in data.get("Results", [])
                for v in result.get("Vulnerabilities", [])
            ]
        else:
            vulns = [
                {"id": match["vulnerability"]["id"], "severity": match["vulnerability"]["severity"]}
                for match in data.get("matches", [])
            ]
        return vulns
    except:
        return []

def group_by_severity(cves):
    grouped = {}
    for item in cves:
        sev = item["severity"]
        grouped.setdefault(sev, []).append(item["id"])
    return grouped

def compare_cves(trivy, grype):
    t_ids = {v["id"] for v in trivy}
    g_ids = {v["id"] for v in grype}
    shared = t_ids & g_ids
    only_t = t_ids - g_ids
    only_g = g_ids - t_ids

    def filter_ids(source, ids):
        return [v for v in source if v["id"] in ids]

    return {
        "shared": group_by_severity(filter_ids(trivy, shared)),
        "trivy_only": group_by_severity(filter_ids(trivy, only_t)),
        "grype_only": group_by_severity(filter_ids(grype, only_g))
    }

def print_cli_report(summary, trivy_version, grype_version):
    print(f"\nüîß Tool Versions:\n  Trivy: {trivy_version}\n  Grype: {grype_version}")
    print("\nüìä CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {summary['grype_total']:<5} | {summary['grype_only_count']:<13} | {summary['shared_count']}")
    print(f"Trivy      | {summary['trivy_total']:<5} | {summary['trivy_only_count']:<13} | {summary['shared_count']}")

def print_grouped_cves(grouped, label):
    print(f"\nüî∏ {label}")
    for severity in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
        ids = grouped.get(severity, [])
        if ids:
            print(f"  {severity} ({len(ids)}):")
            for cve in sorted(set(ids)):
                print(f"    - {cve}")

def generate_html_report(summary, trivy_version, grype_version, timestamp, image):
    html_path = REPORT_DIR / f"scan_report_{image.replace('/', '_').replace(':', '_')}_{timestamp}.html"
    with open(html_path, "w") as f:
        f.write(f"""<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Scan Report</title>
        <style>body{{font-family:sans-serif;padding:20px;max-width:900px;margin:auto}}
        h1,h2,h3{{color:#2c3e50}} pre{{background:#f4f4f4;padding:10px;border-radius:8px;overflow:auto;}}
        button{{margin:10px 0;padding:6px 10px;background:#2c3e50;color:#fff;border:none;border-radius:5px;cursor:pointer}}
        table{{border-collapse:collapse;width:100%;margin-top:1em}} th,td{{border:1px solid #ccc;padding:8px;text-align:left}}
        ul{{list-style-type:square;margin-left:20px}}</style>
        <script>function toggle(id){{var el=document.getElementById(id);el.style.display=(el.style.display==='none')?'block':'none';}}
        function savePDF(){{window.print();}}</script></head><body>
        <h1>Scan Report for <code>{image}</code></h1>
        <p><strong>Date:</strong> {timestamp}</p>
        <p><strong>Trivy Version:</strong> {trivy_version} &nbsp;&nbsp; <strong>Grype Version:</strong> {grype_version}</p>
        <button onclick='savePDF()'>üìÑ Download as PDF</button>
        <h2>Summary</h2>
        <table><tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
        <tr><td>Grype</td><td>{summary['grype_total']}</td><td>{summary['grype_only_count']}</td><td>{summary['shared_count']}</td></tr>
        <tr><td>Trivy</td><td>{summary['trivy_total']}</td><td>{summary['trivy_only_count']}</td><td>{summary['shared_count']}</td></tr></table>
        """)

        for label, data in [
            ("Unique to Grype", summary["grype_only"]),
            ("Unique to Trivy", summary["trivy_only"]),
            ("Shared CVEs", summary["shared"])]:
            f.write(f"<h2>{label}</h2>")
            for severity in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
                ids = data.get(severity, [])
                if ids:
                    f.write(f"<h3>{severity} ({len(ids)})</h3><ul>")
                    for cve in sorted(set(ids)):
                        f.write(f"<li>{cve}</li>")
                    f.write("</ul>")

        f.write(f"""<button onclick="toggle('raw')">Toggle Raw JSON</button>
        <pre id="raw" style="display:none;">""")
        with open(DIFF_JSON) as j:
            f.write(json.dumps(json.load(j), indent=2))
        f.write("</pre></body></html>")
    print(f"\n‚úÖ HTML report saved to {html_path}")
    return html_path

def prompt_open_html(path):
    choice = input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").lower()
    if choice == "y":
        subprocess.run(["open" if sys.platform == "darwin" else "xdg-open", str(path)])

def main():
    if "--version" in sys.argv:
        print(f"{SCRIPT_NAME} version {VERSION}")
        sys.exit(0)
    if "uninstall" in sys.argv:
        uninstall()
    if len(sys.argv) < 2:
        print("‚ùå Usage: scancompare <image>")
        sys.exit(1)

    self_update()

    image = sys.argv[1]
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d")
    scan_with_trivy(image)
    scan_with_grype(image)

    trivy_cves = extract_cves(TRIVY_JSON, "trivy")
    grype_cves = extract_cves(GRYPE_JSON, "grype")
    grouped = compare_cves(trivy_cves, grype_cves)

    summary = {
        "trivy_total": len(trivy_cves),
        "grype_total": len(grype_cves),
        "shared_count": sum(len(v) for v in grouped["shared"].values()),
        "trivy_only_count": sum(len(v) for v in grouped["trivy_only"].values()),
        "grype_only_count": sum(len(v) for v in grouped["grype_only"].values()),
        "trivy_only": grouped["trivy_only"],
        "grype_only": grouped["grype_only"],
        "shared": grouped["shared"]
    }

    trivy_ver = get_tool_version("trivy")
    grype_ver = get_tool_version("grype")

    print_cli_report(summary, trivy_ver, grype_ver)
    print_grouped_cves(grouped["grype_only"], "Unique to Grype")
    print_grouped_cves(grouped["trivy_only"], "Unique to Trivy")
    print_grouped_cves(grouped["shared"], "Shared CVEs")

    html_path = generate_html_report(summary, trivy_ver, grype_ver, timestamp, image)
    prompt_open_html(html_path)

if __name__ == "__main__":
    main()
