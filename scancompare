#!/usr/bin/env python3

import os
import sys
import json
import subprocess
import datetime
import shutil
import tempfile
from pathlib import Path

VERSION = "1.4.1"
SCRIPT_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"
SCRIPT_PATH = Path.home() / ".local" / "bin" / "scancompare"
REPORT_DIR = Path("scan_reports")
REPORT_DIR.mkdir(exist_ok=True)

def run(cmd, capture_output=False):
    result = subprocess.run(cmd, shell=True, text=True, capture_output=capture_output)
    if result.returncode != 0:
        print(f"‚ùå Error running: {cmd}")
        print(result.stderr)
        sys.exit(1)
    return result.stdout.strip() if capture_output else None

def get_tool_version(tool):
    try:
        if tool == "trivy":
            return run("trivy --version", True).splitlines()[0]
        elif tool == "grype":
            return run("grype version", True).splitlines()[0]
    except Exception:
        return "Unknown"

def auto_update():
    try:
        remote_script = run(f"curl -fsSL {SCRIPT_URL}", capture_output=True)
        remote_version = None
        for line in remote_script.splitlines():
            if line.startswith("VERSION"):
                remote_version = line.split("=")[1].strip().strip('"')
                break
        if remote_version and remote_version != VERSION:
            print(f"üîÑ New version available: {remote_version} (current: {VERSION})")
            tmp = tempfile.NamedTemporaryFile(delete=False)
            tmp.write(remote_script.encode())
            tmp.close()
            os.chmod(tmp.name, 0o755)
            shutil.copy(tmp.name, SCRIPT_PATH)
            print(f"‚úÖ scancompare updated to version {remote_version}")
            os.execv(SCRIPT_PATH, [str(SCRIPT_PATH)] + sys.argv[1:])
    except Exception as e:
        print(f"‚ö†Ô∏è Auto-update failed: {e}")

def ensure_tools():
    for tool in ["trivy", "grype", "jq"]:
        if shutil.which(tool) is None:
            print(f"‚ùå Required tool '{tool}' not found. Please install it.")
            sys.exit(1)

def save_json(output, filename):
    with open(REPORT_DIR / filename, "w") as f:
        f.write(output)

def run_scans(image):
    print("üîπ Scanning with Trivy...")
    trivy_out = run(f"trivy image --scanners vuln --format json {image}", capture_output=True)
    save_json(trivy_out, "original_trivy.json")

    print("üîπ Scanning with Grype...")
    grype_out = run(f"grype {image} -o json", capture_output=True)
    save_json(grype_out, "original_grype.json")

def parse_vulns(trivy_file, grype_file):
    with open(trivy_file) as f:
        trivy_json = json.load(f)
    with open(grype_file) as f:
        grype_json = json.load(f)

    trivy_cves = {v["VulnerabilityID"]: v["Severity"] for r in trivy_json.get("Results", []) for v in r.get("Vulnerabilities", []) if "VulnerabilityID" in v}
    grype_cves = {m["vulnerability"]["id"]: m["vulnerability"]["severity"] for m in grype_json.get("matches", [])}

    shared = set(trivy_cves) & set(grype_cves)
    only_trivy = set(trivy_cves) - set(grype_cves)
    only_grype = set(grype_cves) - set(trivy_cves)

    def group_by_severity(cve_dict, keys):
        out = {}
        for k in keys:
            sev = cve_dict.get(k, "Unknown").capitalize()
            out.setdefault(sev, []).append(k)
        return out

    return {
        "trivy": group_by_severity(trivy_cves, trivy_cves),
        "grype": group_by_severity(grype_cves, grype_cves),
        "shared": group_by_severity(trivy_cves, shared),
        "only_trivy": group_by_severity(trivy_cves, only_trivy),
        "only_grype": group_by_severity(grype_cves, only_grype),
        "counts": {
            "trivy": len(trivy_cves),
            "grype": len(grype_cves),
            "shared": len(shared),
            "only_trivy": len(only_trivy),
            "only_grype": len(only_grype)
        }
    }

def print_terminal_summary(data, trivy_version, grype_version):
    print("\nüìä CLI Summary Report")
    print(f"üîß {trivy_version}")
    print(f"üîß {grype_version}")
    print("\nTool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {data['counts']['grype']}    | {data['counts']['only_grype']}           | {data['counts']['shared']}")
    print(f"Trivy      | {data['counts']['trivy']}    | {data['counts']['only_trivy']}           | {data['counts']['shared']}\n")

    def display_group(title, grouped):
        print(f"üî∏ {title}")
        for sev in sorted(grouped.keys(), reverse=True):
            print(f"  {sev}: {len(grouped[sev])}")
            for cve in grouped[sev]:
                print(f"    - {cve}")
        print()

    display_group("Shared CVEs", data["shared"])
    display_group("Unique to Grype", data["only_grype"])
    display_group("Unique to Trivy", data["only_trivy"])

def generate_html_report(data, image, trivy_ver, grype_ver):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d")
    html_file = REPORT_DIR / f"scan_report_{image.replace(':', '_')}_{timestamp}.html"

    def section(title, grouped):
        html = f"<h3 id='{title.replace(' ', '_')}'>{title}</h3>\n"
        for sev in sorted(grouped.keys(), reverse=True):
            html += f"<details><summary><b>{sev}</b> ({len(grouped[sev])} CVEs)</summary><ul>"
            for cve in grouped[sev]:
                html += f"<li><a href='https://nvd.nist.gov/vuln/detail/{cve}' target='_blank'>{cve}</a></li>"
            html += "</ul></details>\n"
        return html

    with open(html_file, "w") as f:
        f.write(f"""<!DOCTYPE html><html><head><meta charset="utf-8">
<title>Scan Report</title>
<style>
body {{ font-family:sans-serif; max-width:900px; margin:auto; padding:20px }}
h1,h2,h3 {{ color:#2c3e50 }}
table {{ border-collapse:collapse; width:100%; margin-top:20px }}
th,td {{ border:1px solid #ccc; padding:8px; text-align:left }}
pre {{ background:#f4f4f4; padding:10px; border-radius:8px; overflow:auto }}
a {{ text-decoration:none }}
details summary {{ cursor:pointer; font-weight:bold; }}
button {{ padding:6px 10px; background:#2c3e50; color:white; border:none; border-radius:5px; cursor:pointer }}
</style>
<script>function toggleRaw(){{var x=document.getElementById('raw');x.style.display=x.style.display==='none'?'block':'none';}}</script>
</head><body>
<h1>Scan Report for {image}</h1>
<p><b>Date:</b> {timestamp}</p>
<p><b>Trivy:</b> {trivy_ver}</p>
<p><b>Grype:</b> {grype_ver}</p>
<button onclick="window.print()">üìÑ Download as PDF</button>
<table>
<tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
<tr><td>Grype</td><td>{data['counts']['grype']}</td><td><a href="#Unique_to_Grype">{data['counts']['only_grype']}</a></td><td><a href="#Shared_CVEs">{data['counts']['shared']}</a></td></tr>
<tr><td>Trivy</td><td>{data['counts']['trivy']}</td><td><a href="#Unique_to_Trivy">{data['counts']['only_trivy']}</a></td><td><a href="#Shared_CVEs">{data['counts']['shared']}</a></td></tr>
</table>
{section("Shared CVEs", data["shared"])}
{section("Unique to Grype", data["only_grype"])}
{section("Unique to Trivy", data["only_trivy"])}
<button onclick="toggleRaw()">Toggle Raw JSON</button>
<pre id="raw" style="display:none">{json.dumps(data, indent=2)}</pre>
</body></html>
""")
    print(f"‚úÖ HTML report saved: {html_file}")
    view = input("üìÅ Would you like to open the HTML report in your browser? (y/n) ").strip().lower()
    if view == "y":
        subprocess.run(["open" if sys.platform == "darwin" else "xdg-open", str(html_file)])
    else:
        print(f"üìé You can view it later at: {html_file}")

def main():
    if len(sys.argv) < 2:
        print("‚ùå Usage: scancompare <image>")
        sys.exit(1)
    auto_update()
    ensure_tools()
    image = sys.argv[1]
    print(f"üîç Starting vulnerability scan for image: {image}")
    run_scans(image)
    data = parse_vulns(REPORT_DIR / "original_trivy.json", REPORT_DIR / "original_grype.json")
    trivy_ver = get_tool_version("trivy")
    grype_ver = get_tool_version("grype")
    print_terminal_summary(data, trivy_ver, grype_ver)
    generate_html_report(data, image, trivy_ver, grype_ver)

if __name__ == "__main__":
    main()
