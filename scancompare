#!/usr/bin/env python3
import os
import sys
import json
import shutil
import subprocess
from datetime import datetime
from pathlib import Path

VERSION = "1.4.8"
SCRIPT_NAME = "scancompare"
INSTALL_PATH = Path.home() / ".local" / "bin" / SCRIPT_NAME
REPO_URL = f"https://raw.githubusercontent.com/drewtwitchell/scancompare/main/{SCRIPT_NAME}"

REPORT_DIR = Path("scan_reports")
REPORT_DIR.mkdir(exist_ok=True)
TIMESTAMP = datetime.now().strftime("%Y-%m-%d")

def run_command(cmd, capture_output=True):
    try:
        result = subprocess.run(cmd, shell=True, capture_output=capture_output, text=True)
        return result.stdout.strip() if capture_output else None
    except Exception as e:
        return "unknown"

def get_tool_version(tool):
    output = run_command(f"{tool} version")
    if tool == "grype":
        for line in output.splitlines():
            if "Version:" in line:
                return line.split(":")[1].strip()
    elif tool == "trivy":
        for line in output.splitlines():
            if line.startswith("Version:"):
                return line.split(":")[1].strip()
    return "unknown"

def update_tool_dbs():
    run_command("trivy db update", capture_output=False)
    run_command("grype db update", capture_output=False)

def extract_cves_trivy(file_path):
    with open(file_path) as f:
        data = json.load(f)
    vulns = []
    for result in data.get("Results", []):
        for vuln in result.get("Vulnerabilities", []):
            vulns.append({"id": vuln["VulnerabilityID"], "severity": vuln["Severity"].capitalize()})
    return vulns

def extract_cves_grype(file_path):
    with open(file_path) as f:
        data = json.load(f)
    return [{"id": m["vulnerability"]["id"], "severity": m["vulnerability"]["severity"].capitalize()}
            for m in data.get("matches", [])]

def group_by_severity(cves):
    grouped = {}
    for item in cves:
        severity = item["severity"]
        grouped.setdefault(severity, []).append(item["id"])
    return grouped

def print_grouped_cves(title, cve_map):
    print(f"\nüî∏ {title}")
    for severity in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
        items = cve_map.get(severity, [])
        if items:
            print(f"  {severity} ({len(items)}):")
            for cve in sorted(set(items)):
                print(f"    - {cve}")

def generate_html_report(summary, unique_grype, unique_trivy, shared, grype_version, trivy_version, target):
    html_path = REPORT_DIR / f"scan_report_{target.replace('/', '_').replace(':', '_')}_{TIMESTAMP}.html"
    with open(html_path, "w") as f:
        f.write(f"""<!DOCTYPE html><html><head><meta charset="UTF-8"><title>Scan Report</title>
        <style>body{{font-family:sans-serif;padding:20px;max-width:900px;margin:auto}}table{{border-collapse:collapse;width:100%}}th,td{{border:1px solid #ccc;padding:8px;text-align:left}}a{{color:#3498db}}</style>
        <script>function toggle(id){{var el=document.getElementById(id);el.style.display=el.style.display==='none'?'block':'none';}}</script>
        </head><body><h1>Scan Report for <code>{target}</code></h1>
        <p><strong>Date:</strong> {TIMESTAMP}</p>
        <p><strong>Trivy:</strong> {trivy_version} | <strong>Grype:</strong> {grype_version}</p>
        <h2>Summary</h2>
        <table>
        <tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
        <tr><td>Grype</td><td>{summary['total_grype']}</td><td>{summary['only_in_grype']}</td><td>{summary['shared']}</td></tr>
        <tr><td>Trivy</td><td>{summary['total_trivy']}</td><td>{summary['only_in_trivy']}</td><td>{summary['shared']}</td></tr>
        </table>
        <ul>
        <li><a href="#shared">Shared CVEs</a></li>
        <li><a href="#grype">Unique to Grype</a></li>
        <li><a href="#trivy">Unique to Trivy</a></li>
        </ul>""")

        def write_cves_section(name, cve_map, anchor):
            f.write(f"<h3 id='{anchor}'>{name}</h3>")
            for severity in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
                items = cve_map.get(severity, [])
                if items:
                    f.write(f"<h4>{severity} ({len(items)})</h4><ul>")
                    for cve in sorted(set(items)):
                        f.write(f"<li><a href='https://nvd.nist.gov/vuln/detail/{cve}' target='_blank'>{cve}</a></li>")
                    f.write("</ul>")

        write_cves_section("Shared CVEs", shared, "shared")
        write_cves_section("Unique to Grype", unique_grype, "grype")
        write_cves_section("Unique to Trivy", unique_trivy, "trivy")

        f.write(f"<button onclick=\"window.print()\">üìÑ Export to PDF</button><br><button onclick=\"toggle('raw')\">Toggle Raw JSON</button><pre id='raw' style='display:none;'>")
        f.write(json.dumps({"summary": summary, "grype": unique_grype, "trivy": unique_trivy, "shared": shared}, indent=2))
        f.write("</pre></body></html>")

    print(f"\n‚úÖ HTML report saved to {html_path}")
    choice = input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").strip().lower()
    if choice == "y":
        subprocess.run(["open" if sys.platform == "darwin" else "xdg-open", str(html_path)])

def self_update():
    latest = run_command(f"curl -fsSL {REPO_URL} | grep VERSION", capture_output=True).split('=')[-1].strip('" \n')
    if latest and latest != VERSION:
        print(f"üîÑ New version available: {latest} (current: {VERSION})")
        new_script = run_command(f"curl -fsSL {REPO_URL}")
        if new_script:
            with open(INSTALL_PATH, "w") as f: f.write(new_script)
            os.chmod(INSTALL_PATH, 0o755)
            print(f"‚úÖ scancompare updated to version {latest}")
            os.execv(str(INSTALL_PATH), [str(INSTALL_PATH)] + sys.argv[1:])
    return

def uninstall():
    print("üßπ Uninstalling scancompare...")
    INSTALL_PATH.unlink(missing_ok=True)
    print("‚úÖ Uninstalled.")
    sys.exit(0)

def main():
    if "--version" in sys.argv:
        print(f"{SCRIPT_NAME} version {VERSION}")
        sys.exit(0)
    if "--uninstall" in sys.argv:
        uninstall()

    if len(sys.argv) < 2:
        print(f"‚ùå Usage: {SCRIPT_NAME} <image>")
        sys.exit(1)

    self_update()
    update_tool_dbs()

    target = sys.argv[1]
    print(f"\nüîπ Scanning with Trivy...")
    trivy_out = REPORT_DIR / "original_trivy.json"
    run_command(f"trivy image --format json -o {trivy_out} {target}", capture_output=False)
    trivy_version = get_tool_version("trivy")
    print(f"   üì¶ Trivy version: {trivy_version}")

    print(f"\nüîπ Scanning with Grype...")
    grype_out = REPORT_DIR / "original_grype.json"
    run_command(f"grype {target} -o json > {grype_out}", capture_output=False)
    grype_version = get_tool_version("grype")
    print(f"   üì¶ Grype version: {grype_version}")

    trivy_cves = extract_cves_trivy(trivy_out)
    grype_cves = extract_cves_grype(grype_out)

    set_trivy = set((c["id"], c["severity"]) for c in trivy_cves)
    set_grype = set((c["id"], c["severity"]) for c in grype_cves)

    shared_ids = set_trivy & set_grype
    only_trivy = set_trivy - set_grype
    only_grype = set_grype - set_trivy

    shared = group_by_severity([{"id": cve[0], "severity": cve[1]} for cve in shared_ids])
    trivy_only = group_by_severity([{"id": cve[0], "severity": cve[1]} for cve in only_trivy])
    grype_only = group_by_severity([{"id": cve[0], "severity": cve[1]} for cve in only_grype])

    summary = {
        "total_trivy": len(trivy_cves),
        "total_grype": len(grype_cves),
        "shared": len(shared_ids),
        "only_in_trivy": len(only_trivy),
        "only_in_grype": len(only_grype),
    }

    print("\nüîß Tool Versions:")
    print(f"  Trivy: {trivy_version}")
    print(f"  Grype: {grype_version}")

    print("\nüìä CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared\n-----------|-------|---------------|--------")
    print(f"Grype      | {summary['total_grype']:5} | {summary['only_in_grype']:13} | {summary['shared']}")
    print(f"Trivy      | {summary['total_trivy']:5} | {summary['only_in_trivy']:13} | {summary['shared']}")

    print("\nüîç CVEs by Severity")
    print_grouped_cves("Unique to Grype", grype_only)
    print_grouped_cves("Unique to Trivy", trivy_only)
    print_grouped_cves("Shared CVEs", shared)

    generate_html_report(summary, grype_only, trivy_only, shared, grype_version, trivy_version, target)

if __name__ == "__main__":
    main()
