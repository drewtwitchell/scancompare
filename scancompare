#!/usr/bin/env python3
import os
import sys
import json
import subprocess
import shutil
import datetime
from pathlib import Path

VERSION = "1.5.5"
SCRIPT_NAME = "scancompare"
REPO_RAW_URL = f"https://raw.githubusercontent.com/drewtwitchell/scancompare/main/{SCRIPT_NAME}"

def get_version(tool, flag="--version"):
    try:
        result = subprocess.run([tool, flag], capture_output=True, text=True)
        output = result.stdout.strip() + result.stderr.strip()
        if tool == "grype":
            for line in output.splitlines():
                if "Version:" in line:
                    return line.split("Version:")[-1].strip()
        if tool == "trivy":
            for line in output.splitlines():
                if "Version:" in line:
                    return line.split("Version:")[-1].strip()
        return output.split()[1] if len(output.split()) > 1 else "unknown"
    except Exception:
        return "unknown"

def check_for_update():
    try:
        latest = subprocess.check_output(
            ["curl", "-sL", REPO_RAW_URL],
            text=True
        ).split("VERSION = \"")[1].split("\"")[0].strip()
        if latest != VERSION:
            print(f"\nüîÑ New version available: {VERSION} ‚Üí {latest}")
            return latest
    except Exception:
        print("‚ö†Ô∏è Could not determine remote version.")
    return None

def self_update():
    try:
        subprocess.run(["curl", "-sL", REPO_RAW_URL, "-o", str(Path(__file__))], check=True)
        os.chmod(str(Path(__file__)), 0o755)
        print("‚úÖ scancompare updated to latest version\n")
    except Exception as e:
        print(f"‚ùå Failed to update: {e}")
        sys.exit(1)

def run_scan(image, report_dir):
    os.makedirs(report_dir, exist_ok=True)

    trivy_json = f"{report_dir}/original_trivy.json"
    grype_json = f"{report_dir}/original_grype.json"
    diff_json = f"{report_dir}/original_diff.json"
    html_report = f"{report_dir}/scan_report_{image.replace(':', '_')}_{datetime.date.today()}.html"

    print(f"üì¶ scancompare version {VERSION}")

    print("\nüîπ Scanning with Trivy...")
    trivy_ver = get_version("trivy")
    print(f"   üì¶ Trivy version: {trivy_ver}")
    subprocess.run(["trivy", "image", "-q", "-f", "json", "-o", trivy_json, image])

    print("\nüîπ Scanning with Grype...")
    grype_ver = get_version("grype")
    print(f"   üì¶ Grype version: {grype_ver}")
    subprocess.run(["grype", image, "-q", "-o", "json", "-f", "json", "-o", grype_json])

    print("\nüìä CLI Summary Report")
    try:
        with open(trivy_json) as tf:
            trivy_data = json.load(tf)["Results"]
        with open(grype_json) as gf:
            grype_data = json.load(gf)["matches"]

        trivy_cves = extract_cves_trivy(trivy_data)
        grype_cves = extract_cves_grype(grype_data)

        compare_and_print(trivy_cves, grype_cves)

        write_html_report(html_report, trivy_cves, grype_cves, trivy_ver, grype_ver)
        print(f"\n‚úÖ HTML report saved to {html_report}")
        open_report = input("üìÅ Would you like to open the HTML report in your browser? (y/n): ")
        if open_report.strip().lower() == "y":
            subprocess.run(["open", html_report])
    except Exception as e:
        print(f"‚ùå Error during processing: {e}")
        sys.exit(1)

def extract_cves_trivy(results):
    cves = []
    for result in results:
        for vuln in result.get("Vulnerabilities", []):
            cves.append({
                "id": vuln["VulnerabilityID"],
                "severity": vuln.get("Severity", "UNKNOWN")
            })
    return cves

def extract_cves_grype(matches):
    cves = []
    for match in matches:
        vuln = match.get("vulnerability", {})
        cves.append({
            "id": vuln.get("id", ""),
            "severity": vuln.get("severity", "UNKNOWN")
        })
    return cves

def compare_and_print(trivy, grype):
    t_set = set([v["id"] for v in trivy])
    g_set = set([v["id"] for v in grype])
    shared = t_set & g_set
    only_trivy = t_set - g_set
    only_grype = g_set - t_set

    print("\nTool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {len(g_set)}   | {len(only_grype)}             | {len(shared)}")
    print(f"Trivy      | {len(t_set)}   | {len(only_trivy)}             | {len(shared)}")

    print("\nüîç CVEs by Severity")
    print_grouped_cves(trivy, grype, shared)

def print_grouped_cves(trivy, grype, shared_ids):
    def group(cves, ids):
        grouped = {}
        for cve in cves:
            if cve["id"] in ids:
                sev = cve.get("severity", "UNKNOWN").upper()
                grouped.setdefault(sev, []).append(cve["id"])
        return grouped

    print("\nüî∏ Unique to Grype")
    grouped = group(grype, set([v["id"] for v in grype]) - set([v["id"] for v in trivy]))
    for sev in ["CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE", "UNKNOWN"]:
        if sev in grouped:
            print(f"  {sev.title()} ({len(grouped[sev])}):")
            for cve in grouped[sev]:
                print(f"    - {cve}")

    print("\nüî∏ Unique to Trivy")
    grouped = group(trivy, set([v["id"] for v in trivy]) - set([v["id"] for v in grype]))
    for sev in ["CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE", "UNKNOWN"]:
        if sev in grouped:
            print(f"  {sev.title()} ({len(grouped[sev])}):")
            for cve in grouped[sev]:
                print(f"    - {cve}")

    print("\nüî∏ Shared CVEs")
    grouped = group(trivy, shared_ids)
    for sev in ["CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE", "UNKNOWN"]:
        if sev in grouped:
            print(f"  {sev.title()} ({len(grouped[sev])}):")
            for cve in grouped[sev]:
                print(f"    - {cve}")

def write_html_report(path, trivy, grype, trivy_ver, grype_ver):
    def group_by_severity(cves):
        grouped = {}
        for cve in cves:
            sev = cve.get("severity", "UNKNOWN").upper()
            grouped.setdefault(sev, []).append(cve["id"])
        return grouped

    t_ids = set([v["id"] for v in trivy])
    g_ids = set([v["id"] for v in grype])
    shared = t_ids & g_ids
    unique_t = t_ids - g_ids
    unique_g = g_ids - t_ids

    def render_section(title, ids, source):
        html = f"<h3 id='{title}'>{title}</h3><ul>"
        for cve in sorted(ids):
            html += f"<li><a href='https://nvd.nist.gov/vuln/detail/{cve}' target='_blank'>{cve}</a></li>"
        html += "</ul>"
        return html

    html = f"""<html><head><title>Scan Report</title>
    <style>body{{font-family:sans-serif}}ul{{columns:2}}</style></head><body>
    <h2>Scan Report</h2>
    <p><strong>scancompare version:</strong> {VERSION}</p>
    <p><strong>Trivy:</strong> {trivy_ver} | <strong>Grype:</strong> {grype_ver}</p>
    <hr><h3>Table of Contents</h3>
    <ul>
        <li><a href='#Unique_to_Grype'>Unique to Grype</a></li>
        <li><a href='#Unique_to_Trivy'>Unique to Trivy</a></li>
        <li><a href='#Shared_CVEs'>Shared CVEs</a></li>
    </ul>
    {render_section('Unique_to_Grype', unique_g, grype)}
    {render_section('Unique_to_Trivy', unique_t, trivy)}
    {render_section('Shared_CVEs', shared, trivy)}
    <details><summary><strong>View Raw JSON (collapsed)</strong></summary>
    <pre>{json.dumps({'trivy': trivy, 'grype': grype}, indent=2)}</pre>
    </details>
    </body></html>"""
    with open(path, "w") as f:
        f.write(html)

def main():
    if len(sys.argv) < 2:
        print(f"Usage: {SCRIPT_NAME} <image>")
        sys.exit(1)
    arg = sys.argv[1]
    if arg in ["--version", "-v"]:
        print(f"{SCRIPT_NAME} version {VERSION}")
        sys.exit(0)
    if arg in ["--uninstall", "uninstall"]:
        uninstall()
        sys.exit(0)

    latest = check_for_update()
    if latest:
        self_update()

    run_scan(arg, "scan_reports")

def uninstall():
    bin_path = shutil.which(SCRIPT_NAME)
    if bin_path:
        os.remove(bin_path)
        print(f"‚úÖ {SCRIPT_NAME} uninstalled.")
    else:
        print(f"‚ö†Ô∏è {SCRIPT_NAME} is not installed.")

if __name__ == "__main__":
    main()
