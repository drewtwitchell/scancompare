#!/bin/bash
VERSION="1.3.6"
SCRIPT_NAME="scancompare"
SCRIPT_PATH="$HOME/.local/bin/$SCRIPT_NAME"
REPO_USER="drewtwitchell"
REPO_NAME="scancompare"
REMOTE_URL="https://raw.githubusercontent.com/$REPO_USER/$REPO_NAME/main/$SCRIPT_NAME"

if [[ "$1" == "--no-update" ]]; then SKIP_UPDATE=true; shift; else SKIP_UPDATE=false; fi

TARGET="$1"
ORIGINAL_TARGET="$TARGET"
REPORT_DIR="scan_reports"
TIMESTAMP=$(date +"%Y-%m-%d")
HTML_REPORT="$REPORT_DIR/scan_report_${ORIGINAL_TARGET//[\/:]/_}_$TIMESTAMP.html"

ORIG_GRYPE="$REPORT_DIR/original_grype.json"
ORIG_TRIVY="$REPORT_DIR/original_trivy.json"
ORIG_DIFF="$REPORT_DIR/original_diff.json"

declare -A SEVERITY_ORDER=( [Critical]=1 [High]=2 [Medium]=3 [Low]=4 [Negligible]=5 [Unknown]=6 )

step() { echo -e "\nüîπ $1"; }
done_msg() { echo "    ‚úî $1"; }

get_remote_version() {
  curl -fsSL "$REMOTE_URL" | grep 'VERSION=' | cut -d'"' -f2
}

auto_update_check() {
  local remote_ver=$(get_remote_version)
  if [[ "$VERSION" != "$remote_ver" ]]; then
    echo "üîÑ New version available: $remote_ver (current: $VERSION)"
    self_update "$@"
  fi
}

self_update() {
  local tmp_file=$(mktemp)
  curl -fsSL "$REMOTE_URL" -o "$tmp_file" || { echo "‚ùå Failed to fetch update."; exit 1; }
  local remote_version=$(grep '^VERSION=' "$tmp_file" | cut -d'"' -f2)
  if [[ "$remote_version" == "$VERSION" ]]; then rm -f "$tmp_file"; return; fi
  chmod +x "$tmp_file"
  cp "$tmp_file" "$SCRIPT_PATH"
  rm -f "$tmp_file"
  echo "‚úÖ scancompare updated to version $remote_version"
  exec "$SCRIPT_PATH" --no-update "$@"
}

install_without_brew() {
  mkdir -p ~/.local/bin
  case $1 in
    grype)
      curl -sL https://github.com/anchore/grype/releases/latest/download/grype_linux_amd64.tar.gz -o /tmp/grype.tar.gz
      tar -xzf /tmp/grype.tar.gz -C /tmp
      mv /tmp/grype ~/.local/bin/grype
      chmod +x ~/.local/bin/grype
      ;;
    trivy)
      curl -sL https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.60.0_Linux-64bit.tar.gz -o /tmp/trivy.tar.gz
      tar -xzf /tmp/trivy.tar.gz -C /tmp
      mv /tmp/trivy ~/.local/bin/trivy
      chmod +x ~/.local/bin/trivy
      ;;
    jq)
      curl -sL https://github.com/stedolan/jq/releases/latest/download/jq-linux64 -o ~/.local/bin/jq
      chmod +x ~/.local/bin/jq
      ;;
  esac
}

check_tools() {
  mkdir -p ~/.local/bin
  export PATH="$HOME/.local/bin:$PATH"
  for tool in grype trivy jq docker; do
    if ! command -v $tool &>/dev/null; then
      echo "üì¶ Installing $tool..."
      if command -v brew &>/dev/null; then brew install $tool
      else install_without_brew $tool
      fi
    fi
  done
}

clear_old_report() { rm -f "$HTML_REPORT"; }

run_scans() {
  mkdir -p "$REPORT_DIR"
  step "Scanning with Trivy..."
  trivy image --scanners vuln --format json --output "$ORIG_TRIVY" "$TARGET"
  done_msg "Trivy scan saved to $ORIG_TRIVY"
  step "Scanning with Grype..."
  grype "$TARGET" -o json > "$ORIG_GRYPE"
  done_msg "Grype scan saved to $ORIG_GRYPE"
}

compare_results() {
  step "Comparing scan results..."
  trivy_cves=$(jq -r '[.Results[].Vulnerabilities[]? | {id: .VulnerabilityID, severity: .Severity}]' "$ORIG_TRIVY")
  grype_cves=$(jq -r '[.matches[] | {id: .vulnerability.id, severity: .vulnerability.severity}]' "$ORIG_GRYPE")

  jq -n --argjson grype "$grype_cves" --argjson trivy "$trivy_cves" '
    def group_by_severity(vulns):
      reduce vulns[] as $v ({};
        .[$v.severity] += [$v.id] //= [$v.id]
      );
    {
      grype: group_by_severity($grype),
      trivy: group_by_severity($trivy),
      common: ($grype | map(.id) as $g | $trivy | map(.id) as $t | ($g & $t)),
      actions: { suggestion: "Review shared CVEs and prioritize those with known fixes." }
    }' > "$ORIG_DIFF"
  done_msg "Diff report saved to $ORIG_DIFF"

  echo -e "\nüìä CLI Summary Report"
  cat "$ORIG_DIFF"
}

generate_html_report() {
  echo "<html><head><title>Scan Report</title></head><body><h1>Scan Report: $TARGET</h1><pre>" > "$HTML_REPORT"
  cat "$ORIG_DIFF" >> "$HTML_REPORT"
  echo "</pre></body></html>" >> "$HTML_REPORT"
  echo "‚úÖ HTML report saved: $HTML_REPORT"
}

prompt_open_html() {
  echo -e "\nüìÅ Would you like to open the HTML report in your browser? (y/n)"
  read -r choice
  if [[ "$choice" == "y" ]]; then
    case "$OSTYPE" in
      darwin*) open "$HTML_REPORT" ;;
      linux*) xdg-open "$HTML_REPORT" ;;
      *) echo "View at: $HTML_REPORT" ;;
    esac
  else
    echo "üìé You can view it later at: $HTML_REPORT"
  fi
}

main() {
  [[ -z "$TARGET" ]] && echo "‚ùå Usage: scancompare <image>" && exit 1
  echo "üîç Starting vulnerability scan for image: $TARGET"
  check_tools
  clear_old_report
  run_scans
  compare_results
  generate_html_report
  prompt_open_html
}

[[ "$1" == "update" ]] && self_update "$@" && exit 0
$SKIP_UPDATE || auto_update_check "$@"

main "$@"
