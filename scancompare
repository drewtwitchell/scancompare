#!/usr/bin/env python3

import subprocess
import sys
import os
import json
import shutil
import tempfile
import webbrowser
import urllib.request
from datetime import datetime
from pathlib import Path

SCRIPT_NAME = "scancompare"
VERSION = "1.5.3"
REMOTE_RAW_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"
INSTALL_PATH = Path.home() / ".local" / "bin" / SCRIPT_NAME
REPORT_DIR = Path("scan_reports")
TRIVY_JSON = REPORT_DIR / "original_trivy.json"
GRYPE_JSON = REPORT_DIR / "original_grype.json"
DIFF_JSON = REPORT_DIR / "original_diff.json"

def run(cmd, capture=True):
    return subprocess.run(cmd, shell=True, capture_output=capture, text=True)

def get_version_output(tool):
    try:
        result = run(f"{tool} version", capture=True)
        if tool == "trivy":
            for line in result.stdout.splitlines():
                if "Version:" in line:
                    return line.split("Version:")[-1].strip()
        elif tool == "grype":
            data = json.loads(run("grype version -o json", capture=True).stdout)
            return data.get("application", {}).get("version", "unknown")
    except Exception:
        return "unknown"

def update_tool(tool):
    if shutil.which("brew"):
        run(f"brew upgrade {tool}")
    else:
        run(f"curl -sSfL https://raw.githubusercontent.com/aquasecurity/{tool}/main/install.sh | sh")

def check_self_update():
    try:
        latest = urllib.request.urlopen(REMOTE_RAW_URL).read().decode()
        with open(__file__, "r") as current:
            if latest != current.read():
                print(f"üîÑ New version available: {VERSION} ‚Üí latest")
                INSTALL_PATH.write_text(latest)
                INSTALL_PATH.chmod(0o755)
                print(f"‚úÖ {SCRIPT_NAME} updated to latest version\n")
    except Exception:
        print("‚ö†Ô∏è Could not check for latest version.\n")

def uninstall():
    INSTALL_PATH.unlink(missing_ok=True)
    print("‚úÖ scancompare uninstalled.")
    sys.exit(0)

def save_json(filename, data):
    REPORT_DIR.mkdir(parents=True, exist_ok=True)
    with open(filename, "w") as f:
        json.dump(data, f, indent=2)

def extract_cves(json_data):
    cves = {}
    for item in json_data.get("Results", []):
        for vuln in item.get("Vulnerabilities", []):
            cve_id = vuln.get("VulnerabilityID")
            severity = vuln.get("Severity", "UNKNOWN").upper()
            if cve_id:
                cves[cve_id] = severity
    return cves

def print_cve_section(title, cves):
    if not cves:
        return
    print(f"\nüî∏ {title}")
    for sev in ["CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE", "UNKNOWN"]:
        items = sorted([cve for cve, s in cves.items() if s == sev])
        if items:
            print(f"  {sev.title()} ({len(items)}):")
            for cve in items:
                print(f"    - {cve}")

def generate_html_report(image, trivy_version, grype_version, trivy_cves, grype_cves, shared):
    from html import escape

    filename = f"scan_report_{image.replace(':', '_')}_{datetime.now().date()}.html"
    filepath = REPORT_DIR / filename

    def cve_link(cve):
        return f'<a href="https://nvd.nist.gov/vuln/detail/{cve}" target="_blank">{cve}</a>'

    def section(title, cves):
        out = f"<h3 id='{title}'>{title}</h3>\n"
        for sev in ["CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE", "UNKNOWN"]:
            filtered = [c for c, s in cves.items() if s == sev]
            if filtered:
                out += f"<b>{sev} ({len(filtered)}):</b><ul>"
                out += "".join(f"<li>{cve_link(c)}</li>" for c in sorted(filtered))
                out += "</ul>"
        return out

    html = f"""<html>
<head><title>scancompare Report</title></head>
<body>
<h2>scancompare Report for <code>{image}</code></h2>
<p><b>scancompare version:</b> {VERSION} |
<b>Trivy:</b> {trivy_version} |
<b>Grype:</b> {grype_version}</p>

<h3>Summary</h3>
<ul>
  <li><a href="#Unique to Grype">Unique to Grype</a></li>
  <li><a href="#Unique to Trivy">Unique to Trivy</a></li>
  <li><a href="#Shared CVEs">Shared CVEs</a></li>
</ul>

{section("Unique to Grype", {k: v for k, v in grype_cves.items() if k not in trivy_cves})}
{section("Unique to Trivy", {k: v for k, v in trivy_cves.items() if k not in grype_cves})}
{section("Shared CVEs", {k: v for k, v in trivy_cves.items() if k in grype_cves})}

<h3 onclick="toggleRaw()" style="cursor:pointer;">‚¨áÔ∏è Raw JSON Output (click to toggle)</h3>
<pre id="raw" style="display:none;">{escape(json.dumps({'trivy': trivy_cves, 'grype': grype_cves}, indent=2))}</pre>

<script>
function toggleRaw() {{
  var raw = document.getElementById("raw");
  raw.style.display = raw.style.display === "none" ? "block" : "none";
}}
</script>
</body></html>"""

    filepath.write_text(html)
    print(f"\n‚úÖ HTML report saved: {filepath}")
    if input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").lower() == "y":
        webbrowser.open(filepath.absolute().as_uri())

def main():
    if "--version" in sys.argv:
        print(f"{SCRIPT_NAME} version {VERSION}")
        sys.exit(0)
    if "--uninstall" in sys.argv or "uninstall" in sys.argv:
        uninstall()
    if "--help" in sys.argv or len(sys.argv) != 2:
        print(f"Usage: {SCRIPT_NAME} <image>")
        sys.exit(1)

    image = sys.argv[1]
    print(f"\nüì¶ {SCRIPT_NAME} version {VERSION}")
    check_self_update()

    trivy_version = get_version_output("trivy")
    print(f"üîπ Scanning with Trivy...\n   üì¶ Trivy version: {trivy_version}")
    run(f"trivy image -f json -o {TRIVY_JSON} {image}", capture=False)

    grype_version = get_version_output("grype")
    print(f"\nüîπ Scanning with Grype...\n   üì¶ Grype version: {grype_version}")
    run(f"grype {image} -o json > {GRYPE_JSON}", capture=False)

    trivy_data = extract_cves(json.load(open(TRIVY_JSON)))
    grype_data = extract_cves(json.load(open(GRYPE_JSON)))
    shared = {cve: trivy_data[cve] for cve in trivy_data if cve in grype_data}

    print("\nüìä CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {len(grype_data):<5} | {len(set(grype_data)-set(trivy_data)):<13} | {len(shared)}")
    print(f"Trivy      | {len(trivy_data):<5} | {len(set(trivy_data)-set(grype_data)):<13} | {len(shared)}")

    print("\nüîç CVEs by Severity")
    print_cve_section("Unique to Grype", {k: v for k, v in grype_data.items() if k not in trivy_data})
    print_cve_section("Unique to Trivy", {k: v for k, v in trivy_data.items() if k not in grype_data})
    print_cve_section("Shared CVEs", shared)

    generate_html_report(image, trivy_version, grype_version, trivy_data, grype_data, shared)

if __name__ == "__main__":
    main()
