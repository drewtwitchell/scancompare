#!/usr/bin/env python3

import json
import os
import platform
import subprocess
import sys
import tempfile
from datetime import datetime
from pathlib import Path

VERSION = "1.3.9"
REPO = "drewtwitchell/scancompare"
SCRIPT_URL = f"https://raw.githubusercontent.com/{REPO}/main/scancompare"
INSTALL_PATH = Path.home() / ".local" / "bin" / "scancompare"
REPORT_DIR = Path("scan_reports")
REPORT_DIR.mkdir(exist_ok=True)

def log(msg): print(f"üîπ {msg}")
def success(msg): print(f"    ‚úî {msg}")

def check_tool(tool):
    if shutil.which(tool): return
    log(f"{tool} not found. Attempting install...")
    if shutil.which("brew"):
        subprocess.run(["brew", "install", tool], check=True)
    else:
        log(f"‚ùå Install {tool} manually (Homebrew not found)."); sys.exit(1)

def auto_update(args):
    try:
        remote = subprocess.check_output(["curl", "-fsSL", SCRIPT_URL], text=True)
        remote_version = next((line.split('"')[1] for line in remote.splitlines() if line.startswith("VERSION")), VERSION)
        if remote_version != VERSION:
            print(f"üîÑ New version available: {remote_version} (current: {VERSION})")
            tmp = tempfile.NamedTemporaryFile(delete=False)
            tmp.write(remote.encode())
            tmp.close()
            os.chmod(tmp.name, 0o755)
            os.replace(tmp.name, INSTALL_PATH)
            print(f"‚úÖ scancompare updated to version {remote_version}")
            os.execv(INSTALL_PATH, [INSTALL_PATH, "--no-update"] + args)
    except Exception as e:
        log(f"Update check failed: {e}")

def run_cmd(cmd, outfile):
    with open(outfile, "w") as f:
        subprocess.run(cmd, stdout=f, stderr=subprocess.DEVNULL, check=True)

def parse_cves(file, tool):
    with open(file) as f:
        data = json.load(f)
    if tool == "trivy":
        vulns = [v for r in data.get("Results", []) for v in r.get("Vulnerabilities", [])]
        return [{"id": v["VulnerabilityID"], "severity": v["Severity"]} for v in vulns]
    else:
        return [{"id": m["vulnerability"]["id"], "severity": m["vulnerability"]["severity"]} for m in data.get("matches", [])]

def group_by_severity(cves):
    result = {}
    for cve in cves:
        sev = cve["severity"].capitalize()
        result.setdefault(sev, []).append(cve["id"])
    return result

def compare(trivy_cves, grype_cves):
    t_ids = set(c["id"] for c in trivy_cves)
    g_ids = set(c["id"] for c in grype_cves)
    shared = sorted(t_ids & g_ids)
    only_trivy = sorted(t_ids - g_ids)
    only_grype = sorted(g_ids - t_ids)
    return {
        "summary": {
            "total_grype": len(grype_cves),
            "total_trivy": len(trivy_cves),
            "shared": len(shared),
            "only_in_grype": len(only_grype),
            "only_in_trivy": len(only_trivy)
        },
        "breakdown": {
            "shared": group_by_severity([c for c in trivy_cves if c["id"] in shared]),
            "trivy_only": group_by_severity([c for c in trivy_cves if c["id"] in only_trivy]),
            "grype_only": group_by_severity([c for c in grype_cves if c["id"] in only_grype]),
        },
        "ids": {
            "shared": shared,
            "trivy_only": only_trivy,
            "grype_only": only_grype,
        },
        "suggestion": "Review shared CVEs and prioritize those with known fixes."
    }

def print_summary(diff):
    print("\nüìä CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {diff['summary']['total_grype']:>5} | {diff['summary']['only_in_grype']:>13} | {diff['summary']['shared']}")
    print(f"Trivy      | {diff['summary']['total_trivy']:>5} | {diff['summary']['only_in_trivy']:>13} | {diff['summary']['shared']}\n")
    print("Suggested Action:", diff["suggestion"])

def generate_html(image_name, diff, output_path):
    def section(title, sev_dict):
        html = f"<h2>{title}</h2>"
        for sev, ids in sorted(sev_dict.items(), key=lambda x: ["Critical", "High", "Medium", "Low", "Unknown"].index(x[0])):
            html += f"<h3>{sev} ({len(ids)})</h3><ul>"
            for cve in ids:
                html += f"<li><a href='https://nvd.nist.gov/vuln/detail/{cve}' target='_blank'>{cve}</a></li>"
            html += "</ul>"
        return html

    with open(output_path, "w") as f:
        f.write(f"""<!DOCTYPE html><html><head><meta charset="utf-8">
        <title>Scan Report - {image_name}</title>
        <style>body{{font-family:sans-serif;max-width:900px;margin:auto;padding:1em}}h2{{color:#2c3e50}}ul{{margin-left:2em}}button{{padding:5px 10px;margin:10px}}pre{{background:#eee;padding:10px;overflow-x:auto}}</style>
        <script>function savePDF(){{window.print();}}</script></head><body>
        <h1>Scan Report for <code>{image_name}</code></h1>
        <p><strong>Generated:</strong> {datetime.now().strftime("%Y-%m-%d %H:%M")}</p>
        <button onclick="savePDF()">üìÑ Download as PDF</button>
        <table border="1" cellspacing="0" cellpadding="6">
        <tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
        <tr><td>Grype</td><td>{diff['summary']['total_grype']}</td><td>{diff['summary']['only_in_grype']}</td><td>{diff['summary']['shared']}</td></tr>
        <tr><td>Trivy</td><td>{diff['summary']['total_trivy']}</td><td>{diff['summary']['only_in_trivy']}</td><td>{diff['summary']['shared']}</td></tr>
        </table><p><strong>Action:</strong> {diff['suggestion']}</p>
        {section("Shared Vulnerabilities", diff["breakdown"]["shared"])}
        {section("Unique to Grype", diff["breakdown"]["grype_only"])}
        {section("Unique to Trivy", diff["breakdown"]["trivy_only"])}
        <hr><pre>{json.dumps(diff, indent=2)}</pre>
        </body></html>""")

def open_html(path):
    if input("üìÅ Would you like to open the HTML report in your browser? (y/n) ").lower() == "y":
        if platform.system() == "Darwin": subprocess.run(["open", path])
        elif platform.system() == "Linux": subprocess.run(["xdg-open", path])
        else: print(f"Open manually: {path}")
    else:
        print(f"üìé You can view it later at: {path}")

def main():
    args = sys.argv[1:]
    if not args or args[0].startswith("-"):
        print("‚ùå Usage: scancompare <docker-image>")
        return

    if "--no-update" not in args:
        auto_update(args)

    image = args[0]
    log(f"Starting vulnerability scan for image: {image}")
    trivy_out = REPORT_DIR / "original_trivy.json"
    grype_out = REPORT_DIR / "original_grype.json"
    report_out = REPORT_DIR / f"scan_report_{image.replace(':','_').replace('/','_')}_{datetime.now().date()}.html"

    run_cmd(["trivy", "image", "--scanners", "vuln", "--format", "json", image], trivy_out)
    success(f"Trivy scan saved to {trivy_out}")
    run_cmd(["grype", image, "-o", "json"], grype_out)
    success(f"Grype scan saved to {grype_out}")

    trivy = parse_cves(trivy_out, "trivy")
    grype = parse_cves(grype_out, "grype")
    diff = compare(trivy, grype)
    print_summary(diff)
    generate_html(image, diff, report_out)
    print(f"‚úÖ HTML report saved: {report_out}")
    open_html(report_out)

if __name__ == "__main__":
    import shutil
    main()
