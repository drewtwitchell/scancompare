#!/usr/bin/env python3
# scancompare version 1.7.4

import os
import sys
import json
import subprocess
import platform
from datetime import datetime
from urllib.request import urlopen
from pathlib import Path
import webbrowser

SCRIPT_NAME = "scancompare"
SCRIPT_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"
VERSION = "1.7.4"

SEVERITY_ORDER = ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]

def check_latest_version(only_check=False):
    try:
        latest = urlopen(SCRIPT_URL).read().decode("utf-8").split("VERSION = ")[1].split("\n")[0].strip('"')
        if latest != VERSION:
            print(f"üîÑ New version available: {VERSION} ‚Üí {latest}")
            update_script()
            print("‚úÖ scancompare updated to latest version")
            if only_check:
                sys.exit(0)
            os.execv(sys.executable, [sys.executable] + sys.argv)
        elif only_check:
            print(f"üì¶ scancompare version {VERSION}")
            sys.exit(0)
    except Exception:
        print("‚ö†Ô∏è Could not determine remote version.")
        if only_check:
            print(f"üì¶ scancompare version {VERSION}")
            sys.exit(0)

def update_script():
    try:
        new_code = urlopen(SCRIPT_URL).read().decode("utf-8")
        script_path = Path(__file__)
        script_path.write_text(new_code)
    except Exception as e:
        print("‚ùå Failed to update script:", e)

def get_version(tool):
    try:
        result = subprocess.run([tool, "version"], capture_output=True, text=True)
        for line in result.stdout.splitlines():
            if tool.lower() in line.lower() or "Version" in line:
                return line.strip()
    except Exception:
        return "unknown"
    return "unknown"

def run_scan(tool, image, output_path):
    try:
        if tool == "trivy":
            cmd = [tool, "image", "-f", "json", "-o", str(output_path), image]
            subprocess.run(cmd, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        elif tool == "grype":
            with open(output_path, "w") as f:
                subprocess.run([tool, image, "-o", "json"], check=True, stdout=f, stderr=subprocess.DEVNULL)
        return True
    except subprocess.CalledProcessError:
        return False

def extract_cves(file_path):
    try:
        with open(file_path) as f:
            data = json.load(f)
        if "matches" in data:  # Grype
            return [(m["vulnerability"]["id"], m["vulnerability"]["severity"]) for m in data["matches"]]
        else:  # Trivy
            return [(v["VulnerabilityID"], v.get("Severity", "Unknown")) for result in data.get("Results", []) for v in result.get("Vulnerabilities", [])]
    except Exception:
        return []

def group_by_severity(cves):
    grouped = {sev: [] for sev in SEVERITY_ORDER}
    for cve, sev in cves:
        grouped.get(sev, grouped["Unknown"]).append(cve)
    return grouped

def display_summary(trivy_cves, grype_cves):
    trivy_ids = {cve for cve, _ in trivy_cves}
    grype_ids = {cve for cve, _ in grype_cves}
    shared = trivy_ids & grype_ids
    only_trivy = trivy_ids - grype_ids
    only_grype = grype_ids - trivy_ids

    print("\nüìä CLI Summary Report\n")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {len(grype_ids)}   | {len(only_grype)}             | {len(shared)}")
    print(f"Trivy      | {len(trivy_ids)}   | {len(only_trivy)}            | {len(shared)}")

    def summarize(title, cves, ids):
        print(f"\nüî∏ {title}")
        grouped = group_by_severity(cves)
        for sev in SEVERITY_ORDER:
            cve_list = [c for c in grouped[sev] if c in ids]
            if cve_list:
                print(f"  {sev} ({len(cve_list)}):")
                for cve in sorted(cve_list):
                    print(f"    - {cve}")

    summarize("Unique to Grype", grype_cves, only_grype)
    summarize("Unique to Trivy", trivy_cves, only_trivy)
    summarize("Shared CVEs", trivy_cves + grype_cves, shared)

    return shared, only_trivy, only_grype

def explain_exit(msg):
    print(f"‚ö†Ô∏è {msg}")
    sys.exit(1)

def generate_html_report(image, trivy_cves, grype_cves, shared_ids, only_trivy_ids, only_grype_ids):
    timestamp = datetime.now().strftime("%Y-%m-%d")
    report_name = f"scan_report_{image.replace(':', '_')}_{timestamp}.html"
    report_path = Path("scan_reports") / report_name

    def build_section(title, all_cves, filter_ids):
        grouped = group_by_severity(all_cves)
        section = f"<h2 id='{title}'>{title.replace('_', ' ')}</h2>"
        for sev in SEVERITY_ORDER:
            cves = [c for c in grouped[sev] if c in filter_ids]
            if cves:
                section += f"<h3>{sev} ({len(cves)})</h3><ul>" + "".join(f"<li>{c}</li>" for c in sorted(cves)) + "</ul>"
        if section.endswith("</h2>"):
            section += "<p>No CVEs found.</p>"
        return section

    html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>ScanCompare Report</title>
    <style>
        body {{ font-family: 'Segoe UI', sans-serif; background: #f9f9f9; color: #333; padding: 2rem; }}
        h1 {{ color: #2c3e50; }}
        table {{ border-collapse: collapse; width: 60%; margin-bottom: 1.5rem; }}
        th, td {{ border: 1px solid #ccc; padding: 8px 12px; text-align: center; }}
        th {{ background-color: #f2f2f2; }}
        a {{ color: #3498db; text-decoration: none; }}
        a:hover {{ text-decoration: underline; }}
        .json-toggle {{ margin-top: 2rem; }}
        textarea {{ width: 100%; height: 300px; display: none; margin-top: 1rem; }}
    </style>
    <script>
      function toggleJSON() {{
        const txt = document.getElementById('jsonview');
        txt.style.display = txt.style.display === 'block' ? 'none' : 'block';
      }}
    </script>
</head>
<body>
    <button onclick="exportPDF()" style="position: fixed; top: 20px; right: 20px;">üñ®Ô∏è Export to PDF</button>
    <script>
    function exportPDF() {
        const opt = {
            margin:       0.5,
            filename:     'scancompare_report.pdf',
            image:        { type: 'jpeg', quality: 0.98 },
            html2canvas:  { scale: 2 },
            jsPDF:        { unit: 'in', format: 'letter', orientation: 'portrait' }
        };
        html2pdf().set(opt).from(document.body).save();
    }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
    <h1>Scan Report for {image}</h1>
    <table>
        <tr>
            <th>Tool</th>
            <th><a href="#Unique_to_Grype">Total</a></th>
            <th><a href="#Unique_to_Grype">Only in Tool</a></th>
            <th><a href="#Shared_CVEs">Shared</a></th>
        </tr>
        <tr>
            <td>Grype</td>
            <td>{len({c for c, _ in grype_cves})}</td>
            <td>{len(only_grype_ids)}</td>
            <td>{len(shared_ids)}</td>
        </tr>
        <tr>
            <td>Trivy</td>
            <td>{len({c for c, _ in trivy_cves})}</td>
            <td>{len(only_trivy_ids)}</td>
            <td>{len(shared_ids)}</td>
        </tr>
    </table>

    {build_section("Unique_to_Grype", grype_cves, only_grype_ids)}
    {build_section("Unique_to_Trivy", trivy_cves, only_trivy_ids)}
    {build_section("Shared_CVEs", trivy_cves + grype_cves, shared_ids)}

    <div class='json-toggle'>
      <button onclick="toggleJSON()">Toggle Raw JSON</button>
      <textarea id="jsonview">{json.dumps({'grype': grype_cves, 'trivy': trivy_cves}, indent=2)}</textarea>
    </div>
</body>
</html>
"""
    report_path.write_text(html)
    print(f"‚úÖ HTML report saved: {report_path}")

    open_html = input("üìÅ Open report in browser? (y/n): ").strip().lower()
    if open_html == "y":
        webbrowser.open(f"file://{report_path.absolute()}")

def main():
    if len(sys.argv) == 2 and sys.argv[1] in ("--version", "version"):
        print(f"üì¶ scancompare version {VERSION}")
        sys.exit(0)
    if len(sys.argv) == 2 and sys.argv[1] == "update":
        check_latest_version(only_check=True)
    if len(sys.argv) < 2:
        print("Usage: scancompare <image>")
        sys.exit(1)

    image = sys.argv[1]
    check_latest_version()

    scan_dir = Path("scan_reports")
    scan_dir.mkdir(exist_ok=True)
    trivy_path = scan_dir / "original_trivy.json"
    grype_path = scan_dir / "original_grype.json"

    print(f"\nüîπ Scanning with Trivy...")
    trivy_version = get_version("trivy")
    print(f"   üì¶ Trivy version: {trivy_version}")
    if not run_scan("trivy", image, trivy_path):
        explain_exit("Trivy scan failed or image not found.")
    print(f"    ‚úî Trivy scan saved to {trivy_path}")

    print(f"\nüîπ Scanning with Grype...")
    grype_version = get_version("grype")
    print(f"   üì¶ Grype version: {grype_version}")
    if not run_scan("grype", image, grype_path):
        explain_exit("Grype scan failed or image not found.")
    print(f"    ‚úî Grype scan saved to {grype_path}")

    trivy_cves = extract_cves(trivy_path)
    grype_cves = extract_cves(grype_path)
    shared, only_trivy, only_grype = display_summary(trivy_cves, grype_cves)

    generate_html_report(image, trivy_cves, grype_cves, shared, only_trivy, only_grype)

if __name__ == "__main__":
    main()
