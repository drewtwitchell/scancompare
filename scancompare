#!/usr/bin/env python3
import os
import json
import subprocess
import datetime
import shutil
import sys
from pathlib import Path

VERSION = "1.5.0"
SCRIPT_NAME = "scancompare"
SCRIPT_URL = f"https://raw.githubusercontent.com/drewtwitchell/scancompare/main/{SCRIPT_NAME}"
INSTALL_PATH = Path.home() / ".local" / "bin" / SCRIPT_NAME
REPORT_DIR = Path("scan_reports")
TIMESTAMP = datetime.datetime.now().strftime("%Y-%m-%d")

def run(cmd, capture=True):
    try:
        if capture:
            return subprocess.check_output(cmd, shell=True, text=True).strip()
        else:
            subprocess.run(cmd, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        return ""

def get_tool_version(cmd, name):
    output = run(cmd)
    if not output:
        return "unknown"
    lines = output.strip().splitlines()
    for line in lines:
        if name.lower() in line.lower():
            parts = line.strip().split()
            for part in parts:
                if part.replace(".", "").isdigit():
                    return part
    return lines[0] if lines else "unknown"

def check_remote_version():
    raw = run(f"curl -fsSL {SCRIPT_URL}")
    if not raw:
        print("‚ö†Ô∏è Could not determine remote version.")
        return None
    for line in raw.splitlines():
        if line.startswith("VERSION"):
            return line.split("=")[-1].strip().strip('"')
    return None

def self_update():
    remote_ver = check_remote_version()
    if not remote_ver or remote_ver == VERSION:
        return
    print(f"üîÑ New version available: {remote_ver} (current: {VERSION})")
    tmp_path = Path("/tmp") / SCRIPT_NAME
    if run(f"curl -fsSL {SCRIPT_URL} -o {tmp_path}"):
        tmp_path.chmod(0o755)
        shutil.copy2(tmp_path, INSTALL_PATH)
        print(f"‚úÖ {SCRIPT_NAME} updated to version {remote_ver}")
        os.execv(str(INSTALL_PATH), [str(INSTALL_PATH)] + sys.argv[1:])

def uninstall():
    try:
        os.remove(INSTALL_PATH)
        print("‚úÖ scancompare uninstalled successfully.")
    except Exception as e:
        print(f"‚ùå Failed to uninstall: {e}")

def scan_image(image):
    trivy_json = REPORT_DIR / "original_trivy.json"
    grype_json = REPORT_DIR / "original_grype.json"
    REPORT_DIR.mkdir(exist_ok=True)

    print("üîπ Scanning with Trivy...")
    trivy_version = get_tool_version("trivy --version", "trivy")
    print(f"   üì¶ Trivy version: {trivy_version}")
    run(f"trivy image --scanners vuln --format json -o {trivy_json} {image}", capture=False)
    print(f"    ‚úî Trivy scan saved to {trivy_json}")

    print("\nüîπ Scanning with Grype...")
    grype_version = get_tool_version("grype version", "grype")
    print(f"   üì¶ Grype version: {grype_version}")
    run(f"grype {image} -o json > {grype_json}", capture=False)
    print(f"    ‚úî Grype scan saved to {grype_json}")
    return trivy_json, grype_json, trivy_version, grype_version

def parse_trivy(file):
    try:
        with open(file) as f:
            data = json.load(f)
        return [{"id": v["VulnerabilityID"], "severity": v["Severity"]} for r in data.get("Results", []) for v in r.get("Vulnerabilities", [])]
    except:
        return []

def parse_grype(file):
    try:
        with open(file) as f:
            data = json.load(f)
        return [{"id": m["vulnerability"]["id"], "severity": m["vulnerability"]["severity"]} for m in data.get("matches", [])]
    except:
        return []

def group_by_severity(cves):
    groups = {}
    for entry in cves:
        sev = entry["severity"].capitalize()
        groups.setdefault(sev, []).append(entry["id"])
    return groups

def print_grouped(title, data):
    print(f"\nüî∏ {title}")
    for severity in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
        items = data.get(severity, [])
        if items:
            print(f"  {severity} ({len(items)}):")
            for cve in sorted(set(items)):
                print(f"    - {cve}")

def compare_and_report(trivy_data, grype_data):
    trivy_ids = {e["id"] for e in trivy_data}
    grype_ids = {e["id"] for e in grype_data}
    shared = trivy_ids & grype_ids
    only_trivy = trivy_ids - grype_ids
    only_grype = grype_ids - trivy_ids

    def filter_and_group(data, ids):
        return group_by_severity([e for e in data if e["id"] in ids])

    print("\nüìä CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {len(grype_ids):<5} | {len(only_grype):<13} | {len(shared)}")
    print(f"Trivy      | {len(trivy_ids):<5} | {len(only_trivy):<13} | {len(shared)}")

    print("\nüîç CVEs by Severity")
    print_grouped("Unique to Grype", filter_and_group(grype_data, only_grype))
    print_grouped("Unique to Trivy", filter_and_group(trivy_data, only_trivy))
    print_grouped("Shared CVEs", filter_and_group(grype_data, shared))

def main():
    if len(sys.argv) < 2:
        print("‚ùå Usage: scancompare <image> | --uninstall | --version")
        return

    if sys.argv[1] == "--version":
        print(f"üì¶ scancompare version {VERSION}")
        return
    if sys.argv[1] == "--uninstall":
        uninstall()
        return

    self_update()
    print(f"\nüì¶ scancompare version {VERSION}")
    image = sys.argv[1]
    trivy_file, grype_file, trivy_ver, grype_ver = scan_image(image)
    trivy_data = parse_trivy(trivy_file)
    grype_data = parse_grype(grype_file)
    compare_and_report(trivy_data, grype_data)

    html_path = REPORT_DIR / f"scan_report_{image.replace(':', '_')}_{TIMESTAMP}.html"
    with open(html_path, "w") as f:
        f.write("<html><head><title>Scan Report</title></head><body>")
        f.write(f"<h1>Scan Report: {image}</h1>")
        f.write(f"<p>Date: {TIMESTAMP}</p>")
        f.write(f"<p><b>scancompare version:</b> {VERSION}<br>")
        f.write(f"<b>Trivy version:</b> {trivy_ver}<br>")
        f.write(f"<b>Grype version:</b> {grype_ver}</p>")
        f.write("<hr><pre>")
        f.write(f"Shared CVEs: {len(set(trivy_data) & set(grype_data))}\n")
        f.write("</pre></body></html>")
    print(f"\n‚úÖ HTML report saved to {html_path}")

    answer = input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").strip().lower()
    if answer == "y":
        opener = "open" if sys.platform == "darwin" else "xdg-open"
        run(f"{opener} {html_path}", capture=False)

if __name__ == "__main__":
    main()
