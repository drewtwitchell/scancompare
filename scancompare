#!/bin/bash
VERSION="1.0.7"
SCRIPT_NAME="scancompare"
SCRIPT_PATH="$HOME/.local/bin/$SCRIPT_NAME"
REPO_USER="drewtwitchell"
REPO_NAME="scancompare"
REMOTE_URL="https://raw.githubusercontent.com/$REPO_USER/$REPO_NAME/main/$SCRIPT_NAME"

if [[ "$1" == "--no-update" ]]; then SKIP_UPDATE=true; shift; else SKIP_UPDATE=false; fi

TARGET="$1"
REPORT_DIR="scan_reports"
GRYPE_OUTPUT="$REPORT_DIR/grype_output.json"
TRIVY_OUTPUT="$REPORT_DIR/trivy_output.json"
DIFF_JSON="$REPORT_DIR/diff_report.json"
HTML_REPORT="$REPORT_DIR/scan_report.html"
UPGRADED_IMAGE=""

# Helper functions
step() { echo -e "\nüîπ $1"; }
done_msg() { echo "    ‚úî $1"; }

get_remote_version() {
  curl -fsSL "$REMOTE_URL" | grep 'VERSION=' | cut -d'"' -f2
}

auto_update_check() {
  remote_ver=$(get_remote_version)
  if [[ "$VERSION" != "$remote_ver" ]]; then
    echo "üîÑ New version available: $remote_ver (current: $VERSION)"
    self_update "$@"
  fi
}

self_update() {
  tmp_file=$(mktemp)
  echo "üì• Auto-updating from $REMOTE_URL"
  curl -fsSL "$REMOTE_URL" -o "$tmp_file" || { echo "‚ùå Failed to fetch update."; exit 1; }
  remote_version=$(grep '^VERSION=' "$tmp_file" | cut -d'"' -f2)
  echo "üåê Fetched remote version: $remote_version"

  if [[ "$remote_version" == "$VERSION" ]]; then
    rm -f "$tmp_file"
    return
  fi

  echo "üîÑ New version available: $remote_version (current: $VERSION)"
  chmod +x "$tmp_file"
  mv "$tmp_file" "$SCRIPT_PATH"
  echo "‚úÖ scancompare updated to version $remote_version"
  exec "$SCRIPT_PATH" --no-update "$@"
}

[[ "$1" == "update" ]] && self_update "$@" && exit 0
$SKIP_UPDATE || auto_update_check "$@"

check_tools() {
  for tool in grype trivy jq; do
    if ! command -v $tool &>/dev/null; then
      echo "üì¶ Installing $tool..."
      if command -v brew &>/dev/null; then brew install $tool
      else echo "‚ùå Please install $tool manually"; exit 1; fi
    fi
  done
}

run_scans() {
  mkdir -p "$REPORT_DIR"
  step "Scanning with Trivy..."
  trivy image --format json --output "$TRIVY_OUTPUT" "$TARGET"
  done_msg "Trivy scan saved to $TRIVY_OUTPUT"

  step "Scanning with Grype..."
  grype "$TARGET" -o json > "$GRYPE_OUTPUT"
  done_msg "Grype scan saved to $GRYPE_OUTPUT"
}

compare_results() {
  step "Comparing scan results..."
  grype_cves=$(jq -r '.matches[].vulnerability.id' "$GRYPE_OUTPUT" | sort | uniq)
  trivy_cves=$(jq -r '[.Results[].Vulnerabilities[]?.VulnerabilityID] | flatten | .[]' "$TRIVY_OUTPUT" | sort | uniq)
  echo "$grype_cves" > "$REPORT_DIR/grype.txt"
  echo "$trivy_cves" > "$REPORT_DIR/trivy.txt"
  only_grype=$(comm -23 "$REPORT_DIR/grype.txt" "$REPORT_DIR/trivy.txt")
  only_trivy=$(comm -13 "$REPORT_DIR/grype.txt" "$REPORT_DIR/trivy.txt")
  in_both=$(comm -12 "$REPORT_DIR/grype.txt" "$REPORT_DIR/trivy.txt")

  jq -n \
    --argjson only_in_grype "$(jq -R -s -c 'split("\n") | map(select(. != ""))' <<< "$only_grype")" \
    --argjson only_in_trivy "$(jq -R -s -c 'split("\n") | map(select(. != ""))' <<< "$only_trivy")" \
    --argjson in_both "$(jq -R -s -c 'split("\n") | map(select(. != ""))' <<< "$in_both")" '
    def count(a): a | length;
    {
      summary: {
        total_grype: (count($only_in_grype) + count($in_both)),
        total_trivy: (count($only_in_trivy) + count($in_both)),
        shared: count($in_both),
        only_in_grype: count($only_in_grype),
        only_in_trivy: count($only_in_trivy)
      },
      unique_to_grype: $only_in_grype,
      unique_to_trivy: $only_in_trivy,
      common_vulnerabilities: $in_both,
      actions: {
        suggestion: "Prioritize shared vulnerabilities and those with fixed versions."
      }
    }' > "$DIFF_JSON"

  done_msg "Diff report saved to $DIFF_JSON"
}

# ... [generate_html_report, open_html, get_base_image, and check_for_base_image_upgrade remain unchanged] ...

main() {
  [[ -z "$TARGET" ]] && echo "‚ùå Usage: scancompare <image>" && exit 1
  echo "üîç Starting vulnerability scan for image: $TARGET"

  check_tools
  run_scans
  compare_results
  generate_html_report
  open_html

  if [[ -f Dockerfile ]]; then
    check_for_base_image_upgrade
    if [[ -n "$UPGRADED_IMAGE" ]]; then
      TARGET="$UPGRADED_IMAGE"
      echo "üîÅ Re-scanning upgraded image: $UPGRADED_IMAGE"
      run_scans
      compare_results
      generate_html_report
      open_html
    fi
  fi
}

main "$@"
