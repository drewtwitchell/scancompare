#!/usr/bin/env python3
import os
import sys
import subprocess
import json
import shutil
from datetime import datetime

VERSION = "1.4.1"
REMOTE_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"
SCRIPT_PATH = os.path.expanduser("~/.local/bin/scancompare")
REPORT_DIR = "scan_reports"
TIMESTAMP = datetime.now().strftime("%Y-%m-%d")

def print_step(message): print(f"\nüîπ {message}")
def print_done(message): print(f"    ‚úî {message}")

def run_cmd(cmd, capture=False):
    if capture:
        return subprocess.run(cmd, shell=True, capture_output=True, text=True)
    subprocess.run(cmd, shell=True)

def extract_cves_trivy(filepath):
    try:
        with open(filepath) as f:
            data = json.load(f)
        vulns = []
        for result in data.get("Results", []):
            for v in result.get("Vulnerabilities", []):
                vulns.append({"id": v["VulnerabilityID"], "severity": v["Severity"]})
        return vulns
    except Exception:
        return []

def extract_cves_grype(filepath):
    try:
        with open(filepath) as f:
            data = json.load(f)
        return [{"id": m["vulnerability"]["id"], "severity": m["vulnerability"]["severity"]} for m in data.get("matches", [])]
    except Exception:
        return []

def get_tool_version(tool):
    try:
        result = subprocess.run([tool, "--version"], capture_output=True, text=True)
        return result.stdout.strip()
    except Exception:
        return "unknown"

def auto_update():
    try:
        remote_script = subprocess.run(f"curl -fsSL {REMOTE_URL}", shell=True, capture_output=True, text=True)
        if remote_script.returncode != 0:
            return
        lines = remote_script.stdout.splitlines()
        remote_version = None
        for line in lines:
            if line.startswith("VERSION"):
                remote_version = line.split("=")[1].strip().replace('"', '')
                break
        if remote_version and remote_version != VERSION:
            print(f"üîÑ New version available: {remote_version} (current: {VERSION})")
            tmp_path = "/tmp/scancompare"
            with open(tmp_path, "w") as f:
                f.write(remote_script.stdout)
            os.chmod(tmp_path, 0o755)
            shutil.copy(tmp_path, SCRIPT_PATH)
            print(f"‚úÖ scancompare updated to version {remote_version}")
            os.execv(SCRIPT_PATH, [SCRIPT_PATH] + sys.argv[1:])
    except Exception as e:
        print(f"‚ö†Ô∏è Auto-update failed: {e}")

def print_summary(grype_cves, trivy_cves):
    grype_ids = {v["id"] for v in grype_cves}
    trivy_ids = {v["id"] for v in trivy_cves}

    shared = grype_ids & trivy_ids
    only_grype = grype_ids - trivy_ids
    only_trivy = trivy_ids - grype_ids

    def group_by_severity(cves, filter_ids):
        grouped = {}
        for v in cves:
            if v["id"] in filter_ids:
                sev = v["severity"].capitalize()
                grouped.setdefault(sev, []).append(v["id"])
        return grouped

    print("\nüìä CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {len(grype_ids)}    | {len(only_grype)}           | {len(shared)}")
    print(f"Trivy      | {len(trivy_ids)}    | {len(only_trivy)}           | {len(shared)}")
    print("\nüîç CVEs by Severity")

    def print_cves(grouped, label):
        if not grouped: return
        print(f"\nüî∏ {label}")
        for sev in sorted(grouped.keys(), key=lambda x: ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"].index(x)):
            print(f"  {sev} ({len(grouped[sev])}):")
            for cve in grouped[sev]:
                print(f"    - {cve}")

    print_cves(group_by_severity(grype_cves, only_grype), "Unique to Grype")
    print_cves(group_by_severity(trivy_cves, only_trivy), "Unique to Trivy")
    print_cves(group_by_severity(grype_cves, shared), "Shared CVEs")

def generate_html(grype_cves, trivy_cves, target):
    os.makedirs(REPORT_DIR, exist_ok=True)
    path = os.path.join(REPORT_DIR, f"scan_report_{target.replace(':','_')}_{TIMESTAMP}.html")
    trivy_ver = get_tool_version("trivy")
    grype_ver = get_tool_version("grype")

    html = f"""<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Scan Report</title>
    <style>body{{font-family:sans-serif;padding:20px;max-width:900px;margin:auto}}
    h1,h2,h3{{color:#2c3e50}} pre{{background:#f4f4f4;padding:10px;border-radius:8px;overflow:auto;}}
    button{{margin:10px 0;padding:6px 10px;background:#2c3e50;color:#fff;border:none;border-radius:5px;cursor:pointer}}
    table{{border-collapse:collapse;width:100%;margin-top:1em}} th,td{{border:1px solid #ccc;padding:8px;text-align:left}}
    ul{{list-style-type:square;margin-left:20px}}</style>
    <script>
    function toggle(id){{var el=document.getElementById(id);el.style.display=(el.style.display==='none'||!el.style.display)?'block':'none'}}
    function savePDF(){{window.print();}}
    </script></head><body>
    <h1>Scan Report: {target}</h1>
    <p><strong>Date:</strong> {TIMESTAMP}</p>
    <p><strong>Grype Version:</strong> {grype_ver}</p>
    <p><strong>Trivy Version:</strong> {trivy_ver}</p>
    <button onclick='savePDF()'>üìÑ Save as PDF</button>
    """

    def section(title, cves):
        grouped = {}
        for v in cves:
            sev = v["severity"].capitalize()
            grouped.setdefault(sev, []).append(v["id"])
        html = f"<h2>{title}</h2>"
        for sev in sorted(grouped.keys(), key=lambda x: ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"].index(x)):
            html += f"<h3>{sev} ({len(grouped[sev])})</h3><ul>"
            for cve in grouped[sev]:
                html += f"<li><a href='https://nvd.nist.gov/vuln/detail/{cve}' target='_blank'>{cve}</a></li>"
            html += "</ul>"
        return html

    grype_ids = {v["id"] for v in grype_cves}
    trivy_ids = {v["id"] for v in trivy_cves}
    shared_ids = grype_ids & trivy_ids
    only_grype = [v for v in grype_cves if v["id"] in (grype_ids - trivy_ids)]
    only_trivy = [v for v in trivy_cves if v["id"] in (trivy_ids - grype_ids)]
    shared = [v for v in grype_cves if v["id"] in shared_ids]

    html += section("Shared CVEs", shared)
    html += section("Unique to Grype", only_grype)
    html += section("Unique to Trivy", only_trivy)

    html += "<button onclick=\"toggle('raw_json')\">Toggle Raw JSON</button>"
    full_data = {
        "grype": grype_cves,
        "trivy": trivy_cves,
        "shared": [v for v in grype_cves if v["id"] in shared_ids]
    }
    html += f"<pre id='raw_json' style='display:none'>{json.dumps(full_data, indent=2)}</pre></body></html>"

    with open(path, "w") as f:
        f.write(html)
    print(f"‚úÖ HTML report saved to {path}")

def uninstall():
    print("‚ö†Ô∏è Uninstalling scancompare...")
    try:
        os.remove(SCRIPT_PATH)
        print("‚úÖ scancompare removed.")
        choice = input("üóëÔ∏è  Delete scan_reports folder? (y/n): ").strip().lower()
        if choice == "y" and os.path.exists(REPORT_DIR):
            shutil.rmtree(REPORT_DIR)
            print("üßπ scan_reports folder deleted.")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå Error: {e}")
        sys.exit(1)

def main():
    if "--version" in sys.argv:
        print(f"scancompare v{VERSION}")
        sys.exit(0)
    if "--uninstall" in sys.argv:
        uninstall()
    if len(sys.argv) < 2:
        print("‚ùå Usage: scancompare <image>")
        sys.exit(1)

    auto_update()

    target = sys.argv[1]
    os.makedirs(REPORT_DIR, exist_ok=True)

    trivy_out = os.path.join(REPORT_DIR, "original_trivy.json")
    grype_out = os.path.join(REPORT_DIR, "original_grype.json")

    print_step("Scanning with Trivy...")
    run_cmd(f"trivy image --scanners vuln --format json --output {trivy_out} {target}")
    print_done(f"Trivy scan saved to {trivy_out}")

    print_step("Scanning with Grype...")
    run_cmd(f"grype {target} -o json > {grype_out}")
    print_done(f"Grype scan saved to {grype_out}")

    grype_cves = extract_cves_grype(grype_out)
    trivy_cves = extract_cves_trivy(trivy_out)

    print_summary(grype_cves, trivy_cves)
    generate_html(grype_cves, trivy_cves, target)

if __name__ == "__main__":
    main()
