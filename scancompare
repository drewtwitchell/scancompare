#!/usr/bin/env python3
# scancompare version 1.6.0

import os
import sys
import json
import subprocess
import platform
import datetime
from pathlib import Path
from shutil import which

VERSION = "1.6.0"
SCRIPT_NAME = "scancompare"

# Directory setup
REPORT_DIR = Path("scan_reports")
REPORT_DIR.mkdir(exist_ok=True)

# Helper to check if a command exists
def is_tool(name):
    return which(name) is not None

# Auto-install Grype and Trivy if missing
def install_tools():
    if platform.system() == "Darwin" and is_tool("brew"):
        if not is_tool("trivy"):
            print("üîß Installing Trivy...")
            subprocess.run(["brew", "install", "trivy"], check=False)
        if not is_tool("grype"):
            print("üîß Installing Grype...")
            subprocess.run(["brew", "install", "grype"], check=False)
    elif platform.system() == "Linux":
        if not is_tool("trivy"):
            subprocess.run(["sudo", "apt", "install", "-y", "trivy"], check=False)
        if not is_tool("grype"):
            subprocess.run(["curl", "-sSfL", "https://raw.githubusercontent.com/anchore/grype/main/install.sh", "|", "sh"], check=False)

# Version check
def check_version():
    try:
        output = subprocess.check_output([SCRIPT_NAME, "--version"], text=True)
        return output.strip().split()[-1]
    except Exception:
        return "unknown"

# Version updater
def auto_update():
    latest_version = "1.6.0"
    if VERSION != latest_version:
        print(f"üîÑ New version available: {VERSION} ‚Üí {latest_version}")
        print(f"‚úÖ scancompare updated to latest version")

# Extract tool version
def get_tool_version(tool):
    try:
        out = subprocess.check_output([tool, "version"], stderr=subprocess.STDOUT, text=True)
        for line in out.splitlines():
            if "Version:" in line or "Application:" in line:
                return line.split(":")[-1].strip()
    except Exception:
        return "unknown"
    return "unknown"

# Scan with Trivy or Grype
def run_scan(tool, image, output_path):
    try:
        with open(output_path, "w") as f:
            subprocess.run([tool, "-q", "image", "-f", "json", image], stdout=f, check=True)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {tool} scan failed: {e}")
        return False

# Extract CVEs
def extract_cves(json_path):
    try:
        with open(json_path) as f:
            data = json.load(f)
        cves = set()
        if "Results" in data:
            for r in data["Results"]:
                for vuln in r.get("Vulnerabilities", []):
                    cves.add(vuln["VulnerabilityID"])
        elif "matches" in data:
            for match in data["matches"]:
                cves.add(match["vulnerability"]["id"])
        return cves
    except Exception:
        return set()

# HTML report
def generate_html(image, trivy_path, grype_path, shared, only_trivy, only_grype):
    date = datetime.datetime.now().strftime("%Y-%m-%d")
    filename = f"scan_report_{image.replace(':', '_')}_{date}.html"
    filepath = REPORT_DIR / filename

    with open(filepath, "w") as f:
        f.write(f"<html><head><title>Scan Report for {image}</title></head><body>")
        f.write(f"<h1>Scan Report for {image}</h1>")
        f.write("<h2>Summary</h2><ul>")
        f.write(f"<li>Total Shared CVEs: {len(shared)}</li>")
        f.write(f"<li>Only in Trivy: {len(only_trivy)}</li>")
        f.write(f"<li>Only in Grype: {len(only_grype)}</li></ul>")

        def section(title, items):
            f.write(f"<h3>{title}</h3>")
            if not items:
                f.write("<p>None</p>")
                return
            f.write("<ul>")
            for cve in sorted(items):
                url = f"https://nvd.nist.gov/vuln/detail/{cve}" if "CVE-" in cve else "#"
                f.write(f'<li><a href="{url}" target="_blank">{cve}</a></li>')
            f.write("</ul>")

        section("Shared CVEs", shared)
        section("Only in Trivy", only_trivy)
        section("Only in Grype", only_grype)

        f.write('<br><button onclick="window.print()">Export to PDF</button>')
        f.write("</body></html>")

    print(f"‚úÖ HTML report saved: {filepath}")
    open_html = input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").strip().lower()
    if open_html == "y":
        subprocess.run(["open" if platform.system() == "Darwin" else "xdg-open", str(filepath)])

# Main
def main():
    if len(sys.argv) < 2:
        print("Usage: scancompare <image>")
        sys.exit(1)

    image = sys.argv[1]
    install_tools()
    auto_update()

    print(f"
üì¶ scancompare version {VERSION}")

    print("
üîπ Scanning with Trivy...")
    trivy_ver = get_tool_version("trivy")
    print(f"   üì¶ Trivy version: {trivy_ver}")
    trivy_path = REPORT_DIR / "original_trivy.json"
    trivy_ok = run_scan("trivy", image, trivy_path)

    print("
üîπ Scanning with Grype...")
    grype_ver = get_tool_version("grype")
    print(f"   üì¶ Grype version: {grype_ver}")
    grype_path = REPORT_DIR / "original_grype.json"
    grype_ok = run_scan("grype", image, grype_path)

    if not trivy_ok and not grype_ok:
        print("‚ùå Both scans failed. Please check the image name and try again.")
        sys.exit(1)

    trivy_cves = extract_cves(trivy_path) if trivy_ok else set()
    grype_cves = extract_cves(grype_path) if grype_ok else set()

    shared = trivy_cves & grype_cves
    only_trivy = trivy_cves - grype_cves
    only_grype = grype_cves - trivy_cves

    print("
üìä CLI Summary Report
")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {len(grype_cves)}   | {len(only_grype)}             | {len(shared)}")
    print(f"Trivy      | {len(trivy_cves)}   | {len(only_trivy)}             | {len(shared)}")

    print("
üîç CVEs by Severity
")
    if only_grype:
        print("üî∏ Unique to Grype")
        print(" ", "
  ".join(sorted(only_grype)))
    if only_trivy:
        print("
üî∏ Unique to Trivy")
        print(" ", "
  ".join(sorted(only_trivy)))
    if shared:
        print("
üî∏ Shared CVEs")
        print(" ", "
  ".join(sorted(shared)))

    generate_html(image, trivy_path, grype_path, shared, only_trivy, only_grype)

if __name__ == "__main__":
    main()
