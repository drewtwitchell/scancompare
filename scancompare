#!/usr/bin/env python3
# scancompare version 1.6.5

import os
import sys
import json
import subprocess
import platform
import webbrowser
from datetime import datetime
from urllib.request import urlopen
from pathlib import Path
from html import escape

SCRIPT_NAME = "scancompare"
SCRIPT_URL = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"
VERSION = "1.6.5"

def check_latest_version(silent=False):
    try:
        latest = urlopen(SCRIPT_URL).read().decode("utf-8").split("VERSION = ")[1].split("\n")[0].strip('"')
        if latest != VERSION:
            if not silent:
                print(f"üîÑ New version available: {VERSION} ‚Üí {latest}")
            update_script()
            if not silent:
                print("‚úÖ scancompare updated to latest version")
            os.execv(sys.executable, [sys.executable] + sys.argv)
        elif not silent:
            print(f"üì¶ scancompare version {VERSION}")
    except Exception:
        if not silent:
            print("‚ö†Ô∏è Could not determine remote version.\nüì¶ scancompare version", VERSION)

def update_script():
    try:
        new_code = urlopen(SCRIPT_URL).read().decode("utf-8")
        script_path = Path(__file__)
        script_path.write_text(new_code)
    except Exception as e:
        print("‚ùå Failed to update script:", e)

def get_version(tool):
    try:
        result = subprocess.run([tool, "version"], capture_output=True, text=True)
        for line in result.stdout.splitlines():
            if tool.lower() in line.lower() or "Version" in line:
                return line.strip().split()[-1]
    except Exception:
        return "unknown"
    return "unknown"

def run_scan(tool, image, output_path):
    with open(output_path, "w") as outfile:
        try:
            subprocess.run([tool, "image", "-f", "json", "-o", output_path, image],
                           check=True, stdout=outfile, stderr=subprocess.DEVNULL)
            return True
        except subprocess.CalledProcessError:
            return False

def extract_cves(file_path):
    try:
        with open(file_path) as f:
            data = json.load(f)
        return {
            item["VulnerabilityID"]: item
            for result in data.get("Results", [])
            for item in result.get("Vulnerabilities", [])
        }
    except Exception:
        return {}

def display_summary(trivy_data, grype_data):
    trivy_cves = set(trivy_data.keys())
    grype_cves = set(grype_data.keys())

    shared = trivy_cves & grype_cves
    only_trivy = trivy_cves - grype_cves
    only_grype = grype_cves - trivy_cves

    print("\nüìä CLI Summary Report\n")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {len(grype_cves)}   | {len(only_grype)}             | {len(shared)}")
    print(f"Trivy      | {len(trivy_cves)}   | {len(only_trivy)}            | {len(shared)}")
    return shared, only_trivy, only_grype

def explain_exit(msg):
    print(f"‚ö†Ô∏è {msg}")
    sys.exit(1)

def generate_html_report(image, trivy_json, grype_json, shared, only_trivy, only_grype):
    try:
        with open(trivy_json) as tf, open(grype_json) as gf:
            trivy_data = json.load(tf)
            grype_data = json.load(gf)
    except Exception as e:
        print(f"‚ùå Failed to read scan results: {e}")
        return

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    filename = f"scan_reports/scan_report_{image.replace(':', '_')}_{datetime.now().strftime('%Y-%m-%d')}.html"

    def generate_table(vulns, title):
        rows = ""
        for cve_id in sorted(vulns):
            rows += f"<tr><td><a href='https://nvd.nist.gov/vuln/detail/{cve_id}' target='_blank'>{cve_id}</a></td></tr>"
        return f"<h3 id='{title}'>{title.replace('_', ' ').title()}</h3><table><tr><th>CVE ID</th></tr>{rows}</table>"

    with open(filename, "w") as f:
        f.write(f"""<!DOCTYPE html>
<html>
<head>
    <meta charset='UTF-8'>
    <title>Scan Report - {escape(image)}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        h1 {{ color: #333; }}
        table {{ border-collapse: collapse; width: 100%; margin-bottom: 40px; }}
        th, td {{ border: 1px solid #ddd; padding: 8px; }}
        th {{ background-color: #f2f2f2; }}
        a {{ color: #0645ad; }}
    </style>
</head>
<body>
    <h1>Scan Report</h1>
    <p><strong>Image:</strong> {escape(image)}</p>
    <p><strong>Date:</strong> {timestamp}</p>
    <h2>Table of Contents</h2>
    <ul>
        <li><a href="#shared">Shared CVEs</a></li>
        <li><a href="#only_trivy">Unique to Trivy</a></li>
        <li><a href="#only_grype">Unique to Grype</a></li>
    </ul>
    {generate_table(shared, 'shared')}
    {generate_table(only_trivy, 'only_trivy')}
    {generate_table(only_grype, 'only_grype')}
</body>
</html>""")
    print(f"\n‚úÖ HTML report saved: {filename}")

    if input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").strip().lower() == 'y':
        webbrowser.open(f"file://{os.path.abspath(filename)}")

def main():
    if len(sys.argv) == 2 and sys.argv[1] in ("--version", "-v"):
        check_latest_version()
        sys.exit(0)

    if len(sys.argv) < 2:
        print("Usage: scancompare <image>")
        sys.exit(1)

    check_latest_version(silent=True)
    image = sys.argv[1]

    scan_dir = Path("scan_reports")
    scan_dir.mkdir(exist_ok=True)

    trivy_path = scan_dir / "original_trivy.json"
    grype_path = scan_dir / "original_grype.json"

    print(f"\nüîπ Scanning with Trivy...")
    trivy_version = get_version("trivy")
    print(f"   üì¶ Trivy version: {trivy_version}")
    if not run_scan("trivy", image, trivy_path):
        explain_exit("Trivy scan failed or image not found.")
    print("    ‚úî Trivy scan saved to", trivy_path)

    print(f"\nüîπ Scanning with Grype...")
    grype_version = get_version("grype")
    print(f"   üì¶ Grype version: {grype_version}")
    if not run_scan("grype", image, grype_path):
        explain_exit("Grype scan failed or image not found.")
    print("    ‚úî Grype scan saved to", grype_path)

    trivy_data = extract_cves(trivy_path)
    grype_data = extract_cves(grype_path)

    shared, only_trivy, only_grype = display_summary(trivy_data, grype_data)

    print("\nüîç CVEs by Severity")
    print("\nüî∏ Unique to Grype")
    for cve in sorted(only_grype):
        print(f"  - {cve}")
    print("\nüî∏ Unique to Trivy")
    for cve in sorted(only_trivy):
        print(f"  - {cve}")
    print("\nüî∏ Shared CVEs")
    for cve in sorted(shared):
        print(f"  - {cve}")

    generate_html_report(image, trivy_path, grype_path, shared, only_trivy, only_grype)

if __name__ == "__main__":
    main()
