#!/usr/bin/env python3
import subprocess
import json
import os
import sys
import shutil
import urllib.request
from datetime import datetime
from pathlib import Path

VERSION = "1.5.1"
SCRIPT_NAME = "scancompare"
SCRIPT_URL = f"https://raw.githubusercontent.com/drewtwitchell/scancompare/main/{SCRIPT_NAME}"
INSTALL_PATH = Path.home() / ".local" / "bin" / SCRIPT_NAME
REPORT_DIR = Path("scan_reports")
REPORT_DIR.mkdir(exist_ok=True)
TIMESTAMP = datetime.now().strftime("%Y-%m-%d")

def run_cmd(cmd, capture=False):
    try:
        result = subprocess.run(cmd, shell=True, check=True, text=True, capture_output=capture)
        return result.stdout.strip() if capture else None
    except subprocess.CalledProcessError:
        return None

def get_tool_version(tool):
    version_cmds = {
        "trivy": "trivy --version",
        "grype": "grype version"
    }
    output = run_cmd(version_cmds[tool], capture=True)
    if output:
        for line in output.splitlines():
            if "Version:" in line:
                return line.split("Version:")[-1].strip()
            if "Application:" in line:
                continue
            if line.strip().startswith(tool):
                parts = line.strip().split()
                if len(parts) >= 2:
                    return parts[1]
    return "unknown"

def check_and_update_tool(tool):
    print(f"üîç Checking for latest {tool} version...")
    if tool == "trivy":
        url = "https://api.github.com/repos/aquasecurity/trivy/releases/latest"
        asset_name = "trivy_0.60.0_Linux-64bit.tar.gz"
        extract_name = "trivy"
    elif tool == "grype":
        url = "https://api.github.com/repos/anchore/grype/releases/latest"
        asset_name = "grype_linux_amd64.tar.gz"
        extract_name = "grype"
    else:
        return

    if shutil.which(tool):
        return  # Assume user has it installed

    print(f"üì¶ Installing {tool}...")
    if shutil.which("brew"):
        run_cmd(f"brew install {tool}")
    else:
        download_url = f"https://github.com/{'aquasecurity' if tool == 'trivy' else 'anchore'}/{tool}/releases/latest/download/{asset_name}"
        run_cmd(f"curl -sL {download_url} -o /tmp/{tool}.tar.gz")
        run_cmd(f"tar -xzf /tmp/{tool}.tar.gz -C /tmp")
        run_cmd(f"mv /tmp/{extract_name} ~/.local/bin/{tool}")
        run_cmd(f"chmod +x ~/.local/bin/{tool}")

def check_self_update():
    try:
        remote_script = urllib.request.urlopen(SCRIPT_URL).read().decode("utf-8")
        for line in remote_script.splitlines():
            if line.startswith("VERSION ="):
                latest = line.split("=")[-1].strip().strip('"')
                break
        else:
            print("‚ö†Ô∏è Could not determine remote version.")
            return
        if latest != VERSION:
            print(f"üîÑ New version available: {latest} (current: {VERSION})")
            print(f"‚úÖ scancompare updated to version {latest}")
            with urllib.request.urlopen(SCRIPT_URL) as r:
                with open(INSTALL_PATH, "wb") as f:
                    f.write(r.read())
            os.chmod(INSTALL_PATH, 0o755)
            os.execv(INSTALL_PATH, [str(INSTALL_PATH)] + sys.argv[1:])
    except Exception as e:
        print("‚ö†Ô∏è Could not check for updates:", e)

def uninstall():
    print("üßπ Uninstalling scancompare...")
    if INSTALL_PATH.exists():
        INSTALL_PATH.unlink()
        print(f"‚úÖ Removed {INSTALL_PATH}")
    else:
        print("‚ùå scancompare is not installed.")
    sys.exit(0)

def generate_report(trivy_data, grype_data, target):
    def group_by_severity(cves):
        grouped = {}
        for item in cves:
            sev = item.get("severity", "Unknown")
            grouped.setdefault(sev, []).append(item["id"])
        return grouped

    trivy_set = set(item["id"] for item in trivy_data)
    grype_set = set(item["id"] for item in grype_data)
    shared = trivy_set & grype_set
    only_trivy = trivy_set - grype_set
    only_grype = grype_set - trivy_set

    def filter_items(data, ids):
        return [item for item in data if item["id"] in ids]

    shared_items = filter_items(trivy_data, shared)
    only_trivy_items = filter_items(trivy_data, only_trivy)
    only_grype_items = filter_items(grype_data, only_grype)

    sections = [
        ("Unique to Grype", only_grype_items),
        ("Unique to Trivy", only_trivy_items),
        ("Shared CVEs", shared_items),
    ]

    html = f"""<!DOCTYPE html><html><head><meta charset="UTF-8">
    <title>Scan Report</title>
    <style>
        body {{ font-family: sans-serif; padding: 20px; max-width: 1000px; margin: auto; }}
        h1, h2, h3 {{ color: #2c3e50; }}
        code {{ background: #f4f4f4; padding: 2px 4px; }}
        table {{ border-collapse: collapse; width: 100%; margin-top: 1em; }}
        th, td {{ border: 1px solid #ccc; padding: 8px; }}
        .toggle {{ cursor: pointer; background: #eee; padding: 5px; border-radius: 5px; }}
    </style>
    <script>
        function toggle(id) {{
            const el = document.getElementById(id);
            el.style.display = el.style.display === 'none' ? 'block' : 'none';
        }}
    </script>
    </head><body>
    <h1>Scan Report for <code>{target}</code></h1>
    <p><strong>Date:</strong> {TIMESTAMP}</p>
    <p><strong>Trivy Version:</strong> {get_tool_version('trivy')} | <strong>Grype Version:</strong> {get_tool_version('grype')}</p>
    <h2>Summary</h2>
    <table><tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
    <tr><td>Grype</td><td>{len(grype_data)}</td><td>{len(only_grype)}</td><td>{len(shared)}</td></tr>
    <tr><td>Trivy</td><td>{len(trivy_data)}</td><td>{len(only_trivy)}</td><td>{len(shared)}</td></tr>
    </table>
    <h2>Breakdown by Tool</h2>
    <ul>
    """
    for title, items in sections:
        html += f'<li><a href="#{title}">{title}</a></li>'
    html += "</ul>"

    for title, items in sections:
        grouped = group_by_severity(items)
        html += f'<h3 id="{title}">{title}</h3>'
        for severity in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
            if severity in grouped:
                html += f"<h4>{severity} ({len(grouped[severity])}):</h4><ul>"
                for cve in grouped[severity]:
                    html += f'<li><a href="https://nvd.nist.gov/vuln/detail/{cve}" target="_blank">{cve}</a></li>'
                html += "</ul>"

    html += f'<button onclick="toggle(\'json\')">Toggle Raw JSON</button><pre id="json" style="display:none;">'
    html += json.dumps({
        "trivy": trivy_data,
        "grype": grype_data
    }, indent=2)
    html += "</pre></body></html>"

    out_file = REPORT_DIR / f"scan_report_{target.replace('/', '_').replace(':', '_')}_{TIMESTAMP}.html"
    with open(out_file, "w") as f:
        f.write(html)
    print(f"‚úÖ HTML report saved to {out_file}")
    if input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").strip().lower() == "y":
        if sys.platform == "darwin":
            run_cmd(f"open {out_file}")
        else:
            run_cmd(f"xdg-open {out_file}")

def scan_image(target):
    print(f"üì¶ scancompare version {VERSION}")

    check_and_update_tool("trivy")
    check_and_update_tool("grype")

    trivy_version = get_tool_version("trivy")
    grype_version = get_tool_version("grype")

    print(f"üîπ Scanning with Trivy...\n   üì¶ Trivy version: {trivy_version}")
    trivy_file = REPORT_DIR / "original_trivy.json"
    run_cmd(f"trivy image --scanners vuln --format json -o {trivy_file} {target}")
    print(f"    ‚úî Trivy scan saved to {trivy_file}")

    print(f"üîπ Scanning with Grype...\n   üì¶ Grype version: {grype_version}")
    grype_file = REPORT_DIR / "original_grype.json"
    run_cmd(f"grype {target} -o json > {grype_file}")
    print(f"    ‚úî Grype scan saved to {grype_file}")

    trivy_data = json.load(open(trivy_file))
    grype_data = json.load(open(grype_file))

    trivy_cves = [{"id": v["VulnerabilityID"], "severity": v["Severity"]}
                  for result in trivy_data.get("Results", []) for v in result.get("Vulnerabilities", []) if v]
    grype_cves = [{"id": m["vulnerability"]["id"], "severity": m["vulnerability"]["severity"]}
                  for m in grype_data.get("matches", []) if m.get("vulnerability")]

    generate_report(trivy_cves, grype_cves, target)

def main():
    if "--uninstall" in sys.argv:
        uninstall()
    elif "--version" in sys.argv:
        print(f"{SCRIPT_NAME} version {VERSION}")
        sys.exit(0)
    elif len(sys.argv) != 2:
        print(f"‚ùå Usage: {SCRIPT_NAME} <image> or --version or --uninstall")
        sys.exit(1)
    else:
        check_self_update()
        scan_image(sys.argv[1])

if __name__ == "__main__":
    main()
