#!/usr/bin/env python3

import os
import sys
import json
import subprocess
import tempfile
import shutil
import datetime
from pathlib import Path

VERSION = "1.4.1"
REPO = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"
INSTALL_PATH = Path.home() / ".local/bin/scancompare"
REPORT_DIR = Path("scan_reports")
REPORT_DIR.mkdir(parents=True, exist_ok=True)

def check_tools():
    def which(tool):
        return shutil.which(tool)

    def install(tool):
        print(f"üì¶ Installing {tool}...")
        if which("brew"):
            subprocess.run(["brew", "install", tool])
        else:
            if tool == "jq":
                url = "https://github.com/stedolan/jq/releases/latest/download/jq-osx-amd64"
                subprocess.run(f"curl -Lo ~/.local/bin/jq {url}", shell=True)
                subprocess.run("chmod +x ~/.local/bin/jq", shell=True)

    for t in ["grype", "trivy", "jq"]:
        if not which(t):
            install(t)

def auto_update():
    try:
        latest = subprocess.check_output(f"curl -fsSL {REPO} | grep VERSION", shell=True).decode()
        remote_version = latest.strip().split('"')[1]
        if remote_version != VERSION:
            print(f"üîÑ New version available: {remote_version} (current: {VERSION})")
            tmp = tempfile.NamedTemporaryFile(delete=False)
            subprocess.run(f"curl -fsSL {REPO} -o {tmp.name}", shell=True)
            os.chmod(tmp.name, 0o755)
            shutil.move(tmp.name, INSTALL_PATH)
            print(f"‚úÖ scancompare updated to version {remote_version}")
            sys.exit(0)
    except Exception as e:
        print(f"‚ö†Ô∏è Auto-update failed: {e}")

def run_scan(tool, image, output_file):
    print(f"üîπ Scanning with {tool.capitalize()}...")
    if tool == "trivy":
        subprocess.run(f"trivy image --scanners vuln --format json -o {output_file} {image}", shell=True)
    elif tool == "grype":
        subprocess.run(f"grype {image} -o json > {output_file}", shell=True)
    print(f"    ‚úî {tool.capitalize()} scan saved to {output_file}")

def extract_cves_trivy(file):
    with open(file) as f:
        data = json.load(f)
    return [{"id": v["VulnerabilityID"], "severity": v["Severity"]} for r in data.get("Results", []) for v in r.get("Vulnerabilities", [])]

def extract_cves_grype(file):
    with open(file) as f:
        data = json.load(f)
    return [{"id": m["vulnerability"]["id"], "severity": m["vulnerability"]["severity"]} for m in data.get("matches", [])]

def group_by_severity(cves):
    grouped = {}
    for cve in cves:
        sev = cve["severity"].capitalize()
        grouped.setdefault(sev, []).append(cve["id"])
    return grouped

def compare(grype, trivy):
    g_ids = set([c["id"] for c in grype])
    t_ids = set([c["id"] for c in trivy])
    shared = g_ids & t_ids
    only_g = g_ids - t_ids
    only_t = t_ids - g_ids
    return {
        "summary": {
            "total_grype": len(g_ids),
            "total_trivy": len(t_ids),
            "shared": len(shared),
            "only_in_grype": len(only_g),
            "only_in_trivy": len(only_t)
        },
        "breakdown": {
            "grype": group_by_severity([c for c in grype if c["id"] in g_ids]),
            "trivy": group_by_severity([c for c in trivy if c["id"] in t_ids])
        },
        "shared_cves": sorted(shared),
        "unique_grype": sorted(only_g),
        "unique_trivy": sorted(only_t),
        "actions": {
            "suggestion": "Review shared CVEs and prioritize those with known fixes."
        }
    }

def cli_summary(report):
    s = report["summary"]
    print("\nüìä CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {s['total_grype']}    | {s['only_in_grype']}           | {s['shared']}")
    print(f"Trivy      | {s['total_trivy']}    | {s['only_in_trivy']}           | {s['shared']}")
    print("\nSuggested Action:", report["actions"]["suggestion"])
    if report["shared_cves"]:
        print("\nShared CVEs:")
        for cve in report["shared_cves"]:
            print(f"- {cve}")
    if report["unique_grype"]:
        print("\nUnique to Grype:")
        for cve in report["unique_grype"]:
            print(f"- {cve}")
    if report["unique_trivy"]:
        print("\nUnique to Trivy:")
        for cve in report["unique_trivy"]:
            print(f"- {cve}")

def html_report(report, image, path):
    html = f"""<!DOCTYPE html>
<html><head><meta charset="UTF-8"><title>Scan Report</title>
<style>body{{font-family:sans-serif;padding:20px;max-width:900px;margin:auto}}h1,h2{{color:#2c3e50}}pre{{background:#f4f4f4;padding:10px;border-radius:8px;overflow:auto;}}button{{margin:10px 0;padding:6px 10px;background:#2c3e50;color:#fff;border:none;border-radius:5px;cursor:pointer}}table{{border-collapse:collapse;width:100%;margin-top:1em}}th,td{{border:1px solid #ccc;padding:8px;text-align:left}}ul{{margin-left:20px}}</style>
<script>function toggle(id){{var e=document.getElementById(id);e.style.display=(e.style.display==='none'||!e.style.display)?'block':'none'}}function savePDF(){{window.print()}}</script></head>
<body>
<h1>Scan Report: <code>{image}</code></h1>
<p><strong>Date:</strong> {datetime.date.today()}</p>
<button onclick="savePDF()">üìÑ Download as PDF</button>
<h2>Summary</h2>
<table>
<tr><th>Tool</th><th>Total</th><th>Only in Tool</th><th>Shared</th></tr>
<tr><td>Grype</td><td>{report['summary']['total_grype']}</td><td>{report['summary']['only_in_grype']}</td><td>{report['summary']['shared']}</td></tr>
<tr><td>Trivy</td><td>{report['summary']['total_trivy']}</td><td>{report['summary']['only_in_trivy']}</td><td>{report['summary']['shared']}</td></tr>
</table>
<h3>Suggested Action</h3><p>{report['actions']['suggestion']}</p>
<h3><a name="shared">Shared CVEs</a></h3><ul>"""
    for cve in report["shared_cves"]:
        html += f"<li><a href='https://nvd.nist.gov/vuln/detail/{cve}' target='_blank'>{cve}</a></li>"
    html += "</ul><h3><a name='grype'>Unique to Grype</a></h3><ul>"
    for cve in report["unique_grype"]:
        html += f"<li><a href='https://nvd.nist.gov/vuln/detail/{cve}' target='_blank'>{cve}</a></li>"
    html += "</ul><h3><a name='trivy'>Unique to Trivy</a></h3><ul>"
    for cve in report["unique_trivy"]:
        html += f"<li><a href='https://nvd.nist.gov/vuln/detail/{cve}' target='_blank'>{cve}</a></li>"
    html += f"""</ul><button onclick="toggle('raw')">Toggle Raw JSON</button>
<pre id="raw" style="display:none;">{json.dumps(report, indent=2)}</pre>
</body></html>"""
    with open(path, "w") as f:
        f.write(html)
    print(f"‚úÖ HTML report saved: {path}")

def prompt_open(path):
    choice = input("üìÅ Would you like to open the HTML report in your browser? (y/n) ").strip().lower()
    if choice == "y":
        if sys.platform.startswith("darwin"):
            subprocess.run(["open", path])
        elif sys.platform.startswith("linux"):
            subprocess.run(["xdg-open", path])
        else:
            print(f"üìé Open manually: {path}")
    else:
        print(f"üìé You can view it later at: {path}")

def main():
    if len(sys.argv) < 2:
        print("‚ùå Usage: scancompare <image>")
        sys.exit(1)

    check_tools()
    auto_update()
    target = sys.argv[1]
    ts = datetime.date.today().isoformat()
    base = target.replace(":", "_").replace("/", "_")
    grype_out = REPORT_DIR / "original_grype.json"
    trivy_out = REPORT_DIR / "original_trivy.json"
    report_path = REPORT_DIR / f"scan_report_{base}_{ts}.html"

    run_scan("trivy", target, trivy_out)
    run_scan("grype", target, grype_out)

    grype_cves = extract_cves_grype(grype_out)
    trivy_cves = extract_cves_trivy(trivy_out)

    result = compare(grype_cves, trivy_cves)
    with open(REPORT_DIR / "original_diff.json", "w") as f:
        json.dump(result, f, indent=2)

    cli_summary(result)
    html_report(result, target, report_path)
    prompt_open(report_path)

if __name__ == "__main__":
    main()
