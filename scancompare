#!/usr/bin/env python3

import os
import sys
import json
import subprocess
import shutil
from datetime import datetime

VERSION = "1.4.5"
REPO_RAW = "https://raw.githubusercontent.com/drewtwitchell/scancompare/main/scancompare"
INSTALL_PATH = os.path.expanduser("~/.local/bin/scancompare")
REPORT_DIR = "scan_reports"

def run_cmd(cmd):
    return subprocess.check_output(cmd, shell=True, text=True).strip()

def get_tool_versions():
    trivy_version = run_cmd("trivy --version").splitlines()[0].split(":")[-1].strip()
    grype_raw = run_cmd("grype version").splitlines()
    grype_version = next((line.split()[-1] for line in grype_raw if "Version" in line), "unknown")
    return trivy_version, grype_version

def self_update():
    try:
        latest = run_cmd(f"curl -fsSL {REPO_RAW} | grep VERSION").split('"')[1]
        if latest != VERSION:
            print(f"üîÑ New version available: {latest} (current: {VERSION})")
            tmp = "/tmp/scancompare"
            run_cmd(f"curl -fsSL {REPO_RAW} -o {tmp}")
            os.chmod(tmp, 0o755)
            shutil.copy(tmp, INSTALL_PATH)
            print(f"‚úÖ scancompare updated to version {latest}")
            os.execv(INSTALL_PATH, [INSTALL_PATH] + sys.argv[1:])
    except Exception as e:
        print(f"‚ö†Ô∏è Auto-update failed: {e}")

def uninstall():
    print("‚ùå Uninstalling scancompare...")
    os.remove(INSTALL_PATH)
    print("‚úÖ Removed scancompare from system.")
    sys.exit(0)

def load_json(path):
    with open(path) as f:
        return json.load(f)

def extract_cves_trivy(path):
    data = load_json(path)
    cves = []
    for result in data.get("Results", []):
        for vuln in result.get("Vulnerabilities", []):
            cves.append({"id": vuln["VulnerabilityID"], "severity": vuln["Severity"]})
    return cves

def extract_cves_grype(path):
    data = load_json(path)
    return [{"id": match["vulnerability"]["id"], "severity": match["vulnerability"]["severity"]}
            for match in data.get("matches", [])]

def by_severity(cves):
    out = {}
    for item in cves:
        sev = item["severity"].capitalize()
        out.setdefault(sev, []).append(item["id"])
    return out

def categorize(trivy, grype):
    trivy_ids = {c["id"]: c for c in trivy}
    grype_ids = {c["id"]: c for c in grype}

    shared = list(set(trivy_ids) & set(grype_ids))
    only_trivy = list(set(trivy_ids) - set(grype_ids))
    only_grype = list(set(grype_ids) - set(trivy_ids))

    def extract(ids, source):
        return [{"id": i, "severity": source[i]["severity"].capitalize()} for i in ids]

    return (
        by_severity(extract(shared, trivy_ids)),
        by_severity(extract(only_trivy, trivy_ids)),
        by_severity(extract(only_grype, grype_ids))
    )

def print_group(name, block):
    print(f"\nüî∏ {name}")
    if not block:
        print("  None")
        return
    for sev in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
        if sev in block:
            print(f"  {sev} ({len(block[sev])}):")
            for cve in block[sev]:
                print(f"    - {cve}")

def save_html(target, summary, trivy_ver, grype_ver):
    now = datetime.now().strftime("%Y-%m-%d")
    shared, trivy_only, grype_only = summary
    filename = f"{REPORT_DIR}/scan_report_{target.replace(':', '_').replace('/', '_')}_{now}.html"

    def block_html(title, block):
        out = f"<h2 id='{title}'>{title.replace('_',' ').title()}</h2>"
        for sev in ["Critical", "High", "Medium", "Low", "Negligible", "Unknown"]:
            if sev in block:
                out += f"<h3>{sev} ({len(block[sev])})</h3><ul>"
                for cve in block[sev]:
                    out += f"<li>{cve}</li>"
                out += "</ul>"
        return out

    html = f"""<!DOCTYPE html><html><head><meta charset="utf-8">
    <title>Scan Report</title>
    <style>
        body{{font-family:sans-serif;max-width:900px;margin:auto;padding:20px;}}
        table{{border-collapse:collapse;width:100%}} th,td{{border:1px solid #ccc;padding:8px;text-align:left}}
        h2{{border-bottom:1px solid #ccc}} ul{{margin:0 0 1em 1.5em}} pre{{background:#eee;padding:10px}}
        .button{{background:#333;color:#fff;padding:5px 10px;border:none;border-radius:5px;cursor:pointer;margin-top:10px}}
    </style>
    <script>
    function toggle(id) {{
        const e = document.getElementById(id);
        e.style.display = (e.style.display === 'none') ? 'block' : 'none';
    }}
    function savePDF() {{
        window.print();
    }}
    </script>
    </head><body>
    <h1>scancompare report for <code>{target}</code></h1>
    <p><strong>Trivy:</strong> {trivy_ver} &nbsp;|&nbsp; <strong>Grype:</strong> {grype_ver}</p>
    <p><button class="button" onclick="savePDF()">üìÑ Export to PDF</button></p>
    <ul>
      <li><a href="#shared">Shared CVEs</a></li>
      <li><a href="#unique_to_trivy">Unique to Trivy</a></li>
      <li><a href="#unique_to_grype">Unique to Grype</a></li>
    </ul>
    {block_html("shared", shared)}
    {block_html("unique_to_trivy", trivy_only)}
    {block_html("unique_to_grype", grype_only)}
    <button class="button" onclick="toggle('raw')">Toggle Raw JSON</button>
    <pre id="raw" style="display:none;">{json.dumps({'shared': shared, 'trivy': trivy_only, 'grype': grype_only}, indent=2)}</pre>
    </body></html>
    """
    with open(filename, "w") as f:
        f.write(html)
    print(f"\n‚úÖ HTML report saved to {filename}")
    open_choice = input("üìÅ Would you like to open the HTML report in your browser? (y/n): ").lower()
    if open_choice == "y":
        if sys.platform == "darwin": subprocess.run(["open", filename])
        elif sys.platform.startswith("linux"): subprocess.run(["xdg-open", filename])
        else: print(f"Open manually: {filename}")

def main():
    if len(sys.argv) == 2 and sys.argv[1] in ["--version", "-v"]:
        print(f"scancompare version {VERSION}")
        sys.exit(0)
    if len(sys.argv) == 2 and sys.argv[1] in ["--uninstall", "uninstall"]:
        uninstall()
    if len(sys.argv) < 2:
        print("‚ùå Usage: scancompare <image>")
        sys.exit(1)

    self_update()
    target = sys.argv[1]
    os.makedirs(REPORT_DIR, exist_ok=True)

    trivy_ver, grype_ver = get_tool_versions()

    print(f"\nüîπ Scanning with Trivy (v{trivy_ver})...")
    trivy_file = os.path.join(REPORT_DIR, "original_trivy.json")
    subprocess.run(f"trivy image --scanners vuln --format json --output {trivy_file} {target}", shell=True)
    print(f"    ‚úî Trivy scan saved to {trivy_file}")

    print(f"üîπ Scanning with Grype (v{grype_ver})...")
    grype_file = os.path.join(REPORT_DIR, "original_grype.json")
    subprocess.run(f"grype {target} -o json > {grype_file}", shell=True)
    print(f"    ‚úî Grype scan saved to {grype_file}")

    trivy_cves = extract_cves_trivy(trivy_file)
    grype_cves = extract_cves_grype(grype_file)
    shared, trivy_only, grype_only = categorize(trivy_cves, grype_cves)

    print(f"\nüîß Tool Versions:\n  Trivy: {trivy_ver}\n  Grype: {grype_ver}")
    print("\nüìä CLI Summary Report")
    print("Tool       | Total | Only in Tool | Shared")
    print("-----------|-------|---------------|--------")
    print(f"Grype      | {len(grype_cves)}   | {sum(len(v) for v in grype_only.values())}             | {sum(len(v) for v in shared.values())}")
    print(f"Trivy      | {len(trivy_cves)}   | {sum(len(v) for v in trivy_only.values())}            | {sum(len(v) for v in shared.values())}")

    print_group("Unique to Grype", grype_only)
    print_group("Unique to Trivy", trivy_only)
    print_group("Shared CVEs", shared)

    save_html(target, (shared, trivy_only, grype_only), trivy_ver, grype_ver)

if __name__ == "__main__":
    main()
